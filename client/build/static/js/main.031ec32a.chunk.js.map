{"version":3,"sources":["AppMode.js","favicon.png","components/NavBar.js","components/SideMenu.js","components/ModeBar.js","components/ConfirmDeleteAccount.js","components/CreateEditAccountDialog.js","components/ResetPasswordDialog.js","components/LookUpAccountDialog.js","components/SecurityQuestionDialog.js","components/LoginPage.js","components/SurveyManagement/AnswerTypes/FileUpload.js","components/SurveyManagement/AnswerTypes/FreeResponse.js","components/SurveyManagement/AnswerTypes/MultipleChoice.js","components/SurveyManagement/CreateSurvey.js","components/SurveyManagement/ActiveQuestions.js","components/SurveyManagement/DeleteResponseModal.js","components/SurveyManagement/viewResponseModal.js","components/SurveyManagement/SubmittedResponse.js","components/SurveyManagement/SearchQuestions.js","components/SurveyManagementPage.js","components/ConfirmDeleteRound.js","components/RoundsTable.js","components/RoundForm.js","components/FloatingButton.js","components/Rounds.js","components/CoursesPage.js","components/AboutBox.js","components/App.js","serviceWorker.js","index.js"],"names":["AppMode","LOGIN","SURVEY_MANAGEMENT","SURVEY_MANAGEMENT_RESPONSES","SURVEY_MANAGEMENT_CREATE","SURVEY_MANAGEMENT_SEARCH","ROUNDS","ROUNDS_LOGROUND","ROUNDS_EDITROUND","COURSES","Object","freeze","NavBar","getMenuBtnIcon","props","mode","menuOpen","handleMenuBtnClick","changeMode","toggleMenuOpen","className","onClick","this","id","src","logo","alt","height","width","title","React","Component","SideMenu","setGeneralMode","renderModeMenuItems","e","preventDefault","profilePicURL","displayName","localAccount","editAccount","showAbout","logOut","ModeBar","ConfirmDeleteAccount","handleChange","match","emailRef","current","value","email","state","emailMatches","setState","createRef","focus","role","close","type","ref","onChange","deleteAccount","disabled","CreateEditAccountDialog","checkDataValidity","accountName","endsWith","newUserRef","setCustomValidity","password","passwordRepeat","repeatPassRef","event","formUpdated","origAccountInfo","formIsUpdated","target","name","length","self","reader","FileReader","readAsDataURL","profilePicRef","files","addEventListener","result","updateField","updateVal","userType","securityQuestion","securityAnswer","setDefaultuserType","handleSubmit","a","userData","url","create","fetch","headers","method","body","JSON","stringify","res","status","done","text","resText","confirmDelete","confirmDeleteAccount","userId","json","parse","cancel","onSubmit","autocomplete","size","placeholder","pattern","required","onBlur","accept","profilePic","profilePicDataURL","rows","cols","maxLength","ResetPasswordDialog","resetPasswordRef","resetPasswordRepeatRef","resetPassword","errorMsg","checkForSubmit","code","cancelResetPassword","onKeyUp","LookUpAccountDialog","handleLookUpAccount","response","obj","authStrategy","getSecurityAnswer","ErrMsg","errMsg","SecurityQuestionDialog","securityAnswerRef","answer","getNewPassword","readOnly","question","LoginPage","handleLoginSubmit","loginBtnIcon","loginBtnLabel","emailInputRef","passwordInputRef","window","open","statusMsg","accountCreateDone","msg","showCreateAccountDialog","cancelCreateAccount","resetUserId","resetQ","resetA","showLookUpAccountDialog","showSecurityQuestionDialog","showResetPaswordDialog","handleOAuthLogin","provider","handleOAuthLoginClick","setTimeout","pw","showResetPasswordDialog","deleted","closeStatusMsg","githubIcon","githubLabel","loginMsg","newAccountCreated","htmlFor","style","padding","fontSize","FileUpload","FreeResponse","MultipleChoice","onAddAnswer","console","log","onRemoveAnswer","aria-label","aria-describedby","answerTypes","CreateSurvey","answerType","AnswerType","ActiveQuestions","class","DeleteResponseModal","deleteResponse","responseItem","responseId","questionID","survey","courseID","surveyID","closeDeleteResponseModal","closeModal","tabindex","aria-labelledby","aria-hidden","data-dismiss","ViewResponse","handleAnswers","questionAnswers","questionType","answers","elements","forEach","push","questions","allResponses","showConfirmDelete","itemID","tabIndex","surveyTitle","closeResponse","for","questionText","surveyResponse","SubmittedResponse","renderResponseTable","table","index","responseType","responseDateTime","viewResponse","confirmDeleteResponse","rowId","responseKeys","parseResponseRowId","responses","find","showResponseModal","editRowId","split","showDeleteResponseModal","removeResponse","getQuestions","searchResponseTable","keyCode","searchKey","onSearch","searchTerm","oldResponses","newResponses","rowString","toUpperCase","indexOf","sortTable","searchCriterionCallBack","sort","onSearchKeyChange","sortByDate","valueA","valueB","sortDateInOrder","sortByQuestion","sortQuestionInOrder","sortByResponseType","sortResponseTypeInOrder","sortByResponse","sortResponseInOrder","justifyContent","paddingBottom","cursor","keys","colSpan","fontStyle","onSearchClicked","classNames","onSearchClick","SurveyManagementPage","userObj","data","newquestions","students","getAllResponses","surveys","ConfirmDeleteRound","deleteRound","RoundsTable","editRound","setEditId","setDeleteId","renderTable","r","rounds","date","substring","course","Number","strokes","minutes","seconds","RoundForm","newSec","newSGS","computeSGS","SGS","newStrokes","newMin","faIcon","btnLabel","roundData","saveRound","min","sec","today","Date","now","getTimezoneOffset","toISOString","substr","holes","notes","thisRound","startData","max","FloatingButton","handleClick","Rounds","addRound","newData","refreshOnUpdate","editId","_id","deleteId","val","closeErrorMsg","icon","CoursesPage","AboutBox","textAlign","href","modeTitle","modeToPage","App","newMode","handleChangeMode","openMenu","closeMenu","prevState","setUserId","Id","authenticated","showEditAccount","showEditAccountDialog","cancelEditAccount","editAccountDone","showAboutDialog","then","isAuthenticated","user","ModePage","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.031ec32a.chunk.js","sourcesContent":["/* AppMode: The enumerated type for AppMode. */\r\n\r\nconst AppMode = {\r\n    LOGIN: \"LoginMode\",\r\n\r\n    SURVEY_MANAGEMENT: \"SurveyMode\",\r\n    SURVEY_MANAGEMENT_RESPONSES: \"SurveyModeResponses\",\r\n    SURVEY_MANAGEMENT_CREATE: \"SurveyModeCreate\",\r\n    SURVEY_MANAGEMENT_SEARCH: \"SurveyModeSearch\",\r\n\r\n    ROUNDS: \"RoundsMode\",\r\n    ROUNDS_LOGROUND: \"RoundsMode-LogRound\",\r\n    ROUNDS_EDITROUND: \"RoundsMode-EditRound\",\r\n\r\n    COURSES: \"CoursesMode\"\r\n};\r\n\r\nObject.freeze(AppMode); //This ensures that the object is immutable.\r\n\r\nexport default AppMode;","export default __webpack_public_path__ + \"static/media/favicon.506574b1.png\";","import React from 'react';\r\nimport AppMode from '../AppMode';\r\nimport logo from '../favicon.png'; //Importing the logo from the src directory\r\n\r\nclass NavBar extends React.Component {\r\n\r\n  getMenuBtnIcon = () => {\r\n      if (this.props.mode === AppMode.ROUNDS_LOGROUND || \r\n          this.props.mode === AppMode.ROUNDS_EDITROUND)\r\n          return \"fa fa-arrow-left\";\r\n      if (this.props.menuOpen)\r\n        return \"fa fa-times\";\r\n      return \"fa fa-bars\";\r\n  }\r\n\r\n  handleMenuBtnClick = () => {\r\n    if (this.props.mode === AppMode.ROUNDS_LOGROUND ||\r\n        this.props.mode === AppMode.ROUNDS_EDITROUND) {\r\n      this.props.changeMode(AppMode.ROUNDS);\r\n    } else if (this.props.mode != AppMode.LOGIN) {\r\n      this.props.toggleMenuOpen();\r\n    }\r\n  }\r\n\r\n  // Directly added the logo from the src directory since importing it from onedrive was causing complications\r\n  // where the image would not load correctly\r\n  render() {\r\n    return (\r\n    <div className=\"navbar\">  \r\n    <span className=\"navbar-items\">\r\n      <button className=\"sidemenu-btn\" onClick={this.handleMenuBtnClick}>\r\n        <span id=\"menuBtnIcon\" className={\"sidemenu-btn-icon \" + this.getMenuBtnIcon()}>\r\n        </span>\r\n      </button>\r\n      <img src={logo} alt=\"Kliks Logo\" height=\"38px\"\r\n      width=\"38px\" />\r\n      <span className=\"navbar-title\">\r\n        &nbsp;{this.props.title}\r\n      </span>\r\n    </span>\r\n  </div>\r\n); \r\n}\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport AppMode from './../AppMode.js'\r\nimport App from './App.js';\r\n\r\nclass SideMenu extends React.Component {\r\n\r\n  setGeneralMode = (mode) => {\r\n    if(AppMode.SURVEY_MANAGEMENT || AppMode.SURVEY_MANAGEMENT_CREATE || AppMode.SURVEY_MANAGEMENT_RESPONSES  || AppMode.SURVEY_MANAGEMENT_SEARCH){\r\n      return AppMode.SURVEY_MANAGEMENT;\r\n    }\r\n    \r\n    return mode;\r\n  }\r\n  \r\n//renderModeItems -- Renders correct subset of mode menu items based on\r\n//current mode, which is stored in this.prop.mode. Uses switch statement to\r\n//determine mode.\r\nrenderModeMenuItems = () => {\r\n  // console.log(this.props.mode);\r\n  const mode = this.setGeneralMode(this.props.mode);\r\n  switch (mode) {\r\n    case AppMode.SURVEY_MANAGEMENT || AppMode.SURVEY_MANAGEMENT_CREATE || AppMode.SURVEY_MANAGEMENT_RESPONSES  || AppMode.SURVEY_MANAGEMENT_SEARCH:\r\n      return(\r\n        <div>\r\n        <a className=\"sidemenu-item\" onClick={(e) => { \r\n          e.preventDefault();\r\n          this.props.changeMode(AppMode.SURVEY_MANAGEMENT);\r\n          }}>\r\n            <span className=\"fa fa-bolt\"></span>&nbsp;Active Questions</a>\r\n        <a className=\"sidemenu-item \" onClick={(e) => { \r\n          e.preventDefault();\r\n          this.props.changeMode(AppMode.SURVEY_MANAGEMENT_SEARCH);\r\n          }}>\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Questions</a>\r\n        <a className=\"sidemenu-item \" onClick={(e) => { \r\n          e.preventDefault();\r\n          this.props.changeMode(AppMode.SURVEY_MANAGEMENT_CREATE);\r\n          }}>\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Create Questions</a>\r\n        <a className=\"sidemenu-item \" onClick={(e) => { \r\n          e.preventDefault();\r\n          this.props.changeMode(AppMode.SURVEY_MANAGEMENT_RESPONSES);\r\n          }}>\r\n            <span className=\"fa fa-folder-open\"></span>&nbsp;Responses</a>           \r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.ROUNDS:\r\n      return(\r\n        <div>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Log New Round</a>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Rounds</a>\r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.COURSES:\r\n      return(\r\n        <div>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Add a Course</a>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Courses</a>\r\n        </div>\r\n      );\r\n    default:\r\n        return null;\r\n    }\r\n}\r\n\r\n    render() {\r\n       return (\r\n        <div className={\"sidemenu \" + (this.props.menuOpen ? \"sidemenu-open\" : \"sidemenu-closed\")}\r\n             onClick={this.props.toggleMenuOpen}>\r\n          {/* SIDE MENU TITLE */}\r\n          <div className=\"sidemenu-title\">\r\n            <img src={this.props.profilePicURL} height='60' width='60' />\r\n            <span id=\"userID\" className=\"sidemenu-userID\">&nbsp;{this.props.displayName}</span>\r\n        </div>\r\n          {/* MENU CONTENT */}\r\n          {this.renderModeMenuItems()}\r\n          {/* The following menu items are present regardless of mode */}\r\n          {this.props.localAccount ? \r\n            <a id=\"accountBtn\" className=\"sidemenu-item\" onClick={this.props.editAccount}>\r\n              <span className=\"fa fa-user\"></span>&nbsp;Account</a> : null}\r\n          <a id=\"aboutBtn\" className=\"sidemenu-item\" onClick={this.props.showAbout}>\r\n            <span className=\"fa fa-info-circle\"></span>&nbsp;About</a>\r\n          <a id=\"logOutBtn\" className=\"sidemenu-item\" onClick={this.props.logOut}>\r\n            <span className=\"fa fa-sign-out-alt\"></span>&nbsp;Log Out</a>\r\n        </div>\r\n       );\r\n    }\r\n}\r\n\r\nexport default SideMenu;\r\n","import React from 'react';\r\nimport AppMode from '../AppMode.js';\r\n\r\n\r\nclass ModeBar extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className={\"modebar\" + (this.props.mode === AppMode.LOGIN ? \r\n          \" invisible\" : (this.props.menuOpen ? \" ignore-click visible\" : \" visible\"))}>\r\n        <a className={(this.props.mode === AppMode.SURVEY_MANAGEMENT ? \" item-selected\" : null)}\r\n            onClick={()=>this.props.changeMode(AppMode.SURVEY_MANAGEMENT)}>\r\n          <span className=\"modebaricon fa fa-th-list\"></span>\r\n          <span className=\"modebar-text\">Survey Management</span>\r\n        </a>\r\n        <a className={(this.props.mode === AppMode.ROUNDS || \r\n               this.props.mode === AppMode.ROUNDS_EDITROUND || \r\n               this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                  \" item-selected\" : null)}\r\n           onClick={()=>this.props.changeMode(AppMode.ROUNDS)}>\r\n          <span className=\"modebar-icon  fa fa-history\"></span>\r\n          <span className=\"modebar-text\">Dashboard</span>\r\n        </a>\r\n        <a className={(this.props.mode === AppMode.COURSES ? \" item-selected\" : null)}\r\n          onClick={()=>this.props.changeMode(AppMode.COURSES)}>\r\n          <span className=\"modebar-icon  fa fa-flag\"></span>\r\n          <span className=\"modebar-text\">Courses</span>\r\n        </a> \r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default ModeBar;\r\n","import React from 'react';\r\n\r\nclass ConfirmDeleteAccount extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.emailRef = React.createRef();\r\n        this.state = {emailMatches: false};\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.emailRef.current.focus();\r\n    }\r\n\r\n    handleChange = () => {\r\n        const match = (this.emailRef.current.value === this.props.email);\r\n        if (match != this.state.emailMatches) {\r\n            this.setState({emailMatches: match});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <center>\r\n                <h3 className=\"modal-title\"><b>Confirm Account Deletion</b></h3>\r\n              </center>\r\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\r\n                 &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p>Do you really want to delete your account? <br />\r\n                 <i>This action cannot be undone.</i></p>\r\n              <label>\r\n                Confirm Email ({this.props.email}):\r\n                <br/>\r\n                <input \r\n                    className=\"form-center\"\r\n                    type=\"text\"\r\n                    ref={this.emailRef}\r\n                    onChange={this.handleChange} />\r\n                </label>\r\n                <br />\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteAccount} disabled={!this.state.emailMatches}>\r\n                  Yes, Delete My Account</button>\r\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\r\n                  No, Cancel</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmDeleteAccount;","import React from 'react';\r\nimport ConfirmDeleteAccount from './ConfirmDeleteAccount.js';\r\nimport confirmDeleteAccount from './ConfirmDeleteAccount.js';\r\n\r\nclass CreateEditAccountDialog extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.origAccountInfo = null;\r\n        //Create a ref for the email input DOM element\r\n        this.newUserRef = React.createRef();\r\n        this.repeatPassRef = React.createRef();\r\n        this.profilePicRef = React.createRef();\r\n        this.state = {accountName: \"\",\r\n                      displayName: \"\",\r\n                      userType: \"\",\r\n                      profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                      password: \"\",\r\n                      passwordRepeat: \"\",\r\n                      securityQuestion: \"\",\r\n                      securityAnswer: \"\",\r\n                      formUpdated: false,\r\n                      confirmDelete: false};\r\n    } \r\n\r\n    //componentDidMount -- If we are editing an existing user acccount, we need to grab the data from\r\n    //the database and push them into the state.\r\n    async componentDidMount() {\r\n        if (!this.props.create) {\r\n            //obtain current user data from database and push into state\r\n            const url = \"/users/\" + this.props.userId;\r\n            const res = await fetch(url);\r\n            const json = await res.json();\r\n            const userData = JSON.parse(json);\r\n            this.origAccountInfo = userData; //This determines whether update can occur\r\n            this.origAccountInfo.passwordRepeat = userData.password;\r\n            this.setState({accountName: this.props.userId,\r\n                           displayName: userData.displayName,\r\n                           userType: userData.userType,\r\n                           profilePicURL: userData.profilePicURL,\r\n                           password: userData.password,\r\n                           passwordRepeat: userData.password,\r\n                           securityQuestion: userData.securityQuestion,\r\n                           securityAnswer: userData.securityAnswer});\r\n        }\r\n    }\r\n\r\n    //checkDataValidity -- Callback function invoked after a form element in\r\n    //the 'Create Account' dialog box changes and component state has been\r\n    //updated. We first check whether the passwords match. If they do not, \r\n    //we set a custom validity message to be displayed when the user clicks the\r\n    //'Create Account' button. Otherwise, we reset the custom validity message\r\n    //to empty so that it will NOT fire when the user clicks 'Create Account'.\r\n    //Second, we check whether anything in the form changed from the original.\r\n    //If so, we update the 'formUpdated' state var, so that the form's submit\r\n    //button is enabled.\r\n    checkDataValidity = () => {\r\n        if(!this.state.accountName.endsWith(\"@wsu.edu\")){\r\n            this.newUserRef.current.setCustomValidity(\"Email needs to be a wsu email: @wsu.edu\");\r\n        }\r\n        else{\r\n            this.newUserRef.current.setCustomValidity(\"\");\r\n        }\r\n\r\n        if (this.state.password != this.state.passwordRepeat) {\r\n            //Passwords don't match\r\n            this.repeatPassRef.current.setCustomValidity(\r\n            \"This password must match password entered in previous field.\");\r\n        } else {\r\n            this.repeatPassRef.current.setCustomValidity(\"\");\r\n        }\r\n    }\r\n\r\n    //handleChange--Called when a field in a dialog box form changes.\r\n    handleChange = (event) => {\r\n        const formUpdated = (this.origAccountInfo == null ? true : this.formIsUpdated(event.target.name,event.target.value));\r\n        if (event.target.name === \"profilePic\") {\r\n            if (event.target.value.length == 0) { //The user canceled the file selection -- set back to default\r\n                this.setState({profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                               formUpdated: formUpdated},\r\n                               this.checkDataValidity);\r\n            } else { //The user selected a file\r\n                const self = this;\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(this.profilePicRef.current.files[0]);\r\n                reader.addEventListener(\"load\",function() {\r\n                    self.setState({profilePicURL:  this.result,\r\n                                   formUpdated: formUpdated},this.checkDataValidity);\r\n                });\r\n                \r\n            }\r\n        } else {\r\n            this.setState({[event.target.name]: event.target.value,\r\n                           formUpdated: formUpdated},this.checkDataValidity);\r\n        }\r\n    } \r\n\r\n    //formisUpdated-- Checks whether any form data element has changed from the original. If so, \r\n    //returns true. Returns false otherwise. Note that in case of editing new account, always returns\r\n    //true since this.origAccountInfo is set to null.\r\n    //Should be called whenever the user makes a change to form data.\r\n    formIsUpdated = (updateField,updateVal) => {\r\n        if (this.origAccountInfo[updateField] != updateVal) {return true;}\r\n        if (updateField != \"displayName\" && \r\n             this.state.displayName != this.origAccountInfo.displayName) \r\n             {return true;}\r\n        if (updateField != \"userType\" && \r\n             this.state.userType != this.origAccountInfo.userType) \r\n             {return true;}\r\n        if (updateField != \"profilePicURL\" && \r\n             this.state.profilePicURL != this.origAccountInfo.profilePicURL) \r\n             {return true;}\r\n        if (updateField != \"password\" &&\r\n            this.state.password !== this.origAccountInfo.password)\r\n            {return true;}\r\n        if (updateField != \"passwordRepeat\" &&\r\n            this.state.passwordRepeat !== this.origAccountInfo.passwordRepeat)\r\n            {return true;}\r\n        if (updateField != \"securityQuestion\" &&\r\n            this.state.securityQuestion !== this.origAccountInfo.securityQuestion)\r\n            {return true;}\r\n        if (updateField != \"securityAnswer\" &&\r\n            this.state.securityAnswer !== this.origAccountInfo.securityAnswer)\r\n            {return true;}\r\n        return false;\r\n    }\r\n\r\n    //setDefaultuserType -- Triggered by onBlur() event of Email field.\r\n    //Sets default value of display name to value entered into Email field \r\n    //as a courtesy.\r\n    setDefaultuserType = (event) => {\r\n        this.setState({userType: event.target.value});\r\n        this.setState({displayName: event.target.value});\r\n    }\r\n\r\n    //handleSubmit -- Triggered when user clicks on submit button to\r\n    //either create or edit account.\r\n    //Custom data checking ensures user account under this email does not \r\n    //already exist and that the rest of the info is valid. We create a new  \r\n    // object for user, save it to localStorage and take user to app's \r\n    //landing page. \r\n    handleSubmit = async(event) => {\r\n        event.preventDefault();\r\n        //Initialize user account\r\n        let userData = {\r\n            displayName: this.state.displayName,\r\n            userType: this.state.userType,\r\n            password: this.state.password,\r\n            profilePicURL: this.state.profilePicURL,\r\n            securityQuestion: this.state.securityQuestion,\r\n            securityAnswer: this.state.securityAnswer\r\n        };\r\n        const url = '/users/' + this.state.accountName;\r\n        let res;\r\n        if (this.props.create) { //use POST route to create new user account\r\n            res = await fetch(url, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                    },\r\n                method: 'POST',\r\n                body: JSON.stringify(userData)}); \r\n            if (res.status == 200) { //successful account creation!\r\n                this.props.done(\"New account created! Enter credentials to log in.\",false);\r\n            } else { //Unsuccessful account creation\r\n                //Grab textual error message\r\n                const resText = await res.text();\r\n                this.props.done(resText,false);\r\n            }\r\n        } else { //use PUT route to update existing user account\r\n            res = await fetch(url, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                    },\r\n                method: 'PUT',\r\n                body: JSON.stringify(userData)}); \r\n            if (res.status == 200) { //successful account creation!\r\n                this.props.done(\"User Account Updated!\",false);\r\n            } else { //Unsuccessful account update\r\n                //Grab textual error message\r\n                const resText = await res.text();\r\n                this.props.done(resText,false);\r\n            }\r\n        }\r\n    }\r\n\r\n    //deleteAccount -- Called after confirms account deletion. \r\n    //Uses DELETE server route to perform server deletion. \r\n    //Calls on done with status message and\r\n    //true if delete was succesful, false otherwise.\r\n    deleteAccount = async() => {\r\n       const url = '/users/' + this.state.accountName;\r\n       const res = await fetch(url, \r\n                    {method: 'DELETE'}); \r\n        if (res.status == 200) { //successful account deletion!\r\n            this.props.done(\"Account '\" + this.state.accountName + \"' has been deleted.\",true);\r\n        } else { //Unsuccessful account deletion\r\n            //Grab textual error message\r\n            const resText = await res.text();\r\n            this.props.done(resText,false);\r\n        }\r\n        this.setState({confirmDelete: false});\r\n    }\r\n\r\n    //confirmDeleteAccount -- Called when user clicks on \"Delete Account...\"\r\n    //button to indicate intention to delete account. Presents the Confirm\r\n    //Delete dialog box.\r\n    confirmDeleteAccount = (e) => {\r\n        e.preventDefault();\r\n        this.setState({confirmDelete: true});\r\n    }\r\n\r\n    render() {\r\n    return (  \r\n    <div className=\"modal\" role=\"dialog\">\r\n    <div className=\"modal-dialog modal-lg\"></div>\r\n        <div className=\"modal-content form-center\">\r\n            <div className=\"modal-header\">\r\n              <h3><b>{this.props.create ? \"Create New Account\" : \"Edit Account\"}</b></h3>\r\n              <button className=\"modal-close\" \r\n                       onClick={this.props.cancel}>\r\n                &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n            <form onSubmit={this.handleSubmit}>\r\n            <label>\r\n                Email: \r\n                <input  \r\n                autocomplete=\"off\"\r\n                disabled={!this.props.create}\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountName\"\r\n                type=\"email\"\r\n                size=\"35\"\r\n                placeholder=\"Enter Email Address\"\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                required={true}\r\n                ref={this.newUserRef}\r\n                value={this.state.accountName}\r\n                onChange={this.handleChange}\r\n                onBlur={this.setDefaultuserType}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Password:\r\n                <input\r\n                autocomplete=\"off\"\r\n                className=\"form-control form-text form-center\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                size=\"35\"\r\n                placeholder=\"Enter Password\"\r\n                pattern=\r\n                \"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                required={true}\r\n                value={this.state.password}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Repeat Password:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"passwordRepeat\"\r\n                type=\"password\"\r\n                size=\"35\"\r\n                placeholder=\"Repeat Password\"\r\n                required={true}\r\n                ref={this.repeatPassRef}\r\n                value={this.state.passwordRepeat}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Display Name:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"displayName\"\r\n                type=\"text\"\r\n                size=\"30\"\r\n                placeholder=\"Display Name\"\r\n                required={true}\r\n                value={this.state.displayName}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Account Type:\r\n                <select name=\"userType\" value={this.state.userType} \r\n                className=\"form-control form-center\" onChange={this.handleChange}>\r\n                <option value=\"SelectOne\">Select One</option>\r\n                <option value=\"Student\">Student</option>\r\n                <option value=\"Instructor\">Instructor</option>\r\n                </select> \r\n                </label>\r\n            <br/>\r\n            <label>\r\n                Profile Picture:<br/>\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"profilePic\"\r\n                type=\"file\"\r\n                accept=\"image/x-png,image/gif,image/jpeg\" \r\n                ref={this.profilePicRef}\r\n                value={this.state.profilePic}\r\n                onChange={this.handleChange}\r\n                />\r\n                <img src={this.state.profilePicURL != \"\" ? \r\n                            this.state.profilePicURL :\r\n                            this.state.profilePicDataURL} \r\n                        height=\"60\" width=\"60\" \r\n                 />\r\n            </label> \r\n            <br/>\r\n            <label>\r\n                Security Question:\r\n                <textarea\r\n                className=\"form-control form-text form-center\"\r\n                name=\"securityQuestion\"\r\n                size=\"35\"\r\n                placeholder=\"Security Question\"\r\n                rows=\"2\"\r\n                cols=\"35\"\r\n                maxLength=\"100\"\r\n                required={true}\r\n                value={this.state.securityQuestion}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Answer to Security Question:\r\n                <textarea\r\n                className=\"form-control form-text form-center\"\r\n                name=\"securityAnswer\"\r\n                type=\"text\"\r\n                placeholder=\"Answer\"\r\n                rows=\"2\"\r\n                cols=\"35\"\r\n                maxLength=\"100\"\r\n                required={true}\r\n                value={this.state.securityAnswer}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            {!this.props.create ?  \r\n            <button className=\"btn btn-small btn-danger\" onClick={this.confirmDeleteAccount}>\r\n                Delete Account...\r\n            </button> : null}\r\n            <br/><br/>\r\n            <button role=\"submit\" \r\n                disabled={!this.state.formUpdated}\r\n                className=\"btn btn-primary btn-color-theme modal-submit-btn\">\r\n                <span className={this.props.create ? \"fa fa-user-plus\" : \"fa fa-user\"}></span>\r\n                &nbsp;{this.props.create ? \"Create Account\" : \"Update Account\"}\r\n            </button>\r\n            </form>\r\n            </div>\r\n        </div>\r\n        {this.state.confirmDelete ? \r\n          <ConfirmDeleteAccount email={this.state.accountName}\r\n                                deleteAccount={this.deleteAccount}\r\n                                close={() => (this.setState({confirmDelete: false}))}\r\n         /> : null}\r\n    </div>\r\n    );\r\n}\r\n}\r\n\r\nexport default CreateEditAccountDialog;","import React from 'react'\r\n\r\nclass ResetPasswordDialog extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.resetPasswordRef = React.createRef();\r\n        this.resetPasswordRepeatRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //handleSubmit -- When the user submits the form, ensure that the passwords match.\r\n    //If so, call on resetPassword in parent component to actually reset the password.\r\n    //Otherwise, display an error message prompting the user to try again.\r\n    handleSubmit= (event) => {\r\n        event.preventDefault();\r\n        if (this.resetPasswordRef.current.value === this.resetPasswordRepeatRef.current.value) {\r\n            this.props.resetPassword(this.resetPasswordRef.current.value);\r\n        } else {\r\n            this.resetPasswordRepeatRef.current.focus();\r\n            this.setState({errorMsg: \"The passwords you entered do not match. Please try again.\"});\r\n        }\r\n    }\r\n\r\n    checkForSubmit = (e) => {\r\n        if (e.code === \"Enter\") {\r\n            e.preventDefault();\r\n            this.handleSubmit();\r\n        }\r\n    }\r\n\r\n    // modified the modal-title inside the header so that the text can be centered in the modal\r\n    // this required using col-12 and text-center since messing with the CSS was not working\r\n    // I also included new paragraph tags between the labels and buttons to create a cleaner layout\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"col-12 modal-title text-center\"><b>Reset Password</b>\r\n                    </h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={this.props.cancelResetPassword}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \r\n                    <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        New Password: \r\n                        <input\r\n                        type=\"password\"\r\n                        placeholder=\"Enter new password\"\r\n                pattern=\"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                        className=\"form-control form-text\"\r\n                        ref={this.resetPasswordRef}\r\n                        />\r\n                    </label>\r\n                    <p></p>\r\n                    <label>\r\n                        Repeat New Password: \r\n                        <input\r\n                        type=\"password\"\r\n                        placeholder=\"Repeat new password\"\r\n                        className=\"form-control form-text\"\r\n                        onKeyUp={this.checkForSubmit}\r\n                        ref={this.resetPasswordRepeatRef}\r\n                        />\r\n                    </label>\r\n                    <p></p>\r\n                    <button role=\"submit\" \r\n                     className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-key\"></span>&nbsp;Reset Password\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          );\r\n        \r\n    }\r\n}\r\n\r\nexport default ResetPasswordDialog;","import React from 'react';\r\nimport AppMode from '../AppMode.js';\r\n\r\nclass LookUpAccountDialog extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.emailRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //handleLookUpAccount: When the user clicks on the \"Look Up Account\" dialog box\r\n    //button, we check whether the account exists. If it does, we update the state,\r\n    //setting the resetEmail var to the email entered, hiding the current dialog box\r\n    //and showing the security question dialog box.\r\n    handleLookUpAccount = async(event) => {\r\n        event.preventDefault();\r\n        let response = await fetch(\"/users/\" + this.emailRef.current.value);\r\n        if (response.status == 200) {\r\n            const json = await response.json();\r\n            const obj = JSON.parse(json);\r\n            if (obj.authStrategy === \"local\") {\r\n                this.props.getSecurityAnswer(obj.id,obj.securityQuestion, obj.securityAnswer);\r\n            } else { //Account exists but was created through OAuth so password can't be reset \r\n                this.setState({ErrMsg: \"That account is authenticated through \" + obj.authStrategy + \". \" +\r\n                               \"Please log in to \" + obj.authStrategy + \" to reset the password.\"});\r\n            }\r\n        } else {\r\n            this.setState({errorMsg: \"Sorry, there is no account associated with '\" + this.emailRef.current.value + \"'.\"});\r\n        }\r\n    }\r\n\r\n    // modified the modal-title inside the header so that the text can be centered in the modal\r\n    // this required using col-12 and text-center since messing with the CSS was not working\r\n    // I also included new paragraph tags between the labels and buttons to create a cleaner layout\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"col-12 modal-title text-center\"><b>Look Up Account</b></h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={() => {this.props.cancelResetPassword()}}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null}\r\n                    <form onSubmit={this.handleLookUpAccount}>\r\n                    <label>\r\n                        Account Email Address: \r\n                        <input\r\n                        ref={this.emailRef}\r\n                        className=\"form-control form-text\"\r\n                        type=\"email\"\r\n                        size=\"35\"\r\n                        placeholder=\"Enter Email Address\"\r\n                        pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                        ref={this.emailRef}\r\n                        required={true}\r\n                        />\r\n                    </label>\r\n                    <p></p>\r\n                    <button type=\"submit\" \r\n                        className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-search\"></span>&nbsp;Look Up Account\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>  \r\n        );   \r\n    }\r\n\r\n}\r\n\r\nexport default LookUpAccountDialog;\r\n","import React from 'react';\r\n\r\nclass SecurityQuestionDialog extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.securityAnswerRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //Focus cursor in email secrity answer field when mounted\r\n    componentDidMount() {\r\n        this.securityAnswerRef.current.focus();\r\n    }  \r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (this.securityAnswerRef.current.value === this.props.answer) {\r\n            this.props.getNewPassword();\r\n        } else {\r\n            this.securityAnswerRef.current.focus();\r\n            this.setState({errorMsg: \"Sorry, that is not the correct answer to the security question. Try again.\"});\r\n        }\r\n    }\r\n\r\n    // modified the modal-title inside the header so that the text can be centered in the modal\r\n    // this required using col-12 and text-center since messing with the CSS was not working\r\n    // I also included new paragraph tags between the labels and buttons to create a cleaner layout\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"col-12 modal-title text-center\"><b>Answer Security Question</b>\r\n                    </h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={this.props.cancelResetPassword}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \r\n                    <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Security Question: \r\n                        <textarea\r\n                        readOnly={true}\r\n                        value={this.props.question}\r\n                        className=\"form-control form-text\"\r\n                        rows=\"3\"\r\n                        cols=\"35\"\r\n                        />\r\n                    </label>\r\n                    <p></p>\r\n                    <label>\r\n                        Security Answer: \r\n                        <textarea\r\n                        className=\"form-control form-text\"\r\n                        placeholder=\"Enter Security Question Answer\"\r\n                        ref={this.securityAnswerRef}\r\n                        rows=\"3\"\r\n                        cols=\"35\"\r\n                        />\r\n                    </label>\r\n                    <p></p>\r\n                    <button role=\"submit\" \r\n                      className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-check\"></span>&nbsp;Verify Answer\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          );        \r\n    }\r\n}\r\n export default SecurityQuestionDialog;","import React from 'react';\r\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js';\r\nimport ResetPasswordDialog from './ResetPasswordDialog.js';\r\nimport LookUpAccountDialog from './LookUpAccountDialog.js';\r\nimport SecurityQuestionDialog from './SecurityQuestionDialog.js';\r\nimport AppMode from '../AppMode.js';\r\n\r\nclass LoginPage extends React.Component {\r\n\r\nconstructor() {\r\n    super();\r\n    //Create a ref for the email input DOM element\r\n    this.emailInputRef = React.createRef();\r\n    this.resetUserId = \"\";\r\n    this.resetQ = \"\";\r\n    this.resetA = \"\";\r\n    this.passwordInputRef = React.createRef();\r\n    this.state = {statusMsg: \"\",\r\n                  loginBtnIcon: \"fa fa-sign-in\",\r\n                  loginBtnLabel: \"Log In\",\r\n                  showLookUpAccountDialog: false,\r\n                  showSecurityQuestionDialog: false,\r\n                  showResetPaswordDialog: false,\r\n                  githubIcon: \"fa fa-github\",\r\n                  githubLabel: \"Sign in with GitHub\",\r\n                  loginMsg: \"\",\r\n                  newAccountCreated: false\r\n                  };\r\n} \r\n    \r\n//Focus cursor in email input field when mounted\r\ncomponentDidMount() {\r\n    this.emailInputRef.current.focus();\r\n}  \r\n\r\n//handleLoginSubmit -- Called when user clicks on login button.\r\nhandleLoginSubmit = async (event) => {\r\n    event.preventDefault();\r\n    this.setState({loginBtnIcon: \"fa fa-spin fa-spinner\",\r\n                   loginBtnLabel: \"Logging In...\"});\r\n    const url = \"auth/login?username=\" + this.emailInputRef.current.value +\r\n                \"&password=\" + this.passwordInputRef.current.value;\r\n    const res = await fetch(url, {method: 'POST'}); \r\n    if (res.status == 200) { //successful login!\r\n        window.open(\"/\",\"_self\");\r\n    } else { //Unsuccessful login\r\n      const resText = await res.text();\r\n      this.setState({loginBtnIcon: \"fa fa-sign-in\",\r\n                     loginBtnLabel: \"Log In\",\r\n                     statusMsg: resText});\r\n    }\r\n}\r\n\r\n  //accountCreateDone -- Called by child CreateAccountDialog component when \r\n  //user attempted to create new account. Hide the dialog and display \r\n  //a message indicating result of the attempt.\r\n  accountCreateDone = (msg) => {\r\n      this.setState({statusMsg: msg,\r\n                     showCreateAccountDialog: false});\r\n  }\r\n\r\n  //cancelCreateAccount -- Called by child CreateAccountDialog componenet when user decides\r\n  //to cancel creation of new account by clicking the \"X\" in top-right of dialog.\r\n  cancelCreateAccount = () => {\r\n      this.setState({showCreateAccountDialog: false});\r\n  }\r\n\r\n//cancelResetPassword -- Called by one of the child three child dialog box components when\r\n//the user decides to cancel resetting their password. Toggles state so that all three\r\n//of the dialog boxes are hidden\r\ncancelResetPassword = () => {\r\n    this.resetUserId = \"\";\r\n    this.resetQ = \"\";\r\n    this.resetA = \"\";\r\n    this.setState({showLookUpAccountDialog: false,\r\n                   showSecurityQuestionDialog: false,\r\n                   showResetPaswordDialog: false});             \r\n}\r\n\r\n//handleOAuthLogin -- Callback function that initiates contact with OAuth\r\n//provider\r\nhandleOAuthLogin = (provider) => {\r\n    window.open(`/auth/${provider}`,\"_self\");\r\n}\r\n\r\n//handleOAuthLoginClick -- Called whent the user clicks on button to\r\n//authenticate via a third-party OAuth service. The name of the provider is\r\n//passed in as a parameter.\r\nhandleOAuthLoginClick = (provider) => {\r\n   this.setState({[provider + \"Icon\"] : \"fa fa-spin fa-spinner\",\r\n                  [provider + \"Label\"] : \"Connecting...\"});\r\n   setTimeout(() => this.handleOAuthLogin(provider),1000);\r\n}\r\n\r\n//getSecurityAnswer: Given the id, security question, and security answer obtained\r\n//from the LookUpAccountDialog component, update state such that the user will\r\n//next be prompted to enter security question and answer for verification\r\ngetSecurityAnswer = (userId, question, answer) => {\r\n    this.resetUserId = userId;\r\n    this.resetQ = question;\r\n    this.resetA = answer;\r\n    this.setState({showLookUpAccountDialog: false,\r\n                   showSecurityQuestionDialog: true\r\n                });\r\n}\r\n\r\n//getNewPassword-- Called after user successfully provides correct answer\r\n//to security question. Presents the \"Reset Password\" dialog box.\r\ngetNewPassword = () => {\r\n    this.setState({showSecurityQuestionDialog: false,\r\n                    showResetPaswordDialog: true});\r\n}\r\n\r\n//resetPassword--Called after the user successfully enters a new (acceptable)\r\n//password. pw contains the new password. Call on the Update (PUT) server\r\n//route to update the user's password in the database.\r\nresetPassword = async(pw) => {\r\n    const url = \"/users/\" + this.resetUserId;\r\n    const res = await fetch(url, {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n            },\r\n        method: 'PUT',\r\n        body: JSON.stringify({password: pw})}); \r\n    if (res.status == 200) { //successful update creation!\r\n        this.setState({showResetPaswordDialog: false,\r\n                       statusMsg: \"Password successfully reset!\"});\r\n    } else { //Unsuccessful account creation\r\n        //Grab textual error message\r\n        const resText = await res.text();\r\n        this.setState({showResetPasswordDialog: false,\r\n                      statusMsg: resText});\r\n    }\r\n    \r\n}\r\n\r\n//newAccountCreated -- Called after successful creation of a new account\r\naccountCreateDone = (msg,deleted) => {\r\n    this.setState({statusMsg: msg,\r\n                   showCreateAccountDialog: false});\r\n}\r\n\r\n//closeStatusMsg -- Called when user clicks on \"x\" to dismiss status message\r\ncloseStatusMsg = () => {\r\n    this.setState({statusMsg: \"\"});\r\n}\r\n\r\n//cancelCreateAccount -- called to hide Create Account dialog without creating acct\r\ncancelCreateAccount = () => {\r\n    this.setState({showCreateAccountDialog: false});\r\n}\r\n\r\n  render() {\r\n    return(\r\n        <div>\r\n        <center>\r\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.statusMsg}</span>\r\n                       <button className=\"modal-close\" onClick={this.closeStatusMsg}>\r\n                          <span className=\"fa fa-times\"></span>\r\n                        </button></div>: null}\r\n            {this.state.showLookUpAccountDialog ? \r\n              <LookUpAccountDialog cancelResetPassword={this.cancelResetPassword}\r\n                                   getSecurityAnswer={this.getSecurityAnswer}/> : null}\r\n            {this.state.showSecurityQuestionDialog ? \r\n               <SecurityQuestionDialog cancelResetPassword={this.cancelResetPassword}\r\n                                       question={this.resetQ}\r\n                                       answer={this.resetA}\r\n                                       getNewPassword={this.getNewPassword}/> : null}\r\n            {this.state.showResetPaswordDialog ? \r\n              <ResetPasswordDialog cancelResetPassword={this.cancelResetPassword}\r\n                                   resetPassword={this.resetPassword} /> : null}\r\n            <form id=\"loginInterface\" onSubmit={this.handleLoginSubmit}>\r\n            <label htmlFor=\"emailInput\" style={{ padding: 0, fontSize: 24 }}>\r\n                Email:\r\n                <input\r\n                ref={this.emailInputRef}\r\n                className=\"form-control login-text\"\r\n                type=\"email\"\r\n                placeholder=\"Enter Email Address\"\r\n                id=\"emailInput\"\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                required={true}\r\n                />\r\n            </label>\r\n            <p />\r\n            <label htmlFor=\"passwordInput\" style={{ padding: 0, fontSize: 24 }}>\r\n                Password:\r\n                <input\r\n                ref={this.passwordInputRef}\r\n                className=\"form-control login-text\"\r\n                type=\"password\"\r\n                placeholder=\"Enter Password\"\r\n                pattern=\"[A-Za-z0-9!@#$%^&*()_+\\-]+\"\r\n                required={true}\r\n                />\r\n            </label>\r\n            <p className=\"bg-danger\" id=\"feedback\" style={{ fontSize: 16 }} />\r\n            <button\r\n                type=\"submit\"\r\n                className=\"btn-color-theme btn btn-primary btn-block login-btn\">\r\n                <span id=\"login-btn-icon\" className={this.state.loginBtnIcon}/>\r\n                &nbsp;{this.state.loginBtnLabel}\r\n            </button>\r\n            <p>\r\n            <button type=\"button\" className=\"btn btn-link login-link\" \r\n                    onClick={() => {this.setState({showCreateAccountDialog: true});}}>\r\n                Create an account</button> | \r\n                <button type=\"button\" className=\"btn btn-link login-link\"\r\n                        onClick={() => {this.setState({showLookUpAccountDialog: true});}}>\r\n                Reset your password</button>\r\n            </p>  \r\n            {/* <button type=\"button\" className=\"btn btn-github\"\r\n               onClick={() => this.handleOAuthLoginClick(\"github\")}>\r\n              <span className={this.state.githubIcon}></span>&nbsp;\r\n                {this.state.githubLabel}\r\n            </button> */}\r\n            <p>\r\n                <i>Version CptS 489</i>\r\n            </p>\r\n            </form>\r\n            {this.state.showCreateAccountDialog ? \r\n              <CreateEditAccountDialog\r\n                create={true} \r\n                done={this.accountCreateDone}\r\n                cancel={this.cancelCreateAccount} /> : null}\r\n            {this.state.showResetPasswordDialog ? <ResetPasswordDialog /> : null}\r\n        </center>\r\n        </div>\r\n        )\r\n    }\r\n} \r\n\r\nexport default LoginPage;\r\n","import React from 'react';\r\n\r\nclass FileUpload extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n            <center>\r\n              <label>\r\n                File:\r\n                <input name=\"filename\" className=\"form-control form-center\" \r\n                  type=\"file\"/>\r\n              </label>\r\n            <p></p>\r\n            </center>\r\n          </div>            \r\n        );\r\n    }\r\n}\r\n\r\nexport default FileUpload;","import React from 'react';\r\n\r\nclass FreeResponse extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n          answer: \"\"\r\n        }    \r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n            <center>\r\n            <label>Answer:\r\n                <textarea name=\"answer\" className=\"form-control\" rows=\"6\" cols=\"75\" \r\n                placeholder=\"Enter answer here\" value={this.state.answer} \r\n                />\r\n                </label>\r\n            <p></p>\r\n            </center>\r\n          </div>            \r\n        );\r\n    }\r\n}\r\n\r\nexport default FreeResponse;","import React from 'react';\r\n\r\nclass MultipleChoice extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    onAddAnswer = (event) => {\r\n      event.preventDefault();\r\n      console.log(\"Adding another answer\");\r\n    }\r\n\r\n    onRemoveAnswer = (event) => {\r\n      event.preventDefault();\r\n      console.log(\"Remove another answer\");\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div>\r\n            <center>\r\n            <div className=\"mb-3 input-group\" style={{width:\"20%\"}}>\r\n              <div className=\"input-group-prepend\">\r\n                <span className=\"input-group-text\" id=\"basic-addon1\">Answer choice</span>\r\n              </div>\r\n                <input placeholder=\"Input answer...\" aria-label=\"Username\" aria-describedby=\"basic-addon1\" className=\"form-control\"/>\r\n            </div>\r\n              {/* <label>\r\n                Question Title:\r\n                <input name=\"title\" className=\"form-control form-center\" \r\n                  type=\"text\"/>\r\n              </label> */}\r\n            <p></p>\r\n            \r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"col-md-3\" style={{width: \"40%\"}}>\r\n                  <button type=\"button\" style={{fontSize: \"28px\"}} onClick={this.onAddAnswer} \r\n                    className=\"btn btn-primary btn-color-theme\">\r\n                      <span className=\"fa fa-plus\"/>&nbsp;Add Answer\r\n                  </button>\r\n                </div>\r\n                <div className=\"col-md-3\" style={{width: \"40%\"}}>\r\n                  <button  type=\"button\" style={{fontSize: \"28px\"}} onClick={this.onRemoveAnswer} \r\n                    className=\"btn btn-primary btn-color-theme\">\r\n                      <span className=\"fa fa-plus\"/>&nbsp;Remove Answer\r\n                  </button>\r\n                </div>\r\n            </div>            \r\n            <p></p>\r\n            </center>\r\n          </div>            \r\n        );\r\n    }\r\n}\r\n\r\nexport default MultipleChoice;","import React from 'react';\r\nimport FileUpload from './AnswerTypes/FileUpload';\r\nimport FreeResponse from './AnswerTypes/FreeResponse';\r\nimport MultipleChoice from './AnswerTypes/MultipleChoice';\r\n\r\n\r\nconst answerTypes = {};\r\nanswerTypes[\"multipleChoice\"] = MultipleChoice;\r\nanswerTypes[\"shortAnswer\"] = FreeResponse;\r\nanswerTypes[\"fileUpload\"] = FileUpload;\r\n\r\nclass CreateSurvey extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            answerType : \"shortAnswer\",\r\n            question: \"\"\r\n        }     \r\n    }\r\n\r\n    handleChange = (event) => {\r\n        const name = event.target.name; \r\n        this.setState({[name]: event.target.value});\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        console.log(\"Create Question\");\r\n    }\r\n\r\n    render(){\r\n        const AnswerType = answerTypes[this.state.answerType];\r\n        return(\r\n            <form className=\"padded-page\" onSubmit={this.handleSubmit}>\r\n            <center>\r\n              <label>\r\n                Question Title:\r\n                <input name=\"title\" className=\"form-control form-center\" \r\n                  type=\"text\"/>\r\n              </label>\r\n              <p></p>\r\n                <label>Question:\r\n                    <textarea name=\"question\" className=\"form-control\" rows=\"6\" cols=\"75\" \r\n                    placeholder=\"Enter Question here\" value={this.state.question} \r\n                    />\r\n                </label>\r\n            <p></p>\r\n            <p></p>\r\n            <label>Answer Type:\r\n            <select name=\"answerType\" value={this.state.answerType} onChange={this.handleChange} \r\n              className=\"form-control form-center\">\r\n              <option value=\"shortAnswer\">Short Answer</option>\r\n              <option value=\"multipleChoice\">Multiple Choice</option>\r\n              <option value=\"fileUpload\">File Upload</option>\r\n            </select> \r\n            </label>\r\n            <p></p>\r\n            <AnswerType>\r\n\r\n            </AnswerType>\r\n            <p></p>\r\n            <button type=\"submit\" style={{width: \"70%\",fontSize: \"36px\"}} \r\n              className=\"btn btn-primary btn-color-theme\">\r\n                <span className=\"fa fa-plus\"/>&nbsp; Create Question\r\n            </button>\r\n            </center>\r\n          </form>            \r\n        );\r\n    }\r\n}\r\n\r\nexport default CreateSurvey;","import React from 'react';\r\n\r\nclass ActiveQuestions extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <form className=\"padded-page\">\r\n            <center>\r\n                <div class=\"wrapper\">\r\n                    <div className=\"card survey-card\">\r\n                        <div className=\"card-header\">Question 1</div>\r\n                        <div className=\"card-body\">Question Type  <br/>  Content:</div> \r\n                        <div className=\"card-footer\">Course Number  Section</div>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"card survey-card\">\r\n                        <div className=\"card-header\">Question 2</div>\r\n                        <div className=\"card-body\">Question Type  <br/>  Content:</div> \r\n                        <div className=\"card-footer\">Course Number  Section</div>\r\n                    </div>\r\n\r\n                    <div className=\"card survey-card\">\r\n                        <div className=\"card-header\">Question 3</div>\r\n                        <div className=\"card-body\">Question Type  <br/>  Content:</div> \r\n                        <div className=\"card-footer\">Course Number  Section</div>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"card survey-card\">\r\n                        <div className=\"card-header\">Question 4</div>\r\n                        <div className=\"card-body\">Question Type  <br/>  Content:</div> \r\n                        <div className=\"card-footer\">Course Number  Section</div>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"card survey-card\">\r\n                        <div className=\"card-header\">Question 5</div>\r\n                        <div className=\"card-body\">Question Type  <br/>  Content:</div> \r\n                        <div className=\"card-footer\">Course Number  Section</div>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"card survey-card\">\r\n                        <div className=\"card-header\">Question 6</div>\r\n                        <div className=\"card-body\">Question Type  <br/>  Content:</div> \r\n                        <div className=\"card-footer\">Course Number  Section</div>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"card survey-card\">\r\n                        <div className=\"card-header\">Question 7</div>\r\n                        <div className=\"card-body\">Question Type  <br/>  Content:</div> \r\n                        <div className=\"card-footer\">Course Number  Section</div>\r\n                    </div>\r\n                </div>\r\n            </center>\r\n          </form>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default ActiveQuestions;","\r\nimport React from 'react';\r\n\r\nclass DeleteResponseModal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n      }\r\n\r\n    /* \r\n        Name: deleteResponse\r\n        Purpose: OnClick handler to delete the response.\r\n                Calls the delete response in the SubmittedResponse componenet.\r\n    */      \r\n      deleteResponse = (event) => {\r\n        event.preventDefault();\r\n        this.props.deleteResponse({\r\n            \"responseId\" : this.props.responseItem.response.responseId, \r\n            \"questionID\" : this.props.responseItem.question.questionID,\r\n            \"courseID\" : this.props.responseItem.survey.courseID,\r\n            \"surveyID\" : this.props.responseItem.survey.surveyID\r\n        });\r\n        this.props.closeDeleteResponseModal();\r\n      }\r\n\r\n        /* \r\n            Name: closeModal\r\n            Purpose: Close the modal.\r\n        */ \r\n      closeModal = (event) => {\r\n        event.preventDefault();\r\n        this.props.closeDeleteResponseModal();\r\n      }\r\n\r\n    render(){\r\n        return(\r\n        <div className=\"modal\" id=\"exampleModalCenter\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalCenterTitle\" aria-hidden=\"true\">\r\n        <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n            <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n                <h5 className=\"modal-title\" id=\"exampleModalLongTitle\">Delete Response</h5>\r\n                <button type=\"button\" className=\"close\" onClick={this.closeModal} data-dismiss=\"modal\" aria-label=\"Close\">\r\n                <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n                Are you sure you want to delete this response?\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                <button type=\"button\" className=\"btn btn-primary\" onClick={this.closeModal} data-dismiss=\"modal\">Close</button>\r\n                <button type=\"button\" onClick={this.deleteResponse} className=\"btn btn-danger\">Delete</button>\r\n            </div>\r\n            </div>\r\n        </div>\r\n        </div>    \r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default DeleteResponseModal;","import React from 'react';\r\n\r\nclass ViewResponse extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      questions : [],\r\n      allResponses : [],\r\n      showConfirmDelete: false\r\n    };\r\n  }\r\n\r\n /* \r\n    Name: handleAnswers\r\n    Purpose: Display the correct answer depending on the type of answer type.\r\n  */\r\n  handleAnswers = () => {\r\n      if(this.props.responseItem.question.questionAnswers.length == 1){\r\n        if(this.props.responseItem.question.questionType == \"FileUpload\" || this.props.responseItem.question.questionType == \"F\"){\r\n            return (\r\n                <iframe\r\n                    id=\"viewResponse-answer-file\"\r\n                    src={this.props.responseItem.question.questionAnswers[0]}\r\n                > </iframe>\r\n            );\r\n        }\r\n        \r\n        return (\r\n            <div id=\"viewResponse-answer-freeResponse\">\r\n                {this.props.responseItem.question.questionAnswers[0]}\r\n            </div>\r\n        );\r\n      }\r\n\r\n    var answers = this.props.responseItem.question.questionAnswers;\r\n    var elements = [];\r\n    answers.forEach((answer) => {\r\n        elements.push(\r\n            <div>{answer}</div>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div id=\"viewResponse-answer-multipleChoice\">{elements}</div>\r\n    );\r\n  }\r\n\r\n  render(){\r\n    return (\r\n        <div className=\"modal\" itemID=\"exampleModalLong\" tabIndex={-1} role=\"dialog\" aria-labelledby=\"exampleModalLongTitle\" aria-hidden=\"true\">\r\n        <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n            <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n                <h5 className=\"modal-title\" id=\"exampleModalLongTitle\">{this.props.responseItem.survey.surveyTitle}</h5>\r\n                <button type=\"button\" className=\"close\" data-dismiss=\"modal\"  onClick={ () => { this.props.closeResponse();} } aria-label=\"Close\">\r\n                <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"recipient-name\" style={{fontSize:\"22pt\"}} class=\"col-form-label\">Question:</label>\r\n                    <div class=\"form-control\" id=\"viewResponse-question\">{this.props.responseItem.question.questionText}</div>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"recipient-name\" style={{fontSize:\"22pt\"}} class=\"col-form-label\">Response:</label>\r\n                    <div class=\"form-control\" id=\"viewResponse-response\">{this.props.responseItem.response.surveyResponse}</div>\r\n                </div>       \r\n            </div>\r\n            <div className=\"modal-body\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"recipient-name\" style={{fontSize:\"22pt\"}} class=\"col-form-label\">Answer(s):</label>\r\n                    <div class=\"form-control\" id=\"viewResponse-answer\">{this.handleAnswers()}</div>\r\n                </div>       \r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                <button type=\"button\" className=\"btn btn-secondary\" onClick={ () => { this.props.closeResponse();}} data-dismiss=\"modal\">Close</button>\r\n                {/* <button type=\"button\" className=\"btn btn-primary\">Save changes</button> */}\r\n            </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    );\r\n  }\r\n\r\n}\r\nexport default ViewResponse;\r\n","import React from 'react';\r\nimport { async } from 'regenerator-runtime';\r\nimport DeleteResponseModal from './DeleteResponseModal';\r\nimport ViewResponse from './viewResponseModal';\r\n\r\n\r\nclass SubmittedResponse extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      questions : this.props.questions,\r\n      responses : this.props.responses,\r\n      showResponseModal : false,\r\n      showConfirmDelete: false,\r\n      editRowId: \"\",\r\n      responseItem : {},\r\n      searchKey : \"\",\r\n      showDeleteResponseModal : false,\r\n\r\n      // Sort state variables\r\n      sortResponseInOrder: false,\r\n      sortDateInOrder: false,\r\n      sortQuestionInOrder: false,\r\n      sortResponseTypeInOrder: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n  }\r\n\r\n  // TO DO Delete all RESPONSES BUTTON\r\n\r\n\r\n  //renderResponseTable -- render an HTML table displaying the responses made\r\n  //by the students of all courses for the instructor and providing buttons to view and delete each response.\r\n  renderResponseTable = (allResponses) => {\r\n  let table = [];\r\n  console.log(\"renderResponseTable\");\r\n  console.log(allResponses);\r\n    var index = 0;\r\n    allResponses.forEach((response)=>{\r\n      console.log(\"index\");\r\n      table.push(\r\n        <tr key={response.surveyID+\"-\"+response.question.questionID+\"-\"+response.responseId+\"-\"+index}>\r\n          <td>{response.responseType}</td>\r\n          <td>{response.question.questionText}</td>\r\n          <td>{response.response.responseDateTime}</td>\r\n          <td>{response.response.surveyResponse}</td>\r\n          <td><button onClick={this.props.menuOpen ? null : () => \r\n          this.viewResponse(response.surveyID+\"-\"+response.question.questionID+\"-\"+response.response.responseId+\"-\"+index)}>\r\n              <span className=\"fa fa-eye\"></span></button></td>\r\n          <td><button onClick={this.props.menuOpen ? null : \r\n          () => this.confirmDeleteResponse(response.surveyID+\"-\"+response.question.questionID+\"-\"+response.response.responseId+\"-\"+index)}>\r\n              <span className=\"fa fa-trash\"></span></button></td>\r\n        </tr>\r\n      );\r\n      index++;     \r\n    });\r\n  return table;\r\n  }\r\n\r\n\r\n  /* \r\n    Name: ViewResponse\r\n    Purpose: Views a response from the specific row clicked on\r\n  */\r\n  viewResponse = (rowId) => {\r\n    console.log(\"viewResponse: rowId\");\r\n    console.log(rowId);\r\n\r\n    let responseKeys = this.parseResponseRowId(rowId);    \r\n    var response = this.state.responses.find((response) => {\r\n      if((response.surveyID == responseKeys[0]) && (response.questionID == responseKeys[1]) && \r\n      (response.response.responseId == responseKeys[2])){\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n    \r\n    console.log(\"viewResponse: responseObject\");\r\n    console.log(response);\r\n    this.setState({showResponseModal : true, editRowId: rowId, responseItem : response});\r\n    console.log(\"Viewing a response\");\r\n  }\r\n\r\n  /* \r\n    Name: parseResponseRowId\r\n    Purpose: Parses the row key from the response table and returns an array of keys\r\n    in the form: [surveyID, questionID, responseId, index]\r\n  */\r\n  parseResponseRowId = (id) => {\r\n    let keys = id.split(\"-\");\r\n    return keys;\r\n  }\r\n\r\n  /* \r\n    Name: confirmDeleteResponse\r\n    Purpose: Confirms to delete a response from the database given the response object\r\n  */\r\n  confirmDeleteResponse = (rowId) => {\r\n    console.log(\"confirmDeleteResponse: rowId\");\r\n    console.log(rowId);\r\n\r\n    let responseKeys = this.parseResponseRowId(rowId);    \r\n\r\n    var response = this.state.responses.find((response) => {\r\n      if((response.surveyID == responseKeys[0]) && (response.questionID == responseKeys[1]) && \r\n      (response.response.responseId == responseKeys[2])){\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n    \r\n    console.log(\"confirmDeleteResponse: responseObject\");\r\n    console.log(response);\r\n    this.setState({showDeleteResponseModal : true, editRowId: rowId, responseItem : response});\r\n    console.log(\"Deleting a response\");\r\n  }\r\n\r\n  /* \r\n    Name: deleteResponse\r\n    Purpose: Deletes a response from the database given the response object\r\n  */\r\n  deleteResponse = (body) => {\r\n    if(this.removeResponse(body)){\r\n      this.props.getQuestions();\r\n    }\r\n  }\r\n\r\n  /* \r\n    Name: RemoveResponse\r\n    Purpose: Makes a call to delete the response.\r\n  */\r\n  removeResponse = async (body) => {\r\n    const url = '/responses/'\r\n    const res = await fetch(url, {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n            },\r\n        method: 'DELETE',\r\n        body: JSON.stringify(body)}); \r\n    const msg = await res.text();\r\n    if (res.status == 200) {\r\n      return 1;\r\n    } else {\r\n      console.log(res);\r\n      console.log(msg);\r\n      console.log(\"deleteResponse: ERROR\");\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /* \r\n    Name: SearchResponseTable\r\n    Purpose: Given a search query, it searches for responses/questions that contain that search query.\r\n  */\r\n  searchResponseTable = (event) => {\r\n    if(event.keyCode === 13){\r\n      event.preventDefault();\r\n    \r\n      // Do some reduction to only display the elements that match that searchKey -- Responses ONLY not questions.\r\n      if(this.state.searchKey.length > 0){\r\n        this.onSearch(this.state.searchKey);\r\n      }\r\n      else{\r\n        this.setState({\r\n          responses : this.props.responses\r\n        }); \r\n      }\r\n    }\r\n  }\r\n\r\n  /* \r\n    Name: onSearch\r\n    Purpose: Looks for rows that contain the searchTerm by concatenting the text\r\n              for each column except the view/delete columns\r\n  */\r\n  onSearch = (searchTerm) => {\r\n    var oldResponses = this.props.responses;\r\n    var newResponses = [];\r\n    oldResponses.forEach((response) => {\r\n      var rowString = \"\";\r\n      rowString += response.responseType;\r\n      rowString += response.question.questionText + \" \";\r\n      rowString += response.response.responseDateTime + \" \";\r\n      rowString += response.response.surveyResponse + \" \";\r\n\r\n      if(rowString.toUpperCase().indexOf(searchTerm.toUpperCase()) > -1){\r\n        newResponses.push(response);\r\n      }\r\n    });\r\n\r\n    this.setState({\r\n      responses : newResponses\r\n    }); \r\n  }\r\n\r\n  /* SORT METHODS FOR THE TABLE */\r\n\r\n  /* \r\n    Name: sortTable\r\n    Purpose: Sorts the response object given the compareFunction or the kind of \r\n      sorting we are doing function\r\n  */\r\n  sortTable = (searchCriterionCallBack) =>{\r\n    return this.state.responses.sort(searchCriterionCallBack);\r\n  }\r\n\r\n  /* \r\n    Name: onSearchKeyChange\r\n    Purpose: Updates the searchTerm when it changes\r\n  */\r\n  onSearchKeyChange = (event) => {\r\n    this.setState({searchKey : event.target.value});\r\n  }\r\n\r\n  /* \r\n    Name: sortByDate\r\n    Purpose: Sorts the responses by comparing the date the responses were made\r\n  */\r\n  sortByDate = (event) => {\r\n    event.preventDefault();\r\n\r\n    var newResponses = this.sortTable((valueA, valueB) => {\r\n      if(valueA == null || valueB == null){\r\n        if(valueA == null){\r\n          return this.state.sortDateInOrder ? -1 : 1;\r\n        }\r\n        else if(valueB == null){\r\n          return this.state.sortDateInOrder ? 1 : -1;\r\n        }\r\n      }\r\n\r\n      if (valueA.response.responseDateTime < valueB.response.responseDateTime) {\r\n        return this.state.sortDateInOrder ? -1 : 1;\r\n      }\r\n      if (valueA.response.responseDateTime > valueB.response.responseDateTime) {\r\n        return this.state.sortDateInOrder ? 1 : -1;\r\n      }\r\n      return 0;\r\n    });\r\n    \r\n    this.setState({\r\n      responses : newResponses,\r\n      sortDateInOrder : !this.state.sortDateInOrder\r\n    });\r\n  }\r\n\r\n  /* \r\n    Name: sortByQuestion\r\n    Purpose: Sorts the responses by comparing the question text.[Actual question]\r\n  */  \r\n  sortByQuestion = (event) => {\r\n    event.preventDefault();\r\n\r\n    var newResponses = this.sortTable((valueA, valueB) => {\r\n      if(valueA == null || valueB == null){\r\n        if(valueA == null){\r\n          return this.state.sortQuestionInOrder ? -1 : 1;\r\n        }\r\n        else if(valueB == null){\r\n          return this.state.sortQuestionInOrder ? 1 : -1;\r\n        }\r\n      }\r\n\r\n      if (valueA.question.questionText < valueB.question.questionText) {\r\n        return this.state.sortQuestionInOrder ? -1 : 1;\r\n      }\r\n      if (valueA.question.questionText > valueB.question.questionText) {\r\n        return this.state.sortQuestionInOrder ? 1 : -1;\r\n      }\r\n      return 0;\r\n    });\r\n    \r\n    this.setState({\r\n      responses : newResponses,\r\n      sortQuestionInOrder : !this.state.sortQuestionInOrder\r\n    });\r\n  }\r\n\r\n  /* \r\n    Name: sortByResponseType\r\n    Purpose: Sorts the responses by comparing whether the responses are individual or group.\r\n  */\r\n  sortByResponseType = (event) => {\r\n    event.preventDefault();\r\n\r\n    var newResponses = this.sortTable((valueA, valueB) => {\r\n      if(valueA == null || valueB == null){\r\n        if(valueA == null){\r\n          return this.state.sortResponseTypeInOrder ? -1 : 1;\r\n        }\r\n        else if(valueB == null){\r\n          return this.state.sortResponseTypeInOrder ? 1 : -1;\r\n        }\r\n      }\r\n\r\n      if (valueA.responseType < valueB.responseType) {\r\n        return this.state.sortResponseTypeInOrder ? -1 : 1;\r\n      }\r\n      if (valueA.responseType > valueB.responseType) {\r\n        return this.state.sortResponseTypeInOrder ? 1 : -1;\r\n      }\r\n      return 0;\r\n    });\r\n    \r\n    this.setState({\r\n      responses : newResponses,\r\n      sortResponseTypeInOrder : !this.state.sortResponseTypeInOrder\r\n    });\r\n  }\r\n\r\n  /* \r\n    Name: sortByResponse\r\n    Purpose: Sorts the responses by comparing the responses [Alphabet].\r\n  */  \r\n  sortByResponse = (event) => {\r\n    event.preventDefault();\r\n\r\n    var newResponses = this.sortTable((valueA, valueB) => {\r\n      if(valueA == null || valueB == null){\r\n        if(valueA == null){\r\n          return this.state.sortResponseInOrder ? -1 : 1;\r\n        }\r\n        else if(valueB == null){\r\n          return this.state.sortResponseInOrder ? 1 : -1;\r\n        }\r\n      }\r\n\r\n      if (valueA.response.surveyResponse < valueB.response.surveyResponse) {\r\n        return this.state.sortResponseInOrder ? -1 : 1;\r\n      }\r\n      if (valueA.response.surveyResponse > valueB.response.surveyResponse) {\r\n        return this.state.sortResponseInOrder ? 1 : -1;\r\n      }\r\n      return 0;\r\n    });\r\n    \r\n    this.setState({\r\n      responses : newResponses,\r\n      sortResponseInOrder : !this.state.sortResponseInOrder\r\n    });        \r\n  }\r\n\r\n  //render--render the entire responses table with header, displaying a \"No\r\n  //Responses made\" message in case the table is empty.\r\n  render() {\r\n    return(\r\n    <div className=\"padded-page\">\r\n      <h1></h1>\r\n      <div className=\"input-group center-search\" style={{justifyContent: \"center\", paddingBottom: \"20px\"}}>\r\n             <span className=\"input-group-prepend\">\r\n                 <div className=\"input-group-text bg-transparent border-right-0\">\r\n                   <i className=\"fa fa-search\"></i>\r\n                </div>\r\n             </span>\r\n             <input className=\"form-control py-2 border-left-0 border\" placeholder=\"Search responses\" type=\"search\" value={this.state.searchKey} id=\"searchResponses\"\r\n             onKeyUp={this.searchResponseTable} onChange={this.onSearchKeyChange}/>\r\n      </div>     \r\n      <table className=\"table table-hover\">\r\n        <thead className=\"thead-light\">\r\n        <tr>\r\n          <th><span id=\"responseSortQuestionType\" style={{cursor:\"pointer\"}} className=\"fa fa-sort\" onClick={this.sortByResponseType}></span>&nbsp;Response type </th>\r\n          <th><span id=\"responseSortQuestion\" style={{cursor:\"pointer\"}} className=\"fa fa-sort\" onClick={this.sortByQuestion}></span>&nbsp;Question</th>\r\n          <th><span id=\"responseSortDate\" style={{cursor:\"pointer\"}} className=\"fa fa-sort\" onClick={this.sortByDate}></span>&nbsp;Response Date-Time</th>\r\n          <th><span id=\"responseSortResponse\" style={{cursor:\"pointer\"}} className=\"fa fa-sort\" onClick={this.sortByResponse}></span>&nbsp;Response</th>\r\n          <th>View</th>\r\n          <th>Delete</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n          {Object.keys(this.props.responses).length === 0 ? \r\n          <tr>\r\n          <td colSpan=\"5\" style={{fontStyle: \"italic\"}}>No responses made</td>\r\n          </tr> : this.renderResponseTable(this.state.responses)\r\n          }\r\n        </tbody>\r\n      </table>\r\n      {\r\n        this.state.showResponseModal ?\r\n        <ViewResponse\r\n          closeResponse={() => {this.props.getQuestions(); this.setState({showResponseModal : false})}}\r\n          responseItem={this.state.responseItem}\r\n        >\r\n        </ViewResponse> :\r\n        null\r\n      }\r\n      {this.state.showDeleteResponseModal ?\r\n        <DeleteResponseModal \r\n          closeDeleteResponseModal={() => {this.props.getQuestions(); this.setState({showDeleteResponseModal: false})}}\r\n          responseItem={this.state.responseItem}\r\n          deleteResponse={this.deleteResponse} /> : null\r\n        }\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SubmittedResponse;\r\n","import React from 'react';\r\nimport SearchField from 'react-search-field'\r\n//import ConfirmDeleteRound from './ConfirmDeleteRound.js';\r\n// import AppMode from './../AppMode.js';\r\n\r\nclass SubmittedResponse extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n    onSearchClicked = () => {\r\n        console.log(\"onSearchClicked\");\r\n    }\r\n  //render--render the entire rounds table with header, displaying a \"No\r\n  //Rounds Logged\" message in case the table is empty.\r\n  render() {\r\n    return(\r\n    <div className=\"padded-page\">\r\n      <center>\r\n      <h1></h1>\r\n        \r\n         <div className=\"input-group center-search\" style={{justifyContent: \"center\", paddingBottom: \"20px\"}}>\r\n            <SearchField\r\n              classNames=\"search-width\"\r\n              placeholder=\"Search question\"\r\n              onSearchClick={this.onSearchClicked}\r\n          />\r\n             {/* <span className=\"input-group-prepend\">\r\n                 <div className=\"input-group-text bg-transparent border-right-0\"><i className=\"fa fa-search\"></i></div>\r\n             </span>\r\n             <input className=\"form-control py-2 border-left-0 border\" placeholder=\"Search Rounds\" type=\"search\" value=\"\" id=\"searchRounds\"\r\n             onkeyup=\"searchRoundsTable(this.value)\" onSearch onsearch=\"searchRoundsTable(this.value)\"/> */}\r\n         </div>\r\n      <table className=\"table table-hover\">\r\n        <thead className=\"thead-light\">\r\n        <tr>\r\n          <th>Question Title</th>\r\n          <th>Question</th>\r\n          <th>Answer Type</th>\r\n          <th>View/Edit...</th>\r\n          <th>Delete</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n        </tbody>\r\n      </table>\r\n      </center>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SubmittedResponse;","import React from 'react';\r\nimport CreateSurvey from './SurveyManagement/CreateSurvey.js';\r\nimport ActiveQuestions from './SurveyManagement/ActiveQuestions.js'\r\nimport SubmittedResponse from './SurveyManagement/SubmittedResponse.js'\r\nimport AppMode from './../AppMode.js'\r\nimport SearchQestions from './SurveyManagement/SearchQuestions.js'\r\n\r\nclass SurveyManagementPage extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            questions: [],\r\n            responses: [],\r\n            surveys : []\r\n        };\r\n\r\n        this.getQuestions();\r\n    }\r\n\r\n    /* \r\n        Name: getQuestions\r\n        Purpose: Gets all of the questions, surveys, and responses for the particular instructor.\r\n    */     \r\n    getQuestions = async () => {\r\n\r\n        let response = await fetch(\"/responses/\" + this.props.userObj.id+\"/\"+[\"cpts489Fall2020\"]);\r\n        response = await response.json();\r\n        const obj = JSON.parse(response);    \r\n        console.log(\"GET /responses/\"+ this.props.userObj.id);\r\n        console.log(obj);\r\n    \r\n        var getAllResponses = (questions) => {\r\n            if(questions.length == 0){\r\n              return [];\r\n            }\r\n        \r\n            var responses = [];\r\n            var newquestions = [];\r\n            questions.forEach((survey) => {\r\n              survey.questions.forEach((question) => {\r\n                newquestions.push({\r\n                    questionID: question.questionID,\r\n                    surveyID: survey.surveyID,\r\n                    responses: question.responses,\r\n                    survey: survey,\r\n                    question: question\r\n                  });\r\n                question.responses.forEach((response) => {\r\n                    responses.push({\r\n                      questionID: question.questionID,\r\n                      surveyID: survey.surveyID,\r\n                      response: response,\r\n                      survey: survey,\r\n                      question: question,\r\n                      responseType: response.students.length > 1 ? \"Group\" : \"Individual\"\r\n                    });\r\n                });\r\n              });\r\n            });\r\n            return [responses, newquestions];\r\n          }\r\n\r\n        var data = getAllResponses(obj);\r\n        this.setState({\r\n          surveys : obj,\r\n          questions : data[1],\r\n          responses : data[0]\r\n        });\r\n    }\r\n\r\n    render() {\r\n        switch(this.props.mode) {\r\n            case AppMode.SURVEY_MANAGEMENT:\r\n                return (\r\n                    <>\r\n                    <ActiveQuestions>\r\n                    </ActiveQuestions>\r\n                    </>\r\n                );\r\n            case AppMode.SURVEY_MANAGEMENT_CREATE:\r\n                return (\r\n                    <CreateSurvey>\r\n                    </CreateSurvey>\r\n                );\r\n            case AppMode.SURVEY_MANAGEMENT_SEARCH:\r\n                return (\r\n                    <SearchQestions>\r\n                    </SearchQestions>\r\n                );\r\n            case AppMode.SURVEY_MANAGEMENT_RESPONSES:\r\n                return (\r\n                    <SubmittedResponse\r\n                    userObj={this.props.userObj}\r\n                    getQuestions={this.getQuestions}\r\n                    questions={this.state.questions}\r\n                    responses={this.state.responses}\r\n                    >\r\n                    </SubmittedResponse>\r\n                );\r\n        }\r\n    }   \r\n}\r\n\r\nexport default SurveyManagementPage;\r\n\r\n\r\n/*\r\n    CODE TO HOW HOW TO CALL THE METHODS FOR RESPONSE\r\n\r\nBELOW IS HOW YOU CAN CALL THE GET METHOD FOR responses\r\n        const url = '/responses/' + this.props.userObj.id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'GET',\r\n            body: JSON.stringify({\"courses\": [\"cpts489Fall2020\"]})}); \r\n        const msg = await res.text();\r\n        if (res.status == 200) {\r\n          console.log(\"getQuestions: SUCCESS\");\r\n          console.log(res);\r\n          console.log(msg);\r\n        } else {\r\n          console.log(res);\r\n          console.log(msg);\r\n          console.log(\"getQuestions: ERROR\");\r\n        }\r\n\r\n    \r\nBELOW IS HOW YOU CAN CALL THE CREATE METHOD FOR responses\r\n    var newResponse = {\r\n    \"students\": [\r\n        {\r\n        \"userID\": \"marco.arceo@wsu.edu\",\r\n        \"studentDisplayName\": \"marco.arceo@wsu.edu\"\r\n        }],\r\n    \"responseId\": \"rID55\",\r\n    \"responseDateTime\": \"Wed Nov 12 2020 14:19:12 GMT-0800\",\r\n    \"surveyResponse\": \"Choice 5\"\r\n    }\r\n\r\n    var newData = {\r\n    \"response\" : newResponse,\r\n    \"questionID\": \"questionID1\",\r\n    \"courseID\": \"cpts489Fall2020\",\r\n    \"surveyID\": \"testID\",\r\n    }\r\n    \r\n    \r\n    const url = '/responses/';// + this.props.userObj.id;\r\n    const res = await fetch(url, {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n            },\r\n        method: 'POST',\r\n        body: JSON.stringify(newData)}); \r\n    const msg = await res.text();\r\n    if (res.status == 200) {\r\n        console.log(\"getQuestions: SUCCESS\");\r\n        console.log(res);\r\n        console.log(msg);\r\n    } else {\r\n        console.log(res);\r\n        console.log(msg);\r\n        console.log(\"getQuestions: ERROR\");\r\n    }\r\n*/","import React from 'react';\r\n\r\nclass ConfirmDeleteRound extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <center>\r\n                <h3 className=\"modal-title\"><b>Confirm Round Deletion</b></h3>\r\n              </center>\r\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\r\n                 &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p>Do you really want to delete this round?</p>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteRound}>\r\n                  Yes, Delete</button>\r\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\r\n                  No, Cancel</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmDeleteRound;","import React from 'react';\r\nimport ConfirmDeleteRound from './ConfirmDeleteRound.js';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass RoundsTable extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {showConfirmDelete: false};\r\n  }\r\n\r\n  //editRound -- Triggered when the user clicks the edit button for a given\r\n  //round. The id param is the unique property that identifies the round.\r\n  //Set the state variable representing the id of the round to be edited and\r\n  //then switch to the ROUNDS_EDITROUND mode to allow the user to edit the\r\n  //chosen round.\r\n  editRound = (id) => {\r\n    this.props.setEditId(id);\r\n    this.props.changeMode(AppMode.ROUNDS_EDITROUND);\r\n  }\r\n\r\n  //deleteRound -- Triggered when the user clicks on the \"Yes, Delete\"\r\n  //button in the Confirm Delete dialog box. It executes the deletion and\r\n  //closes the dialog box.\r\n  deleteRound = () => {\r\n    this.props.deleteRound();\r\n    this.setState({showConfirmDelete: false});\r\n  }\r\n\r\n\r\n  //confirmDelete -- Triggered when the user clicks the delete button\r\n  //for a given round. The id paam is the unique property that \r\n  //identifies the round. Set the state variable representing the id\r\n  //of the round to be deleted and then present a dialog box asking\r\n  //the user to confirm the deletion.\r\n  confirmDelete = (id) => {\r\n    this.props.setDeleteId(id);\r\n    this.setState({showConfirmDelete: true});\r\n  }\r\n\r\n\r\n  //renderTable -- render an HTML table displaying the rounds logged\r\n  //by the current user and providing buttons to view/edit and delete each round.\r\n  renderTable = () => {\r\n  let table = [];\r\n  for (let r = 0; r < this.props.rounds.length; ++r) {\r\n    table.push(\r\n      <tr key={r}>\r\n        <td>{this.props.rounds[r].date.substring(0,10)}</td>\r\n        <td>{this.props.rounds[r].course}</td>\r\n        <td>{(Number(this.props.rounds[r].strokes) + \r\n              Number(this.props.rounds[r].minutes)) +\r\n              \":\" + (this.props.rounds[r].seconds < 10 ?  \r\n                \"0\" + this.props.rounds[r].seconds :\r\n                this.props.rounds[r].seconds) + \" (\" + \r\n              this.props.rounds[r].strokes + \r\n              \" in \" + this.props.rounds[r].minutes + \":\" + \r\n              (this.props.rounds[r].seconds < 10 ?  \r\n                \"0\" + this.props.rounds[r].seconds :\r\n                this.props.rounds[r].seconds) + \")\"}\r\n        </td>\r\n        <td><button onClick={this.props.menuOpen ? null : () => \r\n          this.editRound(r)}>\r\n              <span className=\"fa fa-eye\"></span></button></td>\r\n        <td><button onClick={this.props.menuOpen ? null : \r\n          () => this.confirmDelete(r)}>\r\n              <span className=\"fa fa-trash\"></span></button></td>\r\n      </tr> \r\n    );\r\n  }\r\n  return table;\r\n  }\r\n\r\n  //render--render the entire rounds table with header, displaying a \"No\r\n  //Rounds Logged\" message in case the table is empty.\r\n  render() {\r\n    return(\r\n    <div className=\"padded-page\">\r\n      <h1></h1>\r\n      <table className=\"table table-hover\">\r\n        <thead className=\"thead-light\">\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>Course</th>\r\n          <th>Score</th>\r\n          <th>View/Edit...</th>\r\n          <th>Delete</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n          {Object.keys(this.props.rounds).length === 0 ? \r\n          <tr>\r\n          <td colSpan=\"5\" style={{fontStyle: \"italic\"}}>No rounds logged</td>\r\n          </tr> : this.renderTable()\r\n          }\r\n        </tbody>\r\n      </table>\r\n      {this.state.showConfirmDelete ?\r\n        <ConfirmDeleteRound \r\n          close={() => this.setState({showConfirmDelete: false})} \r\n          deleteRound={this.deleteRound} /> : null}\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RoundsTable;\r\n","import React from 'react';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass RoundForm extends React.Component {\r\n  constructor(props) {\r\n  super(props);\r\n  //Create date object for today, taking time zone into consideration\r\n  let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\r\n  //store date as ISO string\r\n  if (this.props.mode === AppMode.ROUNDS_LOGROUND) {\r\n    //If logging a new round, the starting state is a default round with\r\n    //today's date.\r\n    this.state = {date:  today.toISOString().substr(0,10), \r\n                  course: \"\",\r\n                  type: \"practice\",\r\n                  holes: \"18\",\r\n                  strokes: 80,\r\n                  minutes: 50,\r\n                  seconds: \"00\",\r\n                  notes: \"\",\r\n                  faIcon: \"fa fa-save\",\r\n                  btnLabel: \"Save Round Data\"}\r\n  } else {\r\n    //if editing an existing round, the starting state is the round's\r\n    //current data\r\n    let thisRound = {...this.props.startData};\r\n    delete thisRound.id;\r\n    thisRound.faIcon = \"fa fa-edit\";\r\n    thisRound.btnLabel = \"Update Round Data\";\r\n    this.state = thisRound;\r\n  }\r\n}\r\n  \r\n  \r\n    handleChange = (event) => {\r\n        const name = event.target.name;\r\n        if (name === \"seconds\") {\r\n          let newSec = (event.target.value.length < 2 ? \"0\" + \r\n            event.target.value : event.target.value);\r\n          let newSGS = this.computeSGS(this.state.strokes, this.state.minutes, \r\n                                       newSec);\r\n          this.setState({seconds: newSec, SGS: newSGS});\r\n        } else if (name === \"strokes\") {\r\n          let newStrokes = event.target.value;\r\n          let newSGS = this.computeSGS(newStrokes, this.state.minutes, \r\n            this.state.seconds);\r\n          this.setState({strokes: newStrokes, SGS: newSGS});\r\n        } else if (name === \"minutes\") {\r\n            let newMin = event.target.value;\r\n            let newSGS = this.computeSGS(this.state.strokes, newMin, \r\n              this.state.seconds);\r\n            this.setState({minutes: newMin, SGS: newSGS});\r\n        } else {\r\n          this.setState({[name]: event.target.value});\r\n        }\r\n    }\r\n  \r\n  \r\n    //handleSubmit -- When the user clicks on the button to save/update the\r\n    //round, start the spinner and invoke the parent component's saveRound\r\n    //method to do the actual work. Note that saveRound is set to the correct\r\n    //parent method based on whether the user is logging a new round or editing\r\n    //an existing round.\r\n    handleSubmit = (event) => {\r\n        //start spinner\r\n        this.setState({faIcon: \"fa fa-spin fa-spinner\",\r\n                        btnLabel: (this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                                    \"Saving...\" : \"Updating...\")});\r\n        //Prepare current round data to be saved\r\n        let roundData = this.state;\r\n        delete roundData.faIcon;\r\n        delete roundData.btnLabel;\r\n        //call saveRound on 1 second delay to show spinning icon\r\n        setTimeout(this.props.saveRound,1000,roundData); \r\n        event.preventDefault(); \r\n        }\r\n  \r\n\r\n    computeSGS = (strokes, min, sec) => {\r\n      return (Number(strokes) + Number(min)) \r\n                  + \":\" + sec;\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <form className=\"padded-page\" onSubmit={this.handleSubmit}>\r\n          <center>\r\n            <label>\r\n              Date:\r\n              <input name=\"date\" className=\"form-control form-center\" \r\n                type=\"date\" value={this.state.date} onChange={this.handleChange} />\r\n            </label>\r\n            <p></p>\r\n            <label>\r\n              Course:\r\n              <input name=\"course\" className=\"form-control form-center\" type=\"text\"\r\n                value={this.state.course} onChange={this.handleChange}\r\n                placeholder=\"Course played\" size=\"50\" maxLength=\"50\" />\r\n            </label>\r\n          <p></p>\r\n          <label>Type:\r\n          <select name=\"type\" value={this.state.type} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"practice\">Practice</option>\r\n            <option value=\"tournament\">Tournament</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Holes:\r\n          <select name=\"holes\" value={this.state.holes} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"9\">9</option>\r\n            <option value=\"18\">18</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Strokes:\r\n          <input name=\"strokes\" className=\"form-control form-center\" type=\"number\" \r\n            min=\"9\" max=\"200\" value={this.state.strokes} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Time: <br></br>\r\n          <input name=\"minutes\" type=\"number\" size=\"3\"\r\n            min=\"10\" max=\"400\" value={this.state.minutes}\r\n            onChange={this.handleChange} />:  \r\n          <input name=\"seconds\" type=\"number\" size=\"2\"\r\n            min=\"0\" max=\"60\" value={this.state.seconds} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Speedgolf Score: <br></br>\r\n              <input name=\"SGS\" className=\"form-center\" type=\"text\" size=\"6\" \r\n                disabled={true} value={this.computeSGS(this.state.strokes,this.state.minutes,this.state.seconds)} />\r\n          </label>\r\n          <p></p>\r\n          <label>Notes:\r\n              <textarea name=\"notes\" className=\"form-control\" rows=\"6\" cols=\"75\" \r\n                placeholder=\"Enter round notes\" value={this.state.notes} \r\n                onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <p></p>\r\n          <button type=\"submit\" style={{width: \"70%\",fontSize: \"36px\"}} \r\n            className=\"btn btn-primary btn-color-theme\">\r\n              <span className={this.state.faIcon}/>&nbsp;{this.state.btnLabel}\r\n          </button>\r\n          </center>\r\n        </form>\r\n      );\r\n    }\r\n}\r\n\r\nexport default RoundForm;","import React from 'react';\r\n\r\nclass FloatingButton extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className=\"floatbtn\" onClick={this.props.handleClick}>\r\n          <span className=\"floatbtn-icon fa fa-plus\"></span>\r\n        </div>  \r\n      );\r\n    }\r\n}\r\n\r\nexport default FloatingButton;\r\n","//Rounds -- A parent component for the app's \"rounds\" mode.\r\n//Manages the rounds data for the current user and conditionally renders the\r\n//appropriate rounds mode page based on App's mode, which is passed in as a prop.\r\n\r\nimport React from 'react';\r\nimport AppMode from './../AppMode.js';\r\nimport RoundsTable from './RoundsTable.js';\r\nimport RoundForm from './RoundForm.js';\r\nimport FloatingButton from './FloatingButton.js';\r\n\r\nclass Rounds extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor() {\r\n        super();\r\n        this.deleteId = \"\";\r\n        this.editId = \"\";\r\n        this.state = {errorMsg: \"\"};           \r\n    }\r\n\r\n    //addRound -- Given an object newData containing a new round, use the \r\n    //server POST route to add the new round to the database. If the add is\r\n    //successful, call on the refreshOnUpdate() method to force the parent\r\n    //App component to refresh its state from the database and re-render itself,\r\n    //allowing the change to be propagated to the Rounds table. Then switch\r\n    //the mode back to AppMode.ROUNDS since the user is done adding a round.\r\n    addRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'POST',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.setState({errorMsg: \"\"});\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n    //editRound -- Given an object newData containing updated data on an\r\n    //existing round, update the current user's round in the database. \r\n    //toggle the mode back to AppMode.ROUNDS since the user is done editing the\r\n    //round. \r\n    editRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.editId]._id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'PUT',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n\r\n    //deleteRound -- Delete the current user's round uniquely identified by\r\n    //this.state.deleteId, delete from the database, and reset deleteId to empty.\r\n    deleteRound = async () => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.deleteId]._id;\r\n        const res = await fetch(url, {method: 'DELETE'}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: \"An error occurred when attempting to delete round from database: \" \r\n            + msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }  \r\n    }\r\n \r\n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\r\n    //the user is considering deleting.\r\n    setDeleteId = (val) => {\r\n        this.deleteId = val;\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n\r\n    //setEditId -- Capture in this.state.editId the unique id of the item\r\n    //the user is considering editing.\r\n    setEditId = (val) => {\r\n        this.editId = val;\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n\r\n    closeErrorMsg = () => {\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n    \r\n    //render -- Conditionally render the Rounds mode page as either the rounds\r\n    //table, the rounds form set to obtain a new round, or the rounds form set\r\n    //to edit an existing round.\r\n    render() {\r\n        switch(this.props.mode) {\r\n            case AppMode.ROUNDS:\r\n                return (\r\n                    <>\r\n                    {this.state.errorMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.errorMsg}</span>\r\n                       <button className=\"modal-close\" onClick={this.closeErrorMsg}>\r\n                          <span className=\"fa fa-times\"></span>\r\n                        </button></div>: null}\r\n                    <RoundsTable \r\n                        rounds={this.props.userObj.rounds}\r\n                        setEditId={this.setEditId}\r\n                        setDeleteId={this.setDeleteId}\r\n                        deleteRound={this.deleteRound}\r\n                        changeMode={this.props.changeMode}\r\n                        menuOpen={this.props.menuOpen} /> \r\n                    <FloatingButton\r\n                        handleClick={() => \r\n                        this.props.changeMode(AppMode.ROUNDS_LOGROUND)}\r\n                        menuOpen={this.props.menuOpen}\r\n                        icon={\"fa fa-plus\"} />\r\n                    </>\r\n                );\r\n            case AppMode.ROUNDS_LOGROUND:\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={\"\"} \r\n                        saveRound={this.addRound} />\r\n                );\r\n            case AppMode.ROUNDS_EDITROUND:\r\n                let thisRound = {...this.props.userObj.rounds[this.editId]};\r\n                thisRound.date = thisRound.date.substr(0,10);\r\n                if (thisRound.seconds < 10) {\r\n                    thisRound.seconds = \"0\" + thisRound.seconds;\r\n                } \r\n                delete thisRound.SGS;\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={thisRound} \r\n                        saveRound={this.editRound} />\r\n                );\r\n        }\r\n    }\r\n\r\n}   \r\n\r\nexport default Rounds;\r\n","import React from 'react';\r\n\r\nclass CoursesPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"padded-page\">\r\n            <center>\r\n            <h1 >Courses</h1>\r\n            <h2>This page is under construction.</h2>\r\n            <img src=\"https://dl.dropboxusercontent.com/s/qpjhy9x9gwdxpob/SpeedScoreLogo64Trans.png\" \r\n             height=\"200\" width=\"200\"/>\r\n            <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\r\n            </center>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default CoursesPage;","import React from 'react';\r\n\r\nclass AboutBox extends React.Component {\r\n\r\nrender() {\r\n    return (\r\n        <div className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-dialog modal-lg\">\r\n            <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n                <h3>About SpeedScore</h3>\r\n                <button className=\"modal-close\" onClick={this.props.close}>\r\n                    &times;\r\n                </button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n                <img\r\n                src=\"https://dl.dropboxusercontent.com/s/awuwr1vpuw1lkyl/SpeedScore4SplashLogo.png\"\r\n                height=\"200\" width=\"200\"/>\r\n                <h3>The World's First and Only Suite of Apps for\r\n                Speedgolf</h3>\r\n                <p>Version CptS 489 Fa20 Complete (MERN)<br/>\r\n                &copy; 2017-20 The Professor of Speedgolf. All rights\r\n                reserved.\r\n                </p>\r\n                <div style={{textAlign: \"left\"}}>\r\n                <p>SpeedScore apps support</p>\r\n                <ul>\r\n                <li>live touranment scoring (<i>SpeedScore Live&reg;</i>)</li>\r\n                <li>tracking personal speedgolf rounds and sharing results\r\n                (<i>SpeedScore Track&reg;</i>)</li>\r\n                <li>finding speedgolf-friendly courses, booking tee times, and\r\n                paying to play speedgolf by the minute (<i>SpeedScore\r\n                Play&reg;</i>)</li>\r\n                </ul>\r\n                <p>SpeedScore was first developed by Dr. Chris Hundhausen,\r\n                associate professor of computer science at Washington State\r\n                University and the <i>Professor of Speedgolf</i>, with support\r\n                from Scott Dawley, CEO of Speedgolf USA, LLC.</p>\r\n                <p>For more information on SpeedScore, visit <a\r\n                href=\"http://speedscore.live\" target=\"_blank\">SpeedScore's web\r\n                site</a>. For more information on speedgolf, visit <a\r\n                href=\"http://playspeedgolf.com\"\r\n                target=\"_blank\">playspeedgolf.com</a> and <a\r\n                href=\"http://usaspeedgolf.com\" target=\"_blank\">Speedgolf\r\n                USA</a>.</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                <button className=\"btn btn-primary btn-color-theme\"\r\n                onClick={this.props.close}>OK</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default AboutBox;","import React from 'react';\r\nimport NavBar from './NavBar.js';\r\nimport SideMenu from './SideMenu.js';\r\nimport ModeBar from './ModeBar.js';\r\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js'\r\nimport LoginPage from './LoginPage.js';\r\nimport AppMode from \"./../AppMode.js\"\r\nimport SurveyManagementPage from './SurveyManagementPage.js';\r\nimport Rounds from './Rounds.js';\r\nimport CoursesPage from './CoursesPage.js';\r\nimport AboutBox from './AboutBox.js';\r\n\r\nconst modeTitle = {};\r\nmodeTitle[AppMode.LOGIN] = \"Welcome to Kliks\";\r\nmodeTitle[AppMode.SURVEY_MANAGEMENT] = \"Survey Management\";\r\nmodeTitle[AppMode.ROUNDS] = \"My Rounds\";\r\nmodeTitle[AppMode.ROUNDS_LOGROUND] = \"Log New Round\";\r\nmodeTitle[AppMode.ROUNDS_EDITROUND] = \"Edit Round\";\r\nmodeTitle[AppMode.COURSES] = \"Courses\";\r\n\r\nconst modeToPage = {};\r\n\r\n/*  Login/Register Pages */\r\nmodeToPage[AppMode.LOGIN] = LoginPage;\r\n\r\n/*  Survey/Responses/Questions Pages */\r\nmodeToPage[AppMode.SURVEY_MANAGEMENT] = SurveyManagementPage;\r\nmodeToPage[AppMode.SURVEY_MANAGEMENT_RESPONSES] = SurveyManagementPage;\r\nmodeToPage[AppMode.SURVEY_MANAGEMENT_CREATE] = SurveyManagementPage;\r\nmodeToPage[AppMode.SURVEY_MANAGEMENT_SEARCH] = SurveyManagementPage;\r\n\r\n/*  Dashboard Pages */\r\nmodeToPage[AppMode.ROUNDS] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_LOGROUND] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_EDITROUND] = Rounds;\r\n\r\n/*  Course Pages */\r\nmodeToPage[AppMode.COURSES] = CoursesPage;\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {mode: AppMode.LOGIN,\r\n                  menuOpen: false,\r\n                  authenticated: false,\r\n                  userObj: {displayName: \"\", profilePicURL: \"\"},\r\n                  editAccount: false,\r\n                  showEditAccountDialog: false,\r\n                  statusMsg: \"\",\r\n                  showAboutDialog: false\r\n                 };\r\n  }\r\n\r\n  //componentDidMount\r\n  componentDidMount() {\r\n    if (!this.state.authenticated) { \r\n      //Use /auth/test route to (re)-test authentication and obtain user data\r\n      fetch(\"/auth/test\")\r\n        .then((response) => response.json())\r\n        .then((obj) => {\r\n          if (obj.isAuthenticated) {\r\n            this.setState({\r\n              userObj: obj.user,\r\n              authenticated: true,\r\n              mode: AppMode.SURVEY_MANAGEMENT //We're authenticated so can get into the app.\r\n            });\r\n          }\r\n        }\r\n      )\r\n    } \r\n  }\r\n\r\n  //refreshOnUpdate(newMode) -- Called by child components when user data changes in \r\n  //the database. The function calls the users/:userid (GET) route to update \r\n  //the userObj state var based on the latest database changes, and sets the \r\n  //mode state var is set to newMode. After this method is called, the\r\n  //App will re-render itself, forcing the new data to \r\n  //propagate to the child components when they are re-rendered.\r\n  refreshOnUpdate = async(newMode) => {\r\n    let response = await fetch(\"/users/\" + this.state.userObj.id);\r\n    response = await response.json();\r\n    const obj = JSON.parse(response);\r\n    this.setState({\r\n      userObj: obj,\r\n      mode: newMode\r\n    });\r\n  }\r\n\r\n\r\n  handleChangeMode = (newMode) => {\r\n    this.setState({mode: newMode});\r\n  }\r\n\r\n  openMenu = () => {\r\n    this.setState({menuOpen : true});\r\n  }\r\n  \r\n  closeMenu = () => {\r\n    this.setState({menuOpen : false});\r\n  }\r\n\r\n  toggleMenuOpen = () => {\r\n    this.setState(prevState => ({menuOpen: !prevState.menuOpen}));\r\n  }\r\n\r\n  setUserId = (Id) => {\r\n    this.setState({userId: Id,\r\n                   authenticated: true});\r\n  }\r\n\r\n  showEditAccount = () => {\r\n    this.setState({showEditAccountDialog: true});\r\n\r\n  }\r\n\r\n  cancelEditAccount = () => {\r\n    this.setState({showEditAccountDialog: false});\r\n  }\r\n\r\n  //editAccountDone -- called after successful edit or\r\n  //deletion of user account. msg contains the status\r\n  //message and deleted indicates whether an account was\r\n  //edited (deleted == false) or deleted (deleted == true)\r\n  editAccountDone = (msg, deleted) => {\r\n    if (deleted) {\r\n      this.setState({showEditAccountDialog: false,\r\n                     statusMsg: msg,\r\n                     mode: AppMode.LOGIN});\r\n      } else {\r\n        this.setState({showEditAccountDialog: false,\r\n          statusMsg: msg});\r\n      }\r\n  }\r\n\r\n  closeStatusMsg = () => {\r\n    this.setState({statusMsg: \"\"});\r\n  }\r\n\r\n  render() {\r\n    const ModePage = modeToPage[this.state.mode];\r\n    return (\r\n      <div className=\"padded-page\">\r\n        {this.state.showAboutDialog ? \r\n          <AboutBox close={() => this.setState({showAboutDialog: false})}/> : null}\r\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\">\r\n              <span>{this.state.statusMsg}</span>\r\n              <button className=\"modal-close\" onClick={this.closeStatusMsg}>\r\n                  <span className=\"fa fa-times\"></span></button></div> : null}\r\n        {this.state.showEditAccountDialog ? \r\n            <CreateEditAccountDialog \r\n              create={false} \r\n              userId={this.state.userObj.id} \r\n              done={this.editAccountDone} \r\n              cancel={this.cancelEditAccount}/> : null}\r\n        <NavBar \r\n          title={modeTitle[this.state.mode]} \r\n          mode={this.state.mode}\r\n          changeMode={this.handleChangeMode}\r\n          menuOpen={this.state.menuOpen}\r\n          toggleMenuOpen={this.toggleMenuOpen}/>\r\n          <SideMenu \r\n            menuOpen = {this.state.menuOpen}\r\n            mode={this.state.mode}\r\n            toggleMenuOpen={this.toggleMenuOpen}\r\n            displayName={this.state.userObj.displayName}\r\n            profilePicURL={this.state.userObj.profilePicURL}\r\n            localAccount={this.state.userObj.authStrategy === \"local\"}\r\n            editAccount={this.showEditAccount}\r\n            logOut={() => this.handleChangeMode(AppMode.LOGIN)}\r\n            changeMode={this.handleChangeMode}\r\n            showAbout={() => {this.setState({showAboutDialog: true})}}/>\r\n          <ModeBar \r\n            mode={this.state.mode} \r\n            changeMode={this.handleChangeMode}\r\n            menuOpen={this.state.menuOpen}/>\r\n          <ModePage \r\n            menuOpen={this.state.menuOpen}\r\n            mode={this.state.mode}\r\n            changeMode={this.handleChangeMode}\r\n            userObj={this.state.userObj}\r\n            refreshOnUpdate={this.refreshOnUpdate}/>\r\n      </div>\r\n    );  \r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap-social/bootstrap-social.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport './styles/index.css';\r\nimport App from './components/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}