{"version":3,"sources":["AppMode.js","components/NavBar.js","components/SideMenu.js","components/ModeBar.js","components/ConfirmDeleteAccount.js","components/CreateEditAccountDialog.js","components/ResetPasswordDialog.js","components/LookUpAccountDialog.js","components/SecurityQuestionDialog.js","components/LoginPage.js","components/SurveyManagement/AnswerTypes/FileUpload.js","components/SurveyManagement/AnswerTypes/FreeResponse.js","components/SurveyManagement/AnswerTypes/MultipleChoice.js","components/SurveyManagement/CreateSurvey.js","components/SurveyManagement/ActiveQuestions.js","components/SurveyManagement/SubmittedResponse.js","components/SurveyManagement/SearchQuestions.js","components/SurveyManagementPage.js","components/ConfirmDeleteRound.js","components/RoundsTable.js","components/RoundForm.js","components/FloatingButton.js","components/Rounds.js","components/CoursesPage.js","components/AboutBox.js","components/App.js","serviceWorker.js","index.js"],"names":["AppMode","LOGIN","SURVEY_MANAGEMENT","SURVEY_MANAGEMENT_RESPONSES","SURVEY_MANAGEMENT_CREATE","SURVEY_MANAGEMENT_SEARCH","ROUNDS","ROUNDS_LOGROUND","ROUNDS_EDITROUND","COURSES","Object","freeze","NavBar","getMenuBtnIcon","props","mode","menuOpen","handleMenuBtnClick","changeMode","toggleMenuOpen","className","onClick","this","id","src","alt","height","width","title","React","Component","SideMenu","setGeneralMode","renderModeMenuItems","e","preventDefault","profilePicURL","displayName","localAccount","editAccount","showAbout","logOut","ModeBar","ConfirmDeleteAccount","handleChange","match","emailRef","current","value","email","state","emailMatches","setState","createRef","focus","role","close","type","ref","onChange","deleteAccount","disabled","CreateEditAccountDialog","checkDataValidity","accountName","endsWith","newUserRef","setCustomValidity","password","passwordRepeat","repeatPassRef","event","formUpdated","origAccountInfo","formIsUpdated","target","name","length","self","reader","FileReader","readAsDataURL","profilePicRef","files","addEventListener","result","updateField","updateVal","userType","securityQuestion","securityAnswer","setDefaultuserType","handleSubmit","a","userData","url","create","fetch","headers","method","body","JSON","stringify","res","status","done","text","resText","confirmDelete","confirmDeleteAccount","userId","json","parse","cancel","onSubmit","autocomplete","size","placeholder","pattern","required","onBlur","accept","profilePic","profilePicDataURL","rows","cols","maxLength","ResetPasswordDialog","resetPasswordRef","resetPasswordRepeatRef","resetPassword","errorMsg","checkForSubmit","code","cancelResetPassword","onKeyUp","LookUpAccountDialog","handleLookUpAccount","response","obj","authStrategy","getSecurityAnswer","ErrMsg","errMsg","SecurityQuestionDialog","securityAnswerRef","answer","getNewPassword","readOnly","question","LoginPage","handleLoginSubmit","loginBtnIcon","loginBtnLabel","emailInputRef","passwordInputRef","window","open","statusMsg","accountCreateDone","msg","showCreateAccountDialog","cancelCreateAccount","resetUserId","resetQ","resetA","showLookUpAccountDialog","showSecurityQuestionDialog","showResetPaswordDialog","handleOAuthLogin","provider","handleOAuthLoginClick","setTimeout","pw","showResetPasswordDialog","deleted","closeStatusMsg","githubIcon","githubLabel","loginMsg","newAccountCreated","htmlFor","style","padding","fontSize","FileUpload","FreeResponse","MultipleChoice","onAddAnswer","console","log","onRemoveAnswer","aria-label","aria-describedby","answerTypes","CreateSurvey","answerType","AnswerType","ActiveQuestions","class","SubmittedResponse","onSearchClicked","justifyContent","paddingBottom","classNames","onSearchClick","SurveyManagementPage","ConfirmDeleteRound","deleteRound","RoundsTable","editRound","setEditId","showConfirmDelete","setDeleteId","renderTable","table","r","push","key","rounds","date","substring","course","Number","strokes","minutes","seconds","keys","colSpan","fontStyle","RoundForm","newSec","newSGS","computeSGS","SGS","newStrokes","newMin","faIcon","btnLabel","roundData","saveRound","min","sec","today","Date","now","getTimezoneOffset","toISOString","substr","holes","notes","thisRound","startData","max","FloatingButton","handleClick","Rounds","addRound","newData","userObj","refreshOnUpdate","editId","_id","deleteId","val","closeErrorMsg","icon","CoursesPage","AboutBox","textAlign","href","modeTitle","modeToPage","App","newMode","handleChangeMode","openMenu","closeMenu","prevState","setUserId","Id","authenticated","showEditAccount","showEditAccountDialog","cancelEditAccount","editAccountDone","showAboutDialog","then","isAuthenticated","user","ModePage","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ff2ff29c.chunk.js","sourcesContent":["/* AppMode: The enumerated type for AppMode. */\r\n\r\nconst AppMode = {\r\n    LOGIN: \"LoginMode\",\r\n\r\n    SURVEY_MANAGEMENT: \"SurveyMode\",\r\n    SURVEY_MANAGEMENT_RESPONSES: \"SurveyModeResponses\",\r\n    SURVEY_MANAGEMENT_CREATE: \"SurveyModeCreate\",\r\n    SURVEY_MANAGEMENT_SEARCH: \"SurveyModeSearch\",\r\n\r\n    ROUNDS: \"RoundsMode\",\r\n    ROUNDS_LOGROUND: \"RoundsMode-LogRound\",\r\n    ROUNDS_EDITROUND: \"RoundsMode-EditRound\",\r\n\r\n    COURSES: \"CoursesMode\"\r\n};\r\n\r\nObject.freeze(AppMode); //This ensures that the object is immutable.\r\n\r\nexport default AppMode;","import React from 'react';\r\nimport AppMode from '../AppMode';\r\n\r\nclass NavBar extends React.Component {\r\n\r\n  getMenuBtnIcon = () => {\r\n      if (this.props.mode === AppMode.ROUNDS_LOGROUND || \r\n          this.props.mode === AppMode.ROUNDS_EDITROUND)\r\n          return \"fa fa-arrow-left\";\r\n      if (this.props.menuOpen)\r\n        return \"fa fa-times\";\r\n      return \"fa fa-bars\";\r\n  }\r\n\r\n  handleMenuBtnClick = () => {\r\n    if (this.props.mode === AppMode.ROUNDS_LOGROUND ||\r\n        this.props.mode === AppMode.ROUNDS_EDITROUND) {\r\n      this.props.changeMode(AppMode.ROUNDS);\r\n    } else if (this.props.mode != AppMode.LOGIN) {\r\n      this.props.toggleMenuOpen();\r\n    }\r\n  }\r\n\r\n    \r\n  render() {\r\n    return (\r\n    <div className=\"navbar\">  \r\n    <span className=\"navbar-items\">\r\n      <button className=\"sidemenu-btn\" onClick={this.handleMenuBtnClick}>\r\n        <span id=\"menuBtnIcon\" className={\"sidemenu-btn-icon \" + this.getMenuBtnIcon()}>\r\n        </span>\r\n      </button>\r\n      <img src=\"https://tinyurl.com/y2lr8yvu\" alt=\"Kliks Logo\" height=\"38px\"\r\n      width=\"38px\" />\r\n      <span className=\"navbar-title\">\r\n        &nbsp;{this.props.title}\r\n      </span>\r\n    </span>\r\n  </div>\r\n); \r\n}\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport AppMode from './../AppMode.js'\r\nimport App from './App.js';\r\n\r\nclass SideMenu extends React.Component {\r\n\r\n  setGeneralMode = (mode) => {\r\n    if(AppMode.SURVEY_MANAGEMENT || AppMode.SURVEY_MANAGEMENT_CREATE || AppMode.SURVEY_MANAGEMENT_RESPONSES  || AppMode.SURVEY_MANAGEMENT_SEARCH){\r\n      return AppMode.SURVEY_MANAGEMENT;\r\n    }\r\n    \r\n    return mode;\r\n  }\r\n  \r\n//renderModeItems -- Renders correct subset of mode menu items based on\r\n//current mode, which is stored in this.prop.mode. Uses switch statement to\r\n//determine mode.\r\nrenderModeMenuItems = () => {\r\n  // console.log(this.props.mode);\r\n  const mode = this.setGeneralMode(this.props.mode);\r\n  switch (mode) {\r\n    case AppMode.SURVEY_MANAGEMENT || AppMode.SURVEY_MANAGEMENT_CREATE || AppMode.SURVEY_MANAGEMENT_RESPONSES  || AppMode.SURVEY_MANAGEMENT_SEARCH:\r\n      return(\r\n        <div>\r\n        <a className=\"sidemenu-item\" onClick={(e) => { \r\n          e.preventDefault();\r\n          this.props.changeMode(AppMode.SURVEY_MANAGEMENT);\r\n          }}>\r\n            <span className=\"fa fa-bolt\"></span>&nbsp;Active Questions</a>\r\n        <a className=\"sidemenu-item \" onClick={(e) => { \r\n          e.preventDefault();\r\n          this.props.changeMode(AppMode.SURVEY_MANAGEMENT_SEARCH);\r\n          }}>\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Questions</a>\r\n        <a className=\"sidemenu-item \" onClick={(e) => { \r\n          e.preventDefault();\r\n          this.props.changeMode(AppMode.SURVEY_MANAGEMENT_CREATE);\r\n          }}>\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Create Questions</a>\r\n        <a className=\"sidemenu-item \" onClick={(e) => { \r\n          e.preventDefault();\r\n          this.props.changeMode(AppMode.SURVEY_MANAGEMENT_RESPONSES);\r\n          }}>\r\n            <span className=\"fa fa-folder-open\"></span>&nbsp;Responses</a>           \r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.ROUNDS:\r\n      return(\r\n        <div>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Log New Round</a>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Rounds</a>\r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.COURSES:\r\n      return(\r\n        <div>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Add a Course</a>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Courses</a>\r\n        </div>\r\n      );\r\n    default:\r\n        return null;\r\n    }\r\n}\r\n\r\n    render() {\r\n       return (\r\n        <div className={\"sidemenu \" + (this.props.menuOpen ? \"sidemenu-open\" : \"sidemenu-closed\")}\r\n             onClick={this.props.toggleMenuOpen}>\r\n          {/* SIDE MENU TITLE */}\r\n          <div className=\"sidemenu-title\">\r\n            <img src={this.props.profilePicURL} height='60' width='60' />\r\n            <span id=\"userID\" className=\"sidemenu-userID\">&nbsp;{this.props.displayName}</span>\r\n        </div>\r\n          {/* MENU CONTENT */}\r\n          {this.renderModeMenuItems()}\r\n          {/* The following menu items are present regardless of mode */}\r\n          {this.props.localAccount ? \r\n            <a id=\"accountBtn\" className=\"sidemenu-item\" onClick={this.props.editAccount}>\r\n              <span className=\"fa fa-user\"></span>&nbsp;Account</a> : null}\r\n          <a id=\"aboutBtn\" className=\"sidemenu-item\" onClick={this.props.showAbout}>\r\n            <span className=\"fa fa-info-circle\"></span>&nbsp;About</a>\r\n          <a id=\"logOutBtn\" className=\"sidemenu-item\" onClick={this.props.logOut}>\r\n            <span className=\"fa fa-sign-out-alt\"></span>&nbsp;Log Out</a>\r\n        </div>\r\n       );\r\n    }\r\n}\r\n\r\nexport default SideMenu;\r\n","import React from 'react';\r\nimport AppMode from '../AppMode.js';\r\n\r\n\r\nclass ModeBar extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className={\"modebar\" + (this.props.mode === AppMode.LOGIN ? \r\n          \" invisible\" : (this.props.menuOpen ? \" ignore-click visible\" : \" visible\"))}>\r\n        <a className={(this.props.mode === AppMode.SURVEY_MANAGEMENT ? \" item-selected\" : null)}\r\n            onClick={()=>this.props.changeMode(AppMode.SURVEY_MANAGEMENT)}>\r\n          <span className=\"modebaricon fa fa-th-list\"></span>\r\n          <span className=\"modebar-text\">Survey Management</span>\r\n        </a>\r\n        <a className={(this.props.mode === AppMode.ROUNDS || \r\n               this.props.mode === AppMode.ROUNDS_EDITROUND || \r\n               this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                  \" item-selected\" : null)}\r\n           onClick={()=>this.props.changeMode(AppMode.ROUNDS)}>\r\n          <span className=\"modebar-icon  fa fa-history\"></span>\r\n          <span className=\"modebar-text\">Dashboard</span>\r\n        </a>\r\n        <a className={(this.props.mode === AppMode.COURSES ? \" item-selected\" : null)}\r\n          onClick={()=>this.props.changeMode(AppMode.COURSES)}>\r\n          <span className=\"modebar-icon  fa fa-flag\"></span>\r\n          <span className=\"modebar-text\">Courses</span>\r\n        </a> \r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default ModeBar;\r\n","import React from 'react';\r\n\r\nclass ConfirmDeleteAccount extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.emailRef = React.createRef();\r\n        this.state = {emailMatches: false};\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.emailRef.current.focus();\r\n    }\r\n\r\n    handleChange = () => {\r\n        const match = (this.emailRef.current.value === this.props.email);\r\n        if (match != this.state.emailMatches) {\r\n            this.setState({emailMatches: match});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <center>\r\n                <h3 className=\"modal-title\"><b>Confirm Account Deletion</b></h3>\r\n              </center>\r\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\r\n                 &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p>Do you really want to delete your account? <br />\r\n                 <i>This action cannot be undone.</i></p>\r\n              <label>\r\n                Confirm Email ({this.props.email}):\r\n                <br/>\r\n                <input \r\n                    className=\"form-center\"\r\n                    type=\"text\"\r\n                    ref={this.emailRef}\r\n                    onChange={this.handleChange} />\r\n                </label>\r\n                <br />\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteAccount} disabled={!this.state.emailMatches}>\r\n                  Yes, Delete My Account</button>\r\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\r\n                  No, Cancel</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmDeleteAccount;","import React from 'react';\r\nimport ConfirmDeleteAccount from './ConfirmDeleteAccount.js';\r\nimport confirmDeleteAccount from './ConfirmDeleteAccount.js';\r\n\r\nclass CreateEditAccountDialog extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.origAccountInfo = null;\r\n        //Create a ref for the email input DOM element\r\n        this.newUserRef = React.createRef();\r\n        this.repeatPassRef = React.createRef();\r\n        this.profilePicRef = React.createRef();\r\n        this.state = {accountName: \"\",\r\n                      displayName: \"\",\r\n                      userType: \"\",\r\n                      profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                      password: \"\",\r\n                      passwordRepeat: \"\",\r\n                      securityQuestion: \"\",\r\n                      securityAnswer: \"\",\r\n                      formUpdated: false,\r\n                      confirmDelete: false};\r\n    } \r\n\r\n    //componentDidMount -- If we are editing an existing user acccount, we need to grab the data from\r\n    //the database and push them into the state.\r\n    async componentDidMount() {\r\n        if (!this.props.create) {\r\n            //obtain current user data from database and push into state\r\n            const url = \"/users/\" + this.props.userId;\r\n            const res = await fetch(url);\r\n            const json = await res.json();\r\n            const userData = JSON.parse(json);\r\n            this.origAccountInfo = userData; //This determines whether update can occur\r\n            this.origAccountInfo.passwordRepeat = userData.password;\r\n            this.setState({accountName: this.props.userId,\r\n                           displayName: userData.displayName,\r\n                           userType: userData.userType,\r\n                           profilePicURL: userData.profilePicURL,\r\n                           password: userData.password,\r\n                           passwordRepeat: userData.password,\r\n                           securityQuestion: userData.securityQuestion,\r\n                           securityAnswer: userData.securityAnswer});\r\n        }\r\n    }\r\n\r\n    //checkDataValidity -- Callback function invoked after a form element in\r\n    //the 'Create Account' dialog box changes and component state has been\r\n    //updated. We first check whether the passwords match. If they do not, \r\n    //we set a custom validity message to be displayed when the user clicks the\r\n    //'Create Account' button. Otherwise, we reset the custom validity message\r\n    //to empty so that it will NOT fire when the user clicks 'Create Account'.\r\n    //Second, we check whether anything in the form changed from the original.\r\n    //If so, we update the 'formUpdated' state var, so that the form's submit\r\n    //button is enabled.\r\n    checkDataValidity = () => {\r\n        if(!this.state.accountName.endsWith(\"@wsu.edu\")){\r\n            this.newUserRef.current.setCustomValidity(\"Email needs to be a wsu email: @wsu.edu\");\r\n        }\r\n        else{\r\n            this.newUserRef.current.setCustomValidity(\"\");\r\n        }\r\n\r\n        if (this.state.password != this.state.passwordRepeat) {\r\n            //Passwords don't match\r\n            this.repeatPassRef.current.setCustomValidity(\r\n            \"This password must match password entered in previous field.\");\r\n        } else {\r\n            this.repeatPassRef.current.setCustomValidity(\"\");\r\n        }\r\n    }\r\n\r\n    //handleChange--Called when a field in a dialog box form changes.\r\n    handleChange = (event) => {\r\n        const formUpdated = (this.origAccountInfo == null ? true : this.formIsUpdated(event.target.name,event.target.value));\r\n        if (event.target.name === \"profilePic\") {\r\n            if (event.target.value.length == 0) { //The user canceled the file selection -- set back to default\r\n                this.setState({profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                               formUpdated: formUpdated},\r\n                               this.checkDataValidity);\r\n            } else { //The user selected a file\r\n                const self = this;\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(this.profilePicRef.current.files[0]);\r\n                reader.addEventListener(\"load\",function() {\r\n                    self.setState({profilePicURL:  this.result,\r\n                                   formUpdated: formUpdated},this.checkDataValidity);\r\n                });\r\n                \r\n            }\r\n        } else {\r\n            this.setState({[event.target.name]: event.target.value,\r\n                           formUpdated: formUpdated},this.checkDataValidity);\r\n        }\r\n    } \r\n\r\n    //formisUpdated-- Checks whether any form data element has changed from the original. If so, \r\n    //returns true. Returns false otherwise. Note that in case of editing new account, always returns\r\n    //true since this.origAccountInfo is set to null.\r\n    //Should be called whenever the user makes a change to form data.\r\n    formIsUpdated = (updateField,updateVal) => {\r\n        if (this.origAccountInfo[updateField] != updateVal) {return true;}\r\n        if (updateField != \"displayName\" && \r\n             this.state.displayName != this.origAccountInfo.displayName) \r\n             {return true;}\r\n        if (updateField != \"userType\" && \r\n             this.state.userType != this.origAccountInfo.userType) \r\n             {return true;}\r\n        if (updateField != \"profilePicURL\" && \r\n             this.state.profilePicURL != this.origAccountInfo.profilePicURL) \r\n             {return true;}\r\n        if (updateField != \"password\" &&\r\n            this.state.password !== this.origAccountInfo.password)\r\n            {return true;}\r\n        if (updateField != \"passwordRepeat\" &&\r\n            this.state.passwordRepeat !== this.origAccountInfo.passwordRepeat)\r\n            {return true;}\r\n        if (updateField != \"securityQuestion\" &&\r\n            this.state.securityQuestion !== this.origAccountInfo.securityQuestion)\r\n            {return true;}\r\n        if (updateField != \"securityAnswer\" &&\r\n            this.state.securityAnswer !== this.origAccountInfo.securityAnswer)\r\n            {return true;}\r\n        return false;\r\n    }\r\n\r\n    //setDefaultuserType -- Triggered by onBlur() event of Email field.\r\n    //Sets default value of display name to value entered into Email field \r\n    //as a courtesy.\r\n    setDefaultuserType = (event) => {\r\n        this.setState({userType: event.target.value});\r\n        this.setState({displayName: event.target.value});\r\n    }\r\n\r\n    //handleSubmit -- Triggered when user clicks on submit button to\r\n    //either create or edit account.\r\n    //Custom data checking ensures user account under this email does not \r\n    //already exist and that the rest of the info is valid. We create a new  \r\n    // object for user, save it to localStorage and take user to app's \r\n    //landing page. \r\n    handleSubmit = async(event) => {\r\n        event.preventDefault();\r\n        //Initialize user account\r\n        let userData = {\r\n            displayName: this.state.displayName,\r\n            userType: this.state.userType,\r\n            password: this.state.password,\r\n            profilePicURL: this.state.profilePicURL,\r\n            securityQuestion: this.state.securityQuestion,\r\n            securityAnswer: this.state.securityAnswer\r\n        };\r\n        const url = '/users/' + this.state.accountName;\r\n        let res;\r\n        if (this.props.create) { //use POST route to create new user account\r\n            res = await fetch(url, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                    },\r\n                method: 'POST',\r\n                body: JSON.stringify(userData)}); \r\n            if (res.status == 200) { //successful account creation!\r\n                this.props.done(\"New account created! Enter credentials to log in.\",false);\r\n            } else { //Unsuccessful account creation\r\n                //Grab textual error message\r\n                const resText = await res.text();\r\n                this.props.done(resText,false);\r\n            }\r\n        } else { //use PUT route to update existing user account\r\n            res = await fetch(url, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                    },\r\n                method: 'PUT',\r\n                body: JSON.stringify(userData)}); \r\n            if (res.status == 200) { //successful account creation!\r\n                this.props.done(\"User Account Updated!\",false);\r\n            } else { //Unsuccessful account update\r\n                //Grab textual error message\r\n                const resText = await res.text();\r\n                this.props.done(resText,false);\r\n            }\r\n        }\r\n    }\r\n\r\n    //deleteAccount -- Called after confirms account deletion. \r\n    //Uses DELETE server route to perform server deletion. \r\n    //Calls on done with status message and\r\n    //true if delete was succesful, false otherwise.\r\n    deleteAccount = async() => {\r\n       const url = '/users/' + this.state.accountName;\r\n       const res = await fetch(url, \r\n                    {method: 'DELETE'}); \r\n        if (res.status == 200) { //successful account deletion!\r\n            this.props.done(\"Account '\" + this.state.accountName + \"' has been deleted.\",true);\r\n        } else { //Unsuccessful account deletion\r\n            //Grab textual error message\r\n            const resText = await res.text();\r\n            this.props.done(resText,false);\r\n        }\r\n        this.setState({confirmDelete: false});\r\n    }\r\n\r\n    //confirmDeleteAccount -- Called when user clicks on \"Delete Account...\"\r\n    //button to indicate intention to delete account. Presents the Confirm\r\n    //Delete dialog box.\r\n    confirmDeleteAccount = (e) => {\r\n        e.preventDefault();\r\n        this.setState({confirmDelete: true});\r\n    }\r\n\r\n    render() {\r\n    return (  \r\n    <div className=\"modal\" role=\"dialog\">\r\n    <div className=\"modal-dialog modal-lg\"></div>\r\n        <div className=\"modal-content form-center\">\r\n            <div className=\"modal-header\">\r\n              <h3><b>{this.props.create ? \"Create New Account\" : \"Edit Account\"}</b></h3>\r\n              <button className=\"modal-close\" \r\n                       onClick={this.props.cancel}>\r\n                &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n            <form onSubmit={this.handleSubmit}>\r\n            <label>\r\n                Email: \r\n                <input  \r\n                autocomplete=\"off\"\r\n                disabled={!this.props.create}\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountName\"\r\n                type=\"email\"\r\n                size=\"35\"\r\n                placeholder=\"Enter Email Address\"\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                required={true}\r\n                ref={this.newUserRef}\r\n                value={this.state.accountName}\r\n                onChange={this.handleChange}\r\n                onBlur={this.setDefaultuserType}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Password:\r\n                <input\r\n                autocomplete=\"off\"\r\n                className=\"form-control form-text form-center\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                size=\"35\"\r\n                placeholder=\"Enter Password\"\r\n                pattern=\r\n                \"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                required={true}\r\n                value={this.state.password}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Repeat Password:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"passwordRepeat\"\r\n                type=\"password\"\r\n                size=\"35\"\r\n                placeholder=\"Repeat Password\"\r\n                required={true}\r\n                ref={this.repeatPassRef}\r\n                value={this.state.passwordRepeat}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Display Name:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"displayName\"\r\n                type=\"text\"\r\n                size=\"30\"\r\n                placeholder=\"Display Name\"\r\n                required={true}\r\n                value={this.state.displayName}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Account Type:\r\n                <select name=\"userType\" value={this.state.userType} \r\n                className=\"form-control form-center\" onChange={this.handleChange}>\r\n                <option value=\"SelectOne\">Select One</option>\r\n                <option value=\"Student\">Student</option>\r\n                <option value=\"Instructor\">Instructor</option>\r\n                </select> \r\n                </label>\r\n            <br/>\r\n            <label>\r\n                Profile Picture:<br/>\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"profilePic\"\r\n                type=\"file\"\r\n                accept=\"image/x-png,image/gif,image/jpeg\" \r\n                ref={this.profilePicRef}\r\n                value={this.state.profilePic}\r\n                onChange={this.handleChange}\r\n                />\r\n                <img src={this.state.profilePicURL != \"\" ? \r\n                            this.state.profilePicURL :\r\n                            this.state.profilePicDataURL} \r\n                        height=\"60\" width=\"60\" \r\n                 />\r\n            </label> \r\n            <br/>\r\n            <label>\r\n                Security Question:\r\n                <textarea\r\n                className=\"form-control form-text form-center\"\r\n                name=\"securityQuestion\"\r\n                size=\"35\"\r\n                placeholder=\"Security Question\"\r\n                rows=\"2\"\r\n                cols=\"35\"\r\n                maxLength=\"100\"\r\n                required={true}\r\n                value={this.state.securityQuestion}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Answer to Security Question:\r\n                <textarea\r\n                className=\"form-control form-text form-center\"\r\n                name=\"securityAnswer\"\r\n                type=\"text\"\r\n                placeholder=\"Answer\"\r\n                rows=\"2\"\r\n                cols=\"35\"\r\n                maxLength=\"100\"\r\n                required={true}\r\n                value={this.state.securityAnswer}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            {!this.props.create ?  \r\n            <button className=\"btn btn-small btn-danger\" onClick={this.confirmDeleteAccount}>\r\n                Delete Account...\r\n            </button> : null}\r\n            <br/><br/>\r\n            <button role=\"submit\" \r\n                disabled={!this.state.formUpdated}\r\n                className=\"btn btn-primary btn-color-theme modal-submit-btn\">\r\n                <span className={this.props.create ? \"fa fa-user-plus\" : \"fa fa-user\"}></span>\r\n                &nbsp;{this.props.create ? \"Create Account\" : \"Update Account\"}\r\n            </button>\r\n            </form>\r\n            </div>\r\n        </div>\r\n        {this.state.confirmDelete ? \r\n          <ConfirmDeleteAccount email={this.state.accountName}\r\n                                deleteAccount={this.deleteAccount}\r\n                                close={() => (this.setState({confirmDelete: false}))}\r\n         /> : null}\r\n    </div>\r\n    );\r\n}\r\n}\r\n\r\nexport default CreateEditAccountDialog;","import React from 'react'\r\n\r\nclass ResetPasswordDialog extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.resetPasswordRef = React.createRef();\r\n        this.resetPasswordRepeatRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //handleSubmit -- When the user submits the form, ensure that the passwords match.\r\n    //If so, call on resetPassword in parent component to actually reset the password.\r\n    //Otherwise, display an error message prompting the user to try again.\r\n    handleSubmit= (event) => {\r\n        event.preventDefault();\r\n        if (this.resetPasswordRef.current.value === this.resetPasswordRepeatRef.current.value) {\r\n            this.props.resetPassword(this.resetPasswordRef.current.value);\r\n        } else {\r\n            this.resetPasswordRepeatRef.current.focus();\r\n            this.setState({errorMsg: \"The passwords you entered do not match. Please try again.\"});\r\n        }\r\n    }\r\n\r\n    checkForSubmit = (e) => {\r\n        if (e.code === \"Enter\") {\r\n            e.preventDefault();\r\n            this.handleSubmit();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Reset Password</b>\r\n                    </h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={this.props.cancelResetPassword}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \r\n                    <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        New Password: \r\n                        <input\r\n                        type=\"password\"\r\n                        placeholder=\"Enter new password\"\r\n                pattern=\"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                        className=\"form-control form-text\"\r\n                        ref={this.resetPasswordRef}\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Repeat New Password: \r\n                        <input\r\n                        type=\"password\"\r\n                        placeholder=\"Repeat new password\"\r\n                        className=\"form-control form-text\"\r\n                        onKeyUp={this.checkForSubmit}\r\n                        ref={this.resetPasswordRepeatRef}\r\n                        />\r\n                    </label>\r\n                    <button role=\"submit\" \r\n                     className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-key\"></span>&nbsp;Reset Password\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          );\r\n        \r\n    }\r\n}\r\n\r\nexport default ResetPasswordDialog;","import React from 'react';\r\nimport AppMode from '../AppMode.js';\r\n\r\nclass LookUpAccountDialog extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.emailRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //handleLookUpAccount: When the user clicks on the \"Look Up Account\" dialog box\r\n    //button, we check whether the account exists. If it does, we update the state,\r\n    //setting the resetEmail var to the email entered, hiding the current dialog box\r\n    //and showing the security question dialog box.\r\n    handleLookUpAccount = async(event) => {\r\n        event.preventDefault();\r\n        let response = await fetch(\"/users/\" + this.emailRef.current.value);\r\n        if (response.status == 200) {\r\n            const json = await response.json();\r\n            const obj = JSON.parse(json);\r\n            if (obj.authStrategy === \"local\") {\r\n                this.props.getSecurityAnswer(obj.id,obj.securityQuestion, obj.securityAnswer);\r\n            } else { //Account exists but was created through OAuth so password can't be reset \r\n                this.setState({ErrMsg: \"That account is authenticated through \" + obj.authStrategy + \". \" +\r\n                               \"Please log in to \" + obj.authStrategy + \" to reset the password.\"});\r\n            }\r\n        } else {\r\n            this.setState({errorMsg: \"Sorry, there is no account associated with '\" + this.emailRef.current.value + \"'.\"});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Look Up Account</b></h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={() => {this.props.cancelResetPassword()}}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null}\r\n                    <form onSubmit={this.handleLookUpAccount}>\r\n                    <label>\r\n                        Account Email Address: \r\n                        <input\r\n                        ref={this.emailRef}\r\n                        className=\"form-control form-text\"\r\n                        type=\"email\"\r\n                        size=\"35\"\r\n                        placeholder=\"Enter Email Address\"\r\n                        pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                        ref={this.emailRef}\r\n                        required={true}\r\n                        />\r\n                    </label>\r\n                    <button type=\"submit\" \r\n                        className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-search\"></span>&nbsp;Look Up Account\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>  \r\n        );   \r\n    }\r\n\r\n}\r\n\r\nexport default LookUpAccountDialog;\r\n","import React from 'react';\r\n\r\nclass SecurityQuestionDialog extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.securityAnswerRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //Focus cursor in email secrity answer field when mounted\r\n    componentDidMount() {\r\n        this.securityAnswerRef.current.focus();\r\n    }  \r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (this.securityAnswerRef.current.value === this.props.answer) {\r\n            this.props.getNewPassword();\r\n        } else {\r\n            this.securityAnswerRef.current.focus();\r\n            this.setState({errorMsg: \"Sorry, that is not the correct answer to the security question. Try again.\"});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Answer Security Question</b>\r\n                    </h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={this.props.cancelResetPassword}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \r\n                    <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Security Question: \r\n                        <textarea\r\n                        readOnly={true}\r\n                        value={this.props.question}\r\n                        className=\"form-control form-text\"\r\n                        rows=\"3\"\r\n                        cols=\"35\"\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Security Answer: \r\n                        <textarea\r\n                        className=\"form-control form-text\"\r\n                        placeholder=\"Enter Security Question Answer\"\r\n                        ref={this.securityAnswerRef}\r\n                        rows=\"3\"\r\n                        cols=\"35\"\r\n                        />\r\n                    </label>\r\n                    <button role=\"submit\" \r\n                      className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-check\"></span>&nbsp;Verify Answer\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          );        \r\n    }\r\n}\r\n export default SecurityQuestionDialog;","import React from 'react';\r\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js';\r\nimport ResetPasswordDialog from './ResetPasswordDialog.js';\r\nimport LookUpAccountDialog from './LookUpAccountDialog.js';\r\nimport SecurityQuestionDialog from './SecurityQuestionDialog.js';\r\nimport AppMode from '../AppMode.js';\r\n\r\nclass LoginPage extends React.Component {\r\n\r\nconstructor() {\r\n    super();\r\n    //Create a ref for the email input DOM element\r\n    this.emailInputRef = React.createRef();\r\n    this.resetUserId = \"\";\r\n    this.resetQ = \"\";\r\n    this.resetA = \"\";\r\n    this.passwordInputRef = React.createRef();\r\n    this.state = {statusMsg: \"\",\r\n                  loginBtnIcon: \"fa fa-sign-in\",\r\n                  loginBtnLabel: \"Log In\",\r\n                  showLookUpAccountDialog: false,\r\n                  showSecurityQuestionDialog: false,\r\n                  showResetPaswordDialog: false,\r\n                  githubIcon: \"fa fa-github\",\r\n                  githubLabel: \"Sign in with GitHub\",\r\n                  loginMsg: \"\",\r\n                  newAccountCreated: false\r\n                  };\r\n} \r\n    \r\n//Focus cursor in email input field when mounted\r\ncomponentDidMount() {\r\n    this.emailInputRef.current.focus();\r\n}  \r\n\r\n//handleLoginSubmit -- Called when user clicks on login button.\r\nhandleLoginSubmit = async (event) => {\r\n    event.preventDefault();\r\n    this.setState({loginBtnIcon: \"fa fa-spin fa-spinner\",\r\n                   loginBtnLabel: \"Logging In...\"});\r\n    const url = \"auth/login?username=\" + this.emailInputRef.current.value +\r\n                \"&password=\" + this.passwordInputRef.current.value;\r\n    const res = await fetch(url, {method: 'POST'}); \r\n    if (res.status == 200) { //successful login!\r\n        window.open(\"/\",\"_self\");\r\n    } else { //Unsuccessful login\r\n      const resText = await res.text();\r\n      this.setState({loginBtnIcon: \"fa fa-sign-in\",\r\n                     loginBtnLabel: \"Log In\",\r\n                     statusMsg: resText});\r\n    }\r\n}\r\n\r\n  //accountCreateDone -- Called by child CreateAccountDialog component when \r\n  //user attempted to create new account. Hide the dialog and display \r\n  //a message indicating result of the attempt.\r\n  accountCreateDone = (msg) => {\r\n      this.setState({statusMsg: msg,\r\n                     showCreateAccountDialog: false});\r\n  }\r\n\r\n  //cancelCreateAccount -- Called by child CreateAccountDialog componenet when user decides\r\n  //to cancel creation of new account by clicking the \"X\" in top-right of dialog.\r\n  cancelCreateAccount = () => {\r\n      this.setState({showCreateAccountDialog: false});\r\n  }\r\n\r\n//cancelResetPassword -- Called by one of the child three child dialog box components when\r\n//the user decides to cancel resetting their password. Toggles state so that all three\r\n//of the dialog boxes are hidden\r\ncancelResetPassword = () => {\r\n    this.resetUserId = \"\";\r\n    this.resetQ = \"\";\r\n    this.resetA = \"\";\r\n    this.setState({showLookUpAccountDialog: false,\r\n                   showSecurityQuestionDialog: false,\r\n                   showResetPaswordDialog: false});             \r\n}\r\n\r\n//handleOAuthLogin -- Callback function that initiates contact with OAuth\r\n//provider\r\nhandleOAuthLogin = (provider) => {\r\n    window.open(`/auth/${provider}`,\"_self\");\r\n}\r\n\r\n//handleOAuthLoginClick -- Called whent the user clicks on button to\r\n//authenticate via a third-party OAuth service. The name of the provider is\r\n//passed in as a parameter.\r\nhandleOAuthLoginClick = (provider) => {\r\n   this.setState({[provider + \"Icon\"] : \"fa fa-spin fa-spinner\",\r\n                  [provider + \"Label\"] : \"Connecting...\"});\r\n   setTimeout(() => this.handleOAuthLogin(provider),1000);\r\n}\r\n\r\n//getSecurityAnswer: Given the id, security question, and security answer obtained\r\n//from the LookUpAccountDialog component, update state such that the user will\r\n//next be prompted to enter security question and answer for verification\r\ngetSecurityAnswer = (userId, question, answer) => {\r\n    this.resetUserId = userId;\r\n    this.resetQ = question;\r\n    this.resetA = answer;\r\n    this.setState({showLookUpAccountDialog: false,\r\n                   showSecurityQuestionDialog: true\r\n                });\r\n}\r\n\r\n//getNewPassword-- Called after user successfully provides correct answer\r\n//to security question. Presents the \"Reset Password\" dialog box.\r\ngetNewPassword = () => {\r\n    this.setState({showSecurityQuestionDialog: false,\r\n                    showResetPaswordDialog: true});\r\n}\r\n\r\n//resetPassword--Called after the user successfully enters a new (acceptable)\r\n//password. pw contains the new password. Call on the Update (PUT) server\r\n//route to update the user's password in the database.\r\nresetPassword = async(pw) => {\r\n    const url = \"/users/\" + this.resetUserId;\r\n    const res = await fetch(url, {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n            },\r\n        method: 'PUT',\r\n        body: JSON.stringify({password: pw})}); \r\n    if (res.status == 200) { //successful update creation!\r\n        this.setState({showResetPaswordDialog: false,\r\n                       statusMsg: \"Password successfully reset!\"});\r\n    } else { //Unsuccessful account creation\r\n        //Grab textual error message\r\n        const resText = await res.text();\r\n        this.setState({showResetPasswordDialog: false,\r\n                      statusMsg: resText});\r\n    }\r\n    \r\n}\r\n\r\n//newAccountCreated -- Called after successful creation of a new account\r\naccountCreateDone = (msg,deleted) => {\r\n    this.setState({statusMsg: msg,\r\n                   showCreateAccountDialog: false});\r\n}\r\n\r\n//closeStatusMsg -- Called when user clicks on \"x\" to dismiss status message\r\ncloseStatusMsg = () => {\r\n    this.setState({statusMsg: \"\"});\r\n}\r\n\r\n//cancelCreateAccount -- called to hide Create Account dialog without creating acct\r\ncancelCreateAccount = () => {\r\n    this.setState({showCreateAccountDialog: false});\r\n}\r\n\r\n  render() {\r\n    return(\r\n        <div>\r\n        <center>\r\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.statusMsg}</span>\r\n                       <button className=\"modal-close\" onClick={this.closeStatusMsg}>\r\n                          <span className=\"fa fa-times\"></span>\r\n                        </button></div>: null}\r\n            {this.state.showLookUpAccountDialog ? \r\n              <LookUpAccountDialog cancelResetPassword={this.cancelResetPassword}\r\n                                   getSecurityAnswer={this.getSecurityAnswer}/> : null}\r\n            {this.state.showSecurityQuestionDialog ? \r\n               <SecurityQuestionDialog cancelResetPassword={this.cancelResetPassword}\r\n                                       question={this.resetQ}\r\n                                       answer={this.resetA}\r\n                                       getNewPassword={this.getNewPassword}/> : null}\r\n            {this.state.showResetPaswordDialog ? \r\n              <ResetPasswordDialog cancelResetPassword={this.cancelResetPassword}\r\n                                   resetPassword={this.resetPassword} /> : null}\r\n            <form id=\"loginInterface\" onSubmit={this.handleLoginSubmit}>\r\n            <label htmlFor=\"emailInput\" style={{ padding: 0, fontSize: 24 }}>\r\n                Email:\r\n                <input\r\n                ref={this.emailInputRef}\r\n                className=\"form-control login-text\"\r\n                type=\"email\"\r\n                placeholder=\"Enter Email Address\"\r\n                id=\"emailInput\"\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                required={true}\r\n                />\r\n            </label>\r\n            <p />\r\n            <label htmlFor=\"passwordInput\" style={{ padding: 0, fontSize: 24 }}>\r\n                Password:\r\n                <input\r\n                ref={this.passwordInputRef}\r\n                className=\"form-control login-text\"\r\n                type=\"password\"\r\n                placeholder=\"Enter Password\"\r\n                pattern=\"[A-Za-z0-9!@#$%^&*()_+\\-]+\"\r\n                required={true}\r\n                />\r\n            </label>\r\n            <p className=\"bg-danger\" id=\"feedback\" style={{ fontSize: 16 }} />\r\n            <button\r\n                type=\"submit\"\r\n                className=\"btn-color-theme btn btn-primary btn-block login-btn\">\r\n                <span id=\"login-btn-icon\" className={this.state.loginBtnIcon}/>\r\n                &nbsp;{this.state.loginBtnLabel}\r\n            </button>\r\n            <p>\r\n            <button type=\"button\" className=\"btn btn-link login-link\" \r\n                    onClick={() => {this.setState({showCreateAccountDialog: true});}}>\r\n                Create an account</button> | \r\n                <button type=\"button\" className=\"btn btn-link login-link\"\r\n                        onClick={() => {this.setState({showLookUpAccountDialog: true});}}>\r\n                Reset your password</button>\r\n            </p>  \r\n            {/* <button type=\"button\" className=\"btn btn-github\"\r\n               onClick={() => this.handleOAuthLoginClick(\"github\")}>\r\n              <span className={this.state.githubIcon}></span>&nbsp;\r\n                {this.state.githubLabel}\r\n            </button> */}\r\n            <p>\r\n                <i>Version CptS 489</i>\r\n            </p>\r\n            </form>\r\n            {this.state.showCreateAccountDialog ? \r\n              <CreateEditAccountDialog\r\n                create={true} \r\n                done={this.accountCreateDone}\r\n                cancel={this.cancelCreateAccount} /> : null}\r\n            {this.state.showResetPasswordDialog ? <ResetPasswordDialog /> : null}\r\n        </center>\r\n        </div>\r\n        )\r\n    }\r\n} \r\n\r\nexport default LoginPage;\r\n","import React from 'react';\r\n\r\nclass FileUpload extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n            <center>\r\n              <label>\r\n                File:\r\n                <input name=\"filename\" className=\"form-control form-center\" \r\n                  type=\"file\"/>\r\n              </label>\r\n            <p></p>\r\n            </center>\r\n          </div>            \r\n        );\r\n    }\r\n}\r\n\r\nexport default FileUpload;","import React from 'react';\r\n\r\nclass FreeResponse extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n          answer: \"\"\r\n        }    \r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n            <center>\r\n            <label>Answer:\r\n                <textarea name=\"answer\" className=\"form-control\" rows=\"6\" cols=\"75\" \r\n                placeholder=\"Enter answer here\" value={this.state.answer} \r\n                />\r\n                </label>\r\n            <p></p>\r\n            </center>\r\n          </div>            \r\n        );\r\n    }\r\n}\r\n\r\nexport default FreeResponse;","import React from 'react';\r\n\r\nclass MultipleChoice extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    onAddAnswer = (event) => {\r\n      event.preventDefault();\r\n      console.log(\"Adding another answer\");\r\n    }\r\n\r\n    onRemoveAnswer = (event) => {\r\n      event.preventDefault();\r\n      console.log(\"Remove another answer\");\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div>\r\n            <center>\r\n            <div className=\"mb-3 input-group\" style={{width:\"20%\"}}>\r\n              <div className=\"input-group-prepend\">\r\n                <span className=\"input-group-text\" id=\"basic-addon1\">Answer choice</span>\r\n              </div>\r\n                <input placeholder=\"Input answer...\" aria-label=\"Username\" aria-describedby=\"basic-addon1\" className=\"form-control\"/>\r\n            </div>\r\n              {/* <label>\r\n                Question Title:\r\n                <input name=\"title\" className=\"form-control form-center\" \r\n                  type=\"text\"/>\r\n              </label> */}\r\n            <p></p>\r\n            \r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"col-md-3\" style={{width: \"40%\"}}>\r\n                  <button type=\"button\" style={{fontSize: \"28px\"}} onClick={this.onAddAnswer} \r\n                    className=\"btn btn-primary btn-color-theme\">\r\n                      <span className=\"fa fa-plus\"/>&nbsp;Add Answer\r\n                  </button>\r\n                </div>\r\n                <div className=\"col-md-3\" style={{width: \"40%\"}}>\r\n                  <button  type=\"button\" style={{fontSize: \"28px\"}} onClick={this.onRemoveAnswer} \r\n                    className=\"btn btn-primary btn-color-theme\">\r\n                      <span className=\"fa fa-plus\"/>&nbsp;Remove Answer\r\n                  </button>\r\n                </div>\r\n            </div>            \r\n            <p></p>\r\n            </center>\r\n          </div>            \r\n        );\r\n    }\r\n}\r\n\r\nexport default MultipleChoice;","import React from 'react';\r\nimport FileUpload from './AnswerTypes/FileUpload';\r\nimport FreeResponse from './AnswerTypes/FreeResponse';\r\nimport MultipleChoice from './AnswerTypes/MultipleChoice';\r\n\r\n\r\nconst answerTypes = {};\r\nanswerTypes[\"multipleChoice\"] = MultipleChoice;\r\nanswerTypes[\"shortAnswer\"] = FreeResponse;\r\nanswerTypes[\"fileUpload\"] = FileUpload;\r\n\r\nclass CreateSurvey extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            answerType : \"shortAnswer\",\r\n            question: \"\"\r\n        }     \r\n    }\r\n\r\n    handleChange = (event) => {\r\n        const name = event.target.name; \r\n        this.setState({[name]: event.target.value});\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        console.log(\"Create Question\");\r\n    }\r\n\r\n    render(){\r\n        const AnswerType = answerTypes[this.state.answerType];\r\n        return(\r\n            <form className=\"padded-page\" onSubmit={this.handleSubmit}>\r\n            <center>\r\n              <label>\r\n                Question Title:\r\n                <input name=\"title\" className=\"form-control form-center\" \r\n                  type=\"text\"/>\r\n              </label>\r\n              <p></p>\r\n                <label>Question:\r\n                    <textarea name=\"question\" className=\"form-control\" rows=\"6\" cols=\"75\" \r\n                    placeholder=\"Enter Question here\" value={this.state.question} \r\n                    />\r\n                </label>\r\n            <p></p>\r\n            <p></p>\r\n            <label>Answer Type:\r\n            <select name=\"answerType\" value={this.state.answerType} onChange={this.handleChange} \r\n              className=\"form-control form-center\">\r\n              <option value=\"shortAnswer\">Short Answer</option>\r\n              <option value=\"multipleChoice\">Multiple Choice</option>\r\n              <option value=\"fileUpload\">File Upload</option>\r\n            </select> \r\n            </label>\r\n            <p></p>\r\n            <AnswerType>\r\n\r\n            </AnswerType>\r\n            <p></p>\r\n            <button type=\"submit\" style={{width: \"70%\",fontSize: \"36px\"}} \r\n              className=\"btn btn-primary btn-color-theme\">\r\n                <span className=\"fa fa-plus\"/>&nbsp; Create Question\r\n            </button>\r\n            </center>\r\n          </form>            \r\n        );\r\n    }\r\n}\r\n\r\nexport default CreateSurvey;","import React from 'react';\r\n\r\nclass ActiveQuestions extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <form className=\"padded-page\">\r\n            <center>\r\n                <div class=\"wrapper\">\r\n                    <div className=\"card survey-card\">\r\n                        <div className=\"card-header\">Question 1</div>\r\n                        <div className=\"card-body\">Question Type  <br/>  Content:</div> \r\n                        <div className=\"card-footer\">Course Number  Section</div>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"card survey-card\">\r\n                        <div className=\"card-header\">Question 2</div>\r\n                        <div className=\"card-body\">Question Type  <br/>  Content:</div> \r\n                        <div className=\"card-footer\">Course Number  Section</div>\r\n                    </div>\r\n\r\n                    <div className=\"card survey-card\">\r\n                        <div className=\"card-header\">Question 3</div>\r\n                        <div className=\"card-body\">Question Type  <br/>  Content:</div> \r\n                        <div className=\"card-footer\">Course Number  Section</div>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"card survey-card\">\r\n                        <div className=\"card-header\">Question 4</div>\r\n                        <div className=\"card-body\">Question Type  <br/>  Content:</div> \r\n                        <div className=\"card-footer\">Course Number  Section</div>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"card survey-card\">\r\n                        <div className=\"card-header\">Question 5</div>\r\n                        <div className=\"card-body\">Question Type  <br/>  Content:</div> \r\n                        <div className=\"card-footer\">Course Number  Section</div>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"card survey-card\">\r\n                        <div className=\"card-header\">Question 6</div>\r\n                        <div className=\"card-body\">Question Type  <br/>  Content:</div> \r\n                        <div className=\"card-footer\">Course Number  Section</div>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"card survey-card\">\r\n                        <div className=\"card-header\">Question 7</div>\r\n                        <div className=\"card-body\">Question Type  <br/>  Content:</div> \r\n                        <div className=\"card-footer\">Course Number  Section</div>\r\n                    </div>\r\n                </div>\r\n            </center>\r\n          </form>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default ActiveQuestions;","import React from 'react';\r\n//import ConfirmDeleteRound from './ConfirmDeleteRound.js';\r\n// import AppMode from './../AppMode.js';\r\n\r\nclass SubmittedResponse extends React.Component {\r\n\r\n//   constructor() {\r\n//     super();\r\n//     this.state = {showConfirmDelete: false};\r\n//   }\r\n\r\n//   //editRound -- Triggered when the user clicks the edit button for a given\r\n//   //round. The id param is the unique property that identifies the round.\r\n//   //Set the state variable representing the id of the round to be edited and\r\n//   //then switch to the ROUNDS_EDITROUND mode to allow the user to edit the\r\n//   //chosen round.\r\n//   editRound = (id) => {\r\n//     this.props.setEditId(id);\r\n//     this.props.changeMode(AppMode.ROUNDS_EDITROUND);\r\n//   }\r\n\r\n//   //deleteRound -- Triggered when the user clicks on the \"Yes, Delete\"\r\n//   //button in the Confirm Delete dialog box. It executes the deletion and\r\n//   //closes the dialog box.\r\n//   deleteRound = () => {\r\n//     this.props.deleteRound();\r\n//     this.setState({showConfirmDelete: false});\r\n//   }\r\n\r\n\r\n//   //confirmDelete -- Triggered when the user clicks the delete button\r\n//   //for a given round. The id paam is the unique property that \r\n//   //identifies the round. Set the state variable representing the id\r\n//   //of the round to be deleted and then present a dialog box asking\r\n//   //the user to confirm the deletion.\r\n//   confirmDelete = (id) => {\r\n//     this.props.setDeleteId(id);\r\n//     this.setState({showConfirmDelete: true});\r\n//   }\r\n\r\n\r\n  //renderTable -- render an HTML table displaying the rounds logged\r\n  //by the current user and providing buttons to view/edit and delete each round.\r\n//   renderTable = () => {\r\n//   let table = [];\r\n//   for (let r = 0; r < this.props.rounds.length; ++r) {\r\n//     table.push(\r\n//       <tr key={r}>\r\n//         <td>{this.props.rounds[r].date.substring(0,10)}</td>\r\n//         <td>{this.props.rounds[r].course}</td>\r\n//         <td>{(Number(this.props.rounds[r].strokes) + \r\n//               Number(this.props.rounds[r].minutes)) +\r\n//               \":\" + (this.props.rounds[r].seconds < 10 ?  \r\n//                 \"0\" + this.props.rounds[r].seconds :\r\n//                 this.props.rounds[r].seconds) + \" (\" + \r\n//               this.props.rounds[r].strokes + \r\n//               \" in \" + this.props.rounds[r].minutes + \":\" + \r\n//               (this.props.rounds[r].seconds < 10 ?  \r\n//                 \"0\" + this.props.rounds[r].seconds :\r\n//                 this.props.rounds[r].seconds) + \")\"}\r\n//         </td>\r\n//         <td><button onClick={this.props.menuOpen ? null : () => \r\n//           this.editRound(r)}>\r\n//               <span className=\"fa fa-eye\"></span></button></td>\r\n//         <td><button onClick={this.props.menuOpen ? null : \r\n//           () => this.confirmDelete(r)}>\r\n//               <span className=\"fa fa-trash\"></span></button></td>\r\n//       </tr> \r\n//     );\r\n//   }\r\n//   return table;\r\n//   }\r\n\r\n  //render--render the entire rounds table with header, displaying a \"No\r\n  //Rounds Logged\" message in case the table is empty.\r\n  render() {\r\n    return(\r\n    <div className=\"padded-page\">\r\n      <h1></h1>\r\n      <table className=\"table table-hover\">\r\n        <thead className=\"thead-light\">\r\n        <tr>\r\n          <th>First Name</th>\r\n          <th>Last Name</th>\r\n          <th>Response</th>\r\n          <th>View/Edit...</th>\r\n          <th>Delete</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n        </tbody>\r\n      </table>\r\n      {/* {this.state.showConfirmDelete ?\r\n        <ConfirmDeleteRound \r\n          close={() => this.setState({showConfirmDelete: false})} \r\n          deleteRound={this.deleteRound} /> : null} */}\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SubmittedResponse;\r\n","import React from 'react';\r\nimport SearchField from 'react-search-field'\r\n//import ConfirmDeleteRound from './ConfirmDeleteRound.js';\r\n// import AppMode from './../AppMode.js';\r\n\r\nclass SubmittedResponse extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n    onSearchClicked = () => {\r\n        console.log(\"onSearchClicked\");\r\n    }\r\n  //render--render the entire rounds table with header, displaying a \"No\r\n  //Rounds Logged\" message in case the table is empty.\r\n  render() {\r\n    return(\r\n    <div className=\"padded-page\">\r\n      <center>\r\n      <h1></h1>\r\n        \r\n         <div className=\"input-group center-search\" style={{justifyContent: \"center\", paddingBottom: \"20px\"}}>\r\n            <SearchField\r\n              classNames=\"search-width\"\r\n              placeholder=\"Search question\"\r\n              onSearchClick={this.onSearchClicked}\r\n          />\r\n             {/* <span className=\"input-group-prepend\">\r\n                 <div className=\"input-group-text bg-transparent border-right-0\"><i className=\"fa fa-search\"></i></div>\r\n             </span>\r\n             <input className=\"form-control py-2 border-left-0 border\" placeholder=\"Search Rounds\" type=\"search\" value=\"\" id=\"searchRounds\"\r\n             onkeyup=\"searchRoundsTable(this.value)\" onSearch onsearch=\"searchRoundsTable(this.value)\"/> */}\r\n         </div>\r\n      <table className=\"table table-hover\">\r\n        <thead className=\"thead-light\">\r\n        <tr>\r\n          <th>Question Title</th>\r\n          <th>Question</th>\r\n          <th>Answer Type</th>\r\n          <th>View/Edit...</th>\r\n          <th>Delete</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n        </tbody>\r\n      </table>\r\n      </center>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SubmittedResponse;","import React from 'react';\r\nimport CreateSurvey from './SurveyManagement/CreateSurvey.js';\r\nimport ActiveQuestions from './SurveyManagement/ActiveQuestions.js'\r\nimport SubmittedResponse from './SurveyManagement/SubmittedResponse.js'\r\nimport AppMode from './../AppMode.js'\r\nimport SearchQestions from './SurveyManagement/SearchQuestions.js'\r\n\r\nclass SurveyManagementPage extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        switch(this.props.mode) {\r\n            case AppMode.SURVEY_MANAGEMENT:\r\n                return (\r\n                    <>\r\n                    <ActiveQuestions>\r\n                    </ActiveQuestions>\r\n                    </>\r\n                );\r\n            case AppMode.SURVEY_MANAGEMENT_CREATE:\r\n                return (\r\n                    <CreateSurvey>\r\n                    </CreateSurvey>\r\n                );\r\n            case AppMode.SURVEY_MANAGEMENT_SEARCH:\r\n                return (\r\n                    <SearchQestions>\r\n                    </SearchQestions>\r\n                );\r\n            case AppMode.SURVEY_MANAGEMENT_RESPONSES:\r\n                return (\r\n                    <SubmittedResponse>\r\n                    </SubmittedResponse>\r\n                );\r\n        }\r\n    }   \r\n}\r\n\r\nexport default SurveyManagementPage;","import React from 'react';\r\n\r\nclass ConfirmDeleteRound extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <center>\r\n                <h3 className=\"modal-title\"><b>Confirm Round Deletion</b></h3>\r\n              </center>\r\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\r\n                 &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p>Do you really want to delete this round?</p>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteRound}>\r\n                  Yes, Delete</button>\r\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\r\n                  No, Cancel</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmDeleteRound;","import React from 'react';\r\nimport ConfirmDeleteRound from './ConfirmDeleteRound.js';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass RoundsTable extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {showConfirmDelete: false};\r\n  }\r\n\r\n  //editRound -- Triggered when the user clicks the edit button for a given\r\n  //round. The id param is the unique property that identifies the round.\r\n  //Set the state variable representing the id of the round to be edited and\r\n  //then switch to the ROUNDS_EDITROUND mode to allow the user to edit the\r\n  //chosen round.\r\n  editRound = (id) => {\r\n    this.props.setEditId(id);\r\n    this.props.changeMode(AppMode.ROUNDS_EDITROUND);\r\n  }\r\n\r\n  //deleteRound -- Triggered when the user clicks on the \"Yes, Delete\"\r\n  //button in the Confirm Delete dialog box. It executes the deletion and\r\n  //closes the dialog box.\r\n  deleteRound = () => {\r\n    this.props.deleteRound();\r\n    this.setState({showConfirmDelete: false});\r\n  }\r\n\r\n\r\n  //confirmDelete -- Triggered when the user clicks the delete button\r\n  //for a given round. The id paam is the unique property that \r\n  //identifies the round. Set the state variable representing the id\r\n  //of the round to be deleted and then present a dialog box asking\r\n  //the user to confirm the deletion.\r\n  confirmDelete = (id) => {\r\n    this.props.setDeleteId(id);\r\n    this.setState({showConfirmDelete: true});\r\n  }\r\n\r\n\r\n  //renderTable -- render an HTML table displaying the rounds logged\r\n  //by the current user and providing buttons to view/edit and delete each round.\r\n  renderTable = () => {\r\n  let table = [];\r\n  for (let r = 0; r < this.props.rounds.length; ++r) {\r\n    table.push(\r\n      <tr key={r}>\r\n        <td>{this.props.rounds[r].date.substring(0,10)}</td>\r\n        <td>{this.props.rounds[r].course}</td>\r\n        <td>{(Number(this.props.rounds[r].strokes) + \r\n              Number(this.props.rounds[r].minutes)) +\r\n              \":\" + (this.props.rounds[r].seconds < 10 ?  \r\n                \"0\" + this.props.rounds[r].seconds :\r\n                this.props.rounds[r].seconds) + \" (\" + \r\n              this.props.rounds[r].strokes + \r\n              \" in \" + this.props.rounds[r].minutes + \":\" + \r\n              (this.props.rounds[r].seconds < 10 ?  \r\n                \"0\" + this.props.rounds[r].seconds :\r\n                this.props.rounds[r].seconds) + \")\"}\r\n        </td>\r\n        <td><button onClick={this.props.menuOpen ? null : () => \r\n          this.editRound(r)}>\r\n              <span className=\"fa fa-eye\"></span></button></td>\r\n        <td><button onClick={this.props.menuOpen ? null : \r\n          () => this.confirmDelete(r)}>\r\n              <span className=\"fa fa-trash\"></span></button></td>\r\n      </tr> \r\n    );\r\n  }\r\n  return table;\r\n  }\r\n\r\n  //render--render the entire rounds table with header, displaying a \"No\r\n  //Rounds Logged\" message in case the table is empty.\r\n  render() {\r\n    return(\r\n    <div className=\"padded-page\">\r\n      <h1></h1>\r\n      <table className=\"table table-hover\">\r\n        <thead className=\"thead-light\">\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>Course</th>\r\n          <th>Score</th>\r\n          <th>View/Edit...</th>\r\n          <th>Delete</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n          {Object.keys(this.props.rounds).length === 0 ? \r\n          <tr>\r\n          <td colSpan=\"5\" style={{fontStyle: \"italic\"}}>No rounds logged</td>\r\n          </tr> : this.renderTable()\r\n          }\r\n        </tbody>\r\n      </table>\r\n      {this.state.showConfirmDelete ?\r\n        <ConfirmDeleteRound \r\n          close={() => this.setState({showConfirmDelete: false})} \r\n          deleteRound={this.deleteRound} /> : null}\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RoundsTable;\r\n","import React from 'react';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass RoundForm extends React.Component {\r\n  constructor(props) {\r\n  super(props);\r\n  //Create date object for today, taking time zone into consideration\r\n  let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\r\n  //store date as ISO string\r\n  if (this.props.mode === AppMode.ROUNDS_LOGROUND) {\r\n    //If logging a new round, the starting state is a default round with\r\n    //today's date.\r\n    this.state = {date:  today.toISOString().substr(0,10), \r\n                  course: \"\",\r\n                  type: \"practice\",\r\n                  holes: \"18\",\r\n                  strokes: 80,\r\n                  minutes: 50,\r\n                  seconds: \"00\",\r\n                  notes: \"\",\r\n                  faIcon: \"fa fa-save\",\r\n                  btnLabel: \"Save Round Data\"}\r\n  } else {\r\n    //if editing an existing round, the starting state is the round's\r\n    //current data\r\n    let thisRound = {...this.props.startData};\r\n    delete thisRound.id;\r\n    thisRound.faIcon = \"fa fa-edit\";\r\n    thisRound.btnLabel = \"Update Round Data\";\r\n    this.state = thisRound;\r\n  }\r\n}\r\n  \r\n  \r\n    handleChange = (event) => {\r\n        const name = event.target.name;\r\n        if (name === \"seconds\") {\r\n          let newSec = (event.target.value.length < 2 ? \"0\" + \r\n            event.target.value : event.target.value);\r\n          let newSGS = this.computeSGS(this.state.strokes, this.state.minutes, \r\n                                       newSec);\r\n          this.setState({seconds: newSec, SGS: newSGS});\r\n        } else if (name === \"strokes\") {\r\n          let newStrokes = event.target.value;\r\n          let newSGS = this.computeSGS(newStrokes, this.state.minutes, \r\n            this.state.seconds);\r\n          this.setState({strokes: newStrokes, SGS: newSGS});\r\n        } else if (name === \"minutes\") {\r\n            let newMin = event.target.value;\r\n            let newSGS = this.computeSGS(this.state.strokes, newMin, \r\n              this.state.seconds);\r\n            this.setState({minutes: newMin, SGS: newSGS});\r\n        } else {\r\n          this.setState({[name]: event.target.value});\r\n        }\r\n    }\r\n  \r\n  \r\n    //handleSubmit -- When the user clicks on the button to save/update the\r\n    //round, start the spinner and invoke the parent component's saveRound\r\n    //method to do the actual work. Note that saveRound is set to the correct\r\n    //parent method based on whether the user is logging a new round or editing\r\n    //an existing round.\r\n    handleSubmit = (event) => {\r\n        //start spinner\r\n        this.setState({faIcon: \"fa fa-spin fa-spinner\",\r\n                        btnLabel: (this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                                    \"Saving...\" : \"Updating...\")});\r\n        //Prepare current round data to be saved\r\n        let roundData = this.state;\r\n        delete roundData.faIcon;\r\n        delete roundData.btnLabel;\r\n        //call saveRound on 1 second delay to show spinning icon\r\n        setTimeout(this.props.saveRound,1000,roundData); \r\n        event.preventDefault(); \r\n        }\r\n  \r\n\r\n    computeSGS = (strokes, min, sec) => {\r\n      return (Number(strokes) + Number(min)) \r\n                  + \":\" + sec;\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <form className=\"padded-page\" onSubmit={this.handleSubmit}>\r\n          <center>\r\n            <label>\r\n              Date:\r\n              <input name=\"date\" className=\"form-control form-center\" \r\n                type=\"date\" value={this.state.date} onChange={this.handleChange} />\r\n            </label>\r\n            <p></p>\r\n            <label>\r\n              Course:\r\n              <input name=\"course\" className=\"form-control form-center\" type=\"text\"\r\n                value={this.state.course} onChange={this.handleChange}\r\n                placeholder=\"Course played\" size=\"50\" maxLength=\"50\" />\r\n            </label>\r\n          <p></p>\r\n          <label>Type:\r\n          <select name=\"type\" value={this.state.type} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"practice\">Practice</option>\r\n            <option value=\"tournament\">Tournament</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Holes:\r\n          <select name=\"holes\" value={this.state.holes} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"9\">9</option>\r\n            <option value=\"18\">18</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Strokes:\r\n          <input name=\"strokes\" className=\"form-control form-center\" type=\"number\" \r\n            min=\"9\" max=\"200\" value={this.state.strokes} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Time: <br></br>\r\n          <input name=\"minutes\" type=\"number\" size=\"3\"\r\n            min=\"10\" max=\"400\" value={this.state.minutes}\r\n            onChange={this.handleChange} />:  \r\n          <input name=\"seconds\" type=\"number\" size=\"2\"\r\n            min=\"0\" max=\"60\" value={this.state.seconds} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Speedgolf Score: <br></br>\r\n              <input name=\"SGS\" className=\"form-center\" type=\"text\" size=\"6\" \r\n                disabled={true} value={this.computeSGS(this.state.strokes,this.state.minutes,this.state.seconds)} />\r\n          </label>\r\n          <p></p>\r\n          <label>Notes:\r\n              <textarea name=\"notes\" className=\"form-control\" rows=\"6\" cols=\"75\" \r\n                placeholder=\"Enter round notes\" value={this.state.notes} \r\n                onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <p></p>\r\n          <button type=\"submit\" style={{width: \"70%\",fontSize: \"36px\"}} \r\n            className=\"btn btn-primary btn-color-theme\">\r\n              <span className={this.state.faIcon}/>&nbsp;{this.state.btnLabel}\r\n          </button>\r\n          </center>\r\n        </form>\r\n      );\r\n    }\r\n}\r\n\r\nexport default RoundForm;","import React from 'react';\r\n\r\nclass FloatingButton extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className=\"floatbtn\" onClick={this.props.handleClick}>\r\n          <span className=\"floatbtn-icon fa fa-plus\"></span>\r\n        </div>  \r\n      );\r\n    }\r\n}\r\n\r\nexport default FloatingButton;\r\n","//Rounds -- A parent component for the app's \"rounds\" mode.\r\n//Manages the rounds data for the current user and conditionally renders the\r\n//appropriate rounds mode page based on App's mode, which is passed in as a prop.\r\n\r\nimport React from 'react';\r\nimport AppMode from './../AppMode.js';\r\nimport RoundsTable from './RoundsTable.js';\r\nimport RoundForm from './RoundForm.js';\r\nimport FloatingButton from './FloatingButton.js';\r\n\r\nclass Rounds extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor() {\r\n        super();\r\n        this.deleteId = \"\";\r\n        this.editId = \"\";\r\n        this.state = {errorMsg: \"\"};           \r\n    }\r\n\r\n    //addRound -- Given an object newData containing a new round, use the \r\n    //server POST route to add the new round to the database. If the add is\r\n    //successful, call on the refreshOnUpdate() method to force the parent\r\n    //App component to refresh its state from the database and re-render itself,\r\n    //allowing the change to be propagated to the Rounds table. Then switch\r\n    //the mode back to AppMode.ROUNDS since the user is done adding a round.\r\n    addRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'POST',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.setState({errorMsg: \"\"});\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n    //editRound -- Given an object newData containing updated data on an\r\n    //existing round, update the current user's round in the database. \r\n    //toggle the mode back to AppMode.ROUNDS since the user is done editing the\r\n    //round. \r\n    editRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.editId]._id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'PUT',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n\r\n    //deleteRound -- Delete the current user's round uniquely identified by\r\n    //this.state.deleteId, delete from the database, and reset deleteId to empty.\r\n    deleteRound = async () => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.deleteId]._id;\r\n        const res = await fetch(url, {method: 'DELETE'}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: \"An error occurred when attempting to delete round from database: \" \r\n            + msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }  \r\n    }\r\n \r\n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\r\n    //the user is considering deleting.\r\n    setDeleteId = (val) => {\r\n        this.deleteId = val;\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n\r\n    //setEditId -- Capture in this.state.editId the unique id of the item\r\n    //the user is considering editing.\r\n    setEditId = (val) => {\r\n        this.editId = val;\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n\r\n    closeErrorMsg = () => {\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n    \r\n    //render -- Conditionally render the Rounds mode page as either the rounds\r\n    //table, the rounds form set to obtain a new round, or the rounds form set\r\n    //to edit an existing round.\r\n    render() {\r\n        switch(this.props.mode) {\r\n            case AppMode.ROUNDS:\r\n                return (\r\n                    <>\r\n                    {this.state.errorMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.errorMsg}</span>\r\n                       <button className=\"modal-close\" onClick={this.closeErrorMsg}>\r\n                          <span className=\"fa fa-times\"></span>\r\n                        </button></div>: null}\r\n                    <RoundsTable \r\n                        rounds={this.props.userObj.rounds}\r\n                        setEditId={this.setEditId}\r\n                        setDeleteId={this.setDeleteId}\r\n                        deleteRound={this.deleteRound}\r\n                        changeMode={this.props.changeMode}\r\n                        menuOpen={this.props.menuOpen} /> \r\n                    <FloatingButton\r\n                        handleClick={() => \r\n                        this.props.changeMode(AppMode.ROUNDS_LOGROUND)}\r\n                        menuOpen={this.props.menuOpen}\r\n                        icon={\"fa fa-plus\"} />\r\n                    </>\r\n                );\r\n            case AppMode.ROUNDS_LOGROUND:\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={\"\"} \r\n                        saveRound={this.addRound} />\r\n                );\r\n            case AppMode.ROUNDS_EDITROUND:\r\n                let thisRound = {...this.props.userObj.rounds[this.editId]};\r\n                thisRound.date = thisRound.date.substr(0,10);\r\n                if (thisRound.seconds < 10) {\r\n                    thisRound.seconds = \"0\" + thisRound.seconds;\r\n                } \r\n                delete thisRound.SGS;\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={thisRound} \r\n                        saveRound={this.editRound} />\r\n                );\r\n        }\r\n    }\r\n\r\n}   \r\n\r\nexport default Rounds;\r\n","import React from 'react';\r\n\r\nclass CoursesPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"padded-page\">\r\n            <center>\r\n            <h1 >Courses</h1>\r\n            <h2>This page is under construction.</h2>\r\n            <img src=\"https://dl.dropboxusercontent.com/s/qpjhy9x9gwdxpob/SpeedScoreLogo64Trans.png\" \r\n             height=\"200\" width=\"200\"/>\r\n            <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\r\n            </center>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default CoursesPage;","import React from 'react';\r\n\r\nclass AboutBox extends React.Component {\r\n\r\nrender() {\r\n    return (\r\n        <div className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-dialog modal-lg\">\r\n            <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n                <h3>About SpeedScore</h3>\r\n                <button className=\"modal-close\" onClick={this.props.close}>\r\n                    &times;\r\n                </button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n                <img\r\n                src=\"https://dl.dropboxusercontent.com/s/awuwr1vpuw1lkyl/SpeedScore4SplashLogo.png\"\r\n                height=\"200\" width=\"200\"/>\r\n                <h3>The World's First and Only Suite of Apps for\r\n                Speedgolf</h3>\r\n                <p>Version CptS 489 Fa20 Complete (MERN)<br/>\r\n                &copy; 2017-20 The Professor of Speedgolf. All rights\r\n                reserved.\r\n                </p>\r\n                <div style={{textAlign: \"left\"}}>\r\n                <p>SpeedScore apps support</p>\r\n                <ul>\r\n                <li>live touranment scoring (<i>SpeedScore Live&reg;</i>)</li>\r\n                <li>tracking personal speedgolf rounds and sharing results\r\n                (<i>SpeedScore Track&reg;</i>)</li>\r\n                <li>finding speedgolf-friendly courses, booking tee times, and\r\n                paying to play speedgolf by the minute (<i>SpeedScore\r\n                Play&reg;</i>)</li>\r\n                </ul>\r\n                <p>SpeedScore was first developed by Dr. Chris Hundhausen,\r\n                associate professor of computer science at Washington State\r\n                University and the <i>Professor of Speedgolf</i>, with support\r\n                from Scott Dawley, CEO of Speedgolf USA, LLC.</p>\r\n                <p>For more information on SpeedScore, visit <a\r\n                href=\"http://speedscore.live\" target=\"_blank\">SpeedScore's web\r\n                site</a>. For more information on speedgolf, visit <a\r\n                href=\"http://playspeedgolf.com\"\r\n                target=\"_blank\">playspeedgolf.com</a> and <a\r\n                href=\"http://usaspeedgolf.com\" target=\"_blank\">Speedgolf\r\n                USA</a>.</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                <button className=\"btn btn-primary btn-color-theme\"\r\n                onClick={this.props.close}>OK</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default AboutBox;","import React from 'react';\r\nimport NavBar from './NavBar.js';\r\nimport SideMenu from './SideMenu.js';\r\nimport ModeBar from './ModeBar.js';\r\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js'\r\nimport LoginPage from './LoginPage.js';\r\nimport AppMode from \"./../AppMode.js\"\r\nimport SurveyManagementPage from './SurveyManagementPage.js';\r\nimport Rounds from './Rounds.js';\r\nimport CoursesPage from './CoursesPage.js';\r\nimport AboutBox from './AboutBox.js';\r\n\r\nconst modeTitle = {};\r\nmodeTitle[AppMode.LOGIN] = \"Welcome to Kliks\";\r\nmodeTitle[AppMode.SURVEY_MANAGEMENT] = \"Survey Management\";\r\nmodeTitle[AppMode.ROUNDS] = \"My Rounds\";\r\nmodeTitle[AppMode.ROUNDS_LOGROUND] = \"Log New Round\";\r\nmodeTitle[AppMode.ROUNDS_EDITROUND] = \"Edit Round\";\r\nmodeTitle[AppMode.COURSES] = \"Courses\";\r\n\r\nconst modeToPage = {};\r\n\r\n/*  Login/Register Pages */\r\nmodeToPage[AppMode.LOGIN] = LoginPage;\r\n\r\n/*  Survey/Responses/Questions Pages */\r\nmodeToPage[AppMode.SURVEY_MANAGEMENT] = SurveyManagementPage;\r\nmodeToPage[AppMode.SURVEY_MANAGEMENT_RESPONSES] = SurveyManagementPage;\r\nmodeToPage[AppMode.SURVEY_MANAGEMENT_CREATE] = SurveyManagementPage;\r\nmodeToPage[AppMode.SURVEY_MANAGEMENT_SEARCH] = SurveyManagementPage;\r\n\r\n/*  Dashboard Pages */\r\nmodeToPage[AppMode.ROUNDS] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_LOGROUND] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_EDITROUND] = Rounds;\r\n\r\n/*  Course Pages */\r\nmodeToPage[AppMode.COURSES] = CoursesPage;\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {mode: AppMode.LOGIN,\r\n                  menuOpen: false,\r\n                  authenticated: false,\r\n                  userObj: {displayName: \"\", profilePicURL: \"\"},\r\n                  editAccount: false,\r\n                  showEditAccountDialog: false,\r\n                  statusMsg: \"\",\r\n                  showAboutDialog: false\r\n                 };\r\n  }\r\n\r\n  //componentDidMount\r\n  componentDidMount() {\r\n    if (!this.state.authenticated) { \r\n      //Use /auth/test route to (re)-test authentication and obtain user data\r\n      fetch(\"/auth/test\")\r\n        .then((response) => response.json())\r\n        .then((obj) => {\r\n          if (obj.isAuthenticated) {\r\n            this.setState({\r\n              userObj: obj.user,\r\n              authenticated: true,\r\n              mode: AppMode.SURVEY_MANAGEMENT //We're authenticated so can get into the app.\r\n            });\r\n          }\r\n        }\r\n      )\r\n    } \r\n  }\r\n\r\n  //refreshOnUpdate(newMode) -- Called by child components when user data changes in \r\n  //the database. The function calls the users/:userid (GET) route to update \r\n  //the userObj state var based on the latest database changes, and sets the \r\n  //mode state var is set to newMode. After this method is called, the\r\n  //App will re-render itself, forcing the new data to \r\n  //propagate to the child components when they are re-rendered.\r\n  refreshOnUpdate = async(newMode) => {\r\n    let response = await fetch(\"/users/\" + this.state.userObj.id);\r\n    response = await response.json();\r\n    const obj = JSON.parse(response);\r\n    this.setState({\r\n      userObj: obj,\r\n      mode: newMode\r\n    });\r\n  }\r\n\r\n\r\n  handleChangeMode = (newMode) => {\r\n    this.setState({mode: newMode});\r\n  }\r\n\r\n  openMenu = () => {\r\n    this.setState({menuOpen : true});\r\n  }\r\n  \r\n  closeMenu = () => {\r\n    this.setState({menuOpen : false});\r\n  }\r\n\r\n  toggleMenuOpen = () => {\r\n    this.setState(prevState => ({menuOpen: !prevState.menuOpen}));\r\n  }\r\n\r\n  setUserId = (Id) => {\r\n    this.setState({userId: Id,\r\n                   authenticated: true});\r\n  }\r\n\r\n  showEditAccount = () => {\r\n    this.setState({showEditAccountDialog: true});\r\n\r\n  }\r\n\r\n  cancelEditAccount = () => {\r\n    this.setState({showEditAccountDialog: false});\r\n  }\r\n\r\n  //editAccountDone -- called after successful edit or\r\n  //deletion of user account. msg contains the status\r\n  //message and deleted indicates whether an account was\r\n  //edited (deleted == false) or deleted (deleted == true)\r\n  editAccountDone = (msg, deleted) => {\r\n    if (deleted) {\r\n      this.setState({showEditAccountDialog: false,\r\n                     statusMsg: msg,\r\n                     mode: AppMode.LOGIN});\r\n      } else {\r\n        this.setState({showEditAccountDialog: false,\r\n          statusMsg: msg});\r\n      }\r\n  }\r\n\r\n  closeStatusMsg = () => {\r\n    this.setState({statusMsg: \"\"});\r\n  }\r\n\r\n  render() {\r\n    const ModePage = modeToPage[this.state.mode];\r\n    return (\r\n      <div className=\"padded-page\">\r\n        {this.state.showAboutDialog ? \r\n          <AboutBox close={() => this.setState({showAboutDialog: false})}/> : null}\r\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\">\r\n              <span>{this.state.statusMsg}</span>\r\n              <button className=\"modal-close\" onClick={this.closeStatusMsg}>\r\n                  <span className=\"fa fa-times\"></span></button></div> : null}\r\n        {this.state.showEditAccountDialog ? \r\n            <CreateEditAccountDialog \r\n              create={false} \r\n              userId={this.state.userObj.id} \r\n              done={this.editAccountDone} \r\n              cancel={this.cancelEditAccount}/> : null}\r\n        <NavBar \r\n          title={modeTitle[this.state.mode]} \r\n          mode={this.state.mode}\r\n          changeMode={this.handleChangeMode}\r\n          menuOpen={this.state.menuOpen}\r\n          toggleMenuOpen={this.toggleMenuOpen}/>\r\n          <SideMenu \r\n            menuOpen = {this.state.menuOpen}\r\n            mode={this.state.mode}\r\n            toggleMenuOpen={this.toggleMenuOpen}\r\n            displayName={this.state.userObj.displayName}\r\n            profilePicURL={this.state.userObj.profilePicURL}\r\n            localAccount={this.state.userObj.authStrategy === \"local\"}\r\n            editAccount={this.showEditAccount}\r\n            logOut={() => this.handleChangeMode(AppMode.LOGIN)}\r\n            changeMode={this.handleChangeMode}\r\n            showAbout={() => {this.setState({showAboutDialog: true})}}/>\r\n          <ModeBar \r\n            mode={this.state.mode} \r\n            changeMode={this.handleChangeMode}\r\n            menuOpen={this.state.menuOpen}/>\r\n          <ModePage \r\n            menuOpen={this.state.menuOpen}\r\n            mode={this.state.mode}\r\n            changeMode={this.handleChangeMode}\r\n            userObj={this.state.userObj}\r\n            refreshOnUpdate={this.refreshOnUpdate}/>\r\n      </div>\r\n    );  \r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap-social/bootstrap-social.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport './styles/index.css';\r\nimport App from './components/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}