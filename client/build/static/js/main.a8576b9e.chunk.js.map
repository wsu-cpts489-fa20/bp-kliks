{"version":3,"sources":["favicon.png","AppMode.js","components/NavBar.js","components/SideMenu.js","components/ModeBar.js","components/ConfirmDeleteAccount.js","components/CreateEditAccountDialog.js","components/ResetPasswordDialog.js","components/LookUpAccountDialog.js","components/SecurityQuestionDialog.js","components/LoginPage.js","components/SurveyManagement/AnswerTypes/FileUpload.js","components/SurveyManagement/AnswerTypes/FreeResponse.js","components/SurveyManagement/AnswerTypes/MultipleChoice.js","components/SurveyManagement/CreateQuestion.js","components/SurveyManagement/CreateSurvey.js","components/SurveyManagement/ActiveQuestions.js","components/SurveyManagement/DeleteResponseModal.js","components/SurveyManagement/viewResponseModal.js","components/SurveyManagement/SubmittedResponse.js","components/SurveyManagement/SearchQuestions.js","components/SurveyManagement/SearchSurveys.js","components/SurveyManagementPage.js","components/ConfirmDeleteRound.js","components/RoundsTable.js","components/RoundForm.js","components/FloatingButton.js","components/Rounds.js","components/CourseManagement/StudentsTable.js","components/CourseManagement/DeleteCourse.js","components/CourseManagement/EditCourse.js","components/CourseManagement/CoursesTable.js","components/CourseManagement/UploadStudents.js","components/CourseManagement/AddCourse.js","components/CourseManagement/CoursesPage.js","components/AboutBox.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","AppMode","LOGIN","SURVEY_MANAGEMENT","SURVEY_MANAGEMENT_RESPONSES","SURVEY_MANAGEMENT_CREATE","SURVEY_MANAGEMENT_EDIT","SURVEY_MANAGEMENT_CREATE_SURVEY","SURVEY_MANAGEMENT_SEARCH","SURVEY_MANAGEMENT_SEARCH_SURVEYS","ROUNDS","ROUNDS_LOGROUND","ROUNDS_EDITROUND","COURSES","COURSE_CREATE","COURSES_DELETE","COURSES_EDIT","STUDENTS","STUDENTS_UPLOAD","STUDENTS_CREATE","Object","freeze","NavBar","getMenuBtnIcon","props","mode","menuOpen","handleMenuBtnClick","changeMode","toggleMenuOpen","id","className","onClick","this","src","logo","alt","height","width","title","React","Component","SideMenu","setGeneralMode","renderModeMenuItems","e","preventDefault","COURSES_CREATE","userType","profilePicURL","displayName","localAccount","editAccount","showAbout","logOut","ModeBar","ConfirmDeleteAccount","handleChange","match","emailRef","current","value","email","state","emailMatches","setState","createRef","focus","role","close","type","ref","onChange","deleteAccount","disabled","CreateEditAccountDialog","checkDataValidity","accountName","endsWith","newUserRef","setCustomValidity","password","passwordRepeat","repeatPassRef","event","formUpdated","origAccountInfo","formIsUpdated","target","name","length","self","reader","FileReader","readAsDataURL","profilePicRef","files","addEventListener","result","console","log","updateField","updateVal","securityQuestion","securityAnswer","setDefaultuserType","handleSubmit","a","userData","url","create","fetch","headers","method","body","JSON","stringify","res","status","done","text","resText","confirmDelete","confirmDeleteAccount","userId","json","parse","cancel","onSubmit","autocomplete","size","placeholder","pattern","required","onBlur","accept","profilePic","profilePicDataURL","rows","cols","maxLength","ResetPasswordDialog","resetPasswordRef","resetPasswordRepeatRef","resetPassword","errorMsg","checkForSubmit","code","cancelResetPassword","onKeyUp","LookUpAccountDialog","handleLookUpAccount","response","obj","authStrategy","getSecurityAnswer","SecurityQuestionDialog","securityAnswerRef","answer","getNewPassword","readOnly","question","LoginPage","handleLoginSubmit","loginBtnIcon","loginBtnLabel","emailInputRef","passwordInputRef","window","open","statusMsg","accountCreateDone","msg","showCreateAccountDialog","cancelCreateAccount","resetUserId","resetQ","resetA","showLookUpAccountDialog","showSecurityQuestionDialog","showResetPaswordDialog","handleOAuthLogin","provider","handleOAuthLoginClick","setTimeout","pw","showResetPasswordDialog","deleted","closeStatusMsg","githubIcon","githubLabel","loginMsg","newAccountCreated","htmlFor","style","padding","fontSize","FileUpload","onFileChange","setAnswer","file","fileRef","setAcceptableAnswerTypes","selectedOptions","newSelectedOptions","indexOf","push","splice","toString","multiple","fileObj","FreeResponse","onResponseChange","MultipleChoice","onAddAnswer","answers","strAnswers","map","element","onRemoveAnswer","pop","getAnswers","index","onAnswerTextChange","aria-label","aria-describedby","Number","answerTypes","CreateQuestion","newQuestion","questionID","uuid","questionTitle","questionText","questionType","answerType","questionAnswers","acceptableAnswerTypes","questionActive","active","responses","saveQuestion","surveyID","onAddSurvey","newTypes","getSurveys","surveys","key","surveyTitle","newAnswer","switchHandler","handleDropdownChange","dropdownOfSurveys","surveySelectionRef","questionTextRef","questionTitleRef","today","Date","now","getTimezoneOffset","date","toISOString","substr","dateRef","numberOfSurveys","submitIcon","submitLabel","startData","AnswerType","minLength","textAlign","CreateSurvey","dropdownOfCourses","newSurvey","surveyDate","courseID","saveSurvey","getCourses","courses","userObj","courseSemester","courseYear","courseName","courseNumber","surveyTitleRef","courseSelectionRef","surveyDateRef","addSurvey","defaultValue","ActiveQuestions","class","DeleteResponseModal","deleteResponse","responseItem","responseId","survey","closeDeleteResponseModal","closeModal","tabindex","aria-labelledby","aria-hidden","data-dismiss","ViewResponse","handleAnswers","elements","forEach","questions","allResponses","showConfirmDelete","itemID","tabIndex","closeResponse","for","surveyResponse","SubmittedResponse","renderResponseTable","table","responseType","responseDateTime","viewResponse","confirmDeleteResponse","rowId","responseKeys","parseResponseRowId","find","showResponseModal","editRowId","split","showDeleteResponseModal","removeResponse","getQuestions","searchResponseTable","keyCode","searchKey","onSearch","searchTerm","oldResponses","newResponses","rowString","toUpperCase","sortTable","searchCriterionCallBack","sort","onSearchKeyChange","sortByDate","valueA","valueB","sortDateInOrder","sortByQuestion","sortQuestionInOrder","sortByResponseType","sortResponseTypeInOrder","sortByResponse","sortResponseInOrder","justifyContent","paddingBottom","cursor","keys","colSpan","fontStyle","onSearchClicked","classNames","onSearchClick","SearchSurveys","renderTable","r","sortByCourseID","sortBySurveyID","sortByNumberOfQuestions","sortBySurveyTitle","SurveyManagementPage","setDeleteId","val","deleteId","setEditId","editId","surveyId","refreshOnUpdate","editQuestion","updatedQuestion","_id","alert","deleteQuestion","entries","course","data","newquestions","students","getAllResponses","thisEntry","ConfirmDeleteRound","deleteRound","RoundsTable","editRound","rounds","substring","strokes","minutes","seconds","RoundForm","newSec","newSGS","computeSGS","SGS","newStrokes","newMin","faIcon","btnLabel","roundData","saveRound","min","sec","holes","notes","thisRound","max","FloatingButton","upload","handleClick","Rounds","addRound","newData","closeErrorMsg","icon","StudentsTable","editStudent","deleteStudent","userID","studentDisplayName","DeleteCourse","handleCloseModal","handleDelete","deleteCourse","courseId","EditCourse","handleEditSubmit","newCourse","courseInstructorFirstName","instructorFirstName","courseInstructorLastName","instructorLastName","courseInstructorID","instructorId","number","year","semester","courseEnrollmentLimit","enrollmentLimit","courseCurrentlyEnrolled","currentlyEnrolled","courseNotes","editCourse","newCourseId","numberRef","semesterRef","yearRef","componentDidMount","bind","currCourse","filter","CoursesTable","viewStudents","changeCourse","handleEditCourse","handleDeleteCourse","courseInfo","UploadStudents","handleFile","getAsText","rosterRef","handleUploadSubmit","uploadStudents","roster","fileReadingFinished","fileToRead","readAsText","onload","onerror","errorHandler","allTextLines","lines","student","error","rosterFileName","AddCourse","handleCreateSubmit","addCourse","CoursesPage","handleChangeMode","newMode","handleChangeCourse","handleAddCourse","handleAddStudent","handleUploadStudents","addStudent","newStudent","courseData","AboutBox","href","modeTitle","modeToPage","App","openMenu","closeMenu","prevState","setUserId","Id","authenticated","showEditAccount","showEditAccountDialog","cancelEditAccount","editAccountDone","showAboutDialog","then","isAuthenticated","user","ModePage","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a8576b9e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/favicon.c30df3aa.png\";","/* AppMode: The enumerated type for AppMode. */\r\n\r\nconst AppMode = {\r\n    LOGIN: \"LoginMode\",\r\n\r\n    SURVEY_MANAGEMENT: \"SurveyMode\",\r\n    SURVEY_MANAGEMENT_RESPONSES: \"SurveyModeResponses\", //Searching Responses\r\n    SURVEY_MANAGEMENT_CREATE: \"SurveyModeCreate\",\r\n    SURVEY_MANAGEMENT_EDIT: \"SurveyModeEdit\",\r\n    SURVEY_MANAGEMENT_CREATE_SURVEY : \"SurveyModeCreateSurvey\",\r\n    SURVEY_MANAGEMENT_SEARCH: \"SurveyModeSearch\", //Searching Questions\r\n    SURVEY_MANAGEMENT_SEARCH_SURVEYS : \"SurveyModeSurveysSearch\", //Searching Surveys\r\n\r\n    ROUNDS: \"RoundsMode\",\r\n    ROUNDS_LOGROUND: \"RoundsMode-LogRound\",\r\n    ROUNDS_EDITROUND: \"RoundsMode-EditRound\",\r\n\r\n    COURSES: \"CoursesMode\",\r\n    COURSE_CREATE: \"AddCourses\",\r\n    COURSES_DELETE: \"DeleteCourses\",\r\n    COURSES_EDIT: \"EditCourses\",\r\n\r\n    STUDENTS: \"StudentsMode\",\r\n    STUDENTS_UPLOAD: \"UploadStudents\",\r\n    STUDENTS_CREATE: \"AddStudents\"\r\n};\r\n\r\nObject.freeze(AppMode); //This ensures that the object is immutable.\r\n\r\nexport default AppMode;","import React from 'react';\r\nimport AppMode from '../AppMode';\r\nimport logo from '../favicon.png'; //Importing the logo from the src directory\r\n\r\nclass NavBar extends React.Component {\r\n\r\n  getMenuBtnIcon = () => {\r\n      if (this.props.mode === AppMode.ROUNDS_LOGROUND || \r\n          this.props.mode === AppMode.ROUNDS_EDITROUND)\r\n          return \"fa fa-arrow-left\";\r\n      if (this.props.menuOpen)\r\n        return \"fa fa-times\";\r\n      return \"fa fa-bars\";\r\n  }\r\n\r\n  handleMenuBtnClick = () => {\r\n    if (this.props.mode === AppMode.ROUNDS_LOGROUND ||\r\n        this.props.mode === AppMode.ROUNDS_EDITROUND) {\r\n      this.props.changeMode(AppMode.ROUNDS);\r\n    } else if (this.props.mode != AppMode.LOGIN) {\r\n      this.props.toggleMenuOpen();\r\n    }\r\n  }\r\n\r\n  // Directly added the logo from the src directory since importing it from onedrive was causing complications\r\n  // where the image would not load correctly\r\n  render() {\r\n    return (\r\n    <div id=\"navBarMenu\" className=\"navbar\">  \r\n    <span className=\"navbar-items\">\r\n      <button id=\"menuBtn\" className=\"sidemenu-btn\" onClick={this.handleMenuBtnClick}>\r\n        <span id=\"menuBtnIcon\" className={\"sidemenu-btn-icon \" + this.getMenuBtnIcon()}>\r\n        </span>\r\n      </button>\r\n      <img src={logo} alt=\"Kliks Logo\" height=\"38px\"\r\n      width=\"38px\" />\r\n      <span className=\"navbar-title\">\r\n        &nbsp;{this.props.title}\r\n      </span>\r\n    </span>\r\n  </div>\r\n); \r\n}\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport AppMode from './../AppMode.js'\r\nimport App from './App.js';\r\n\r\nclass SideMenu extends React.Component {\r\n\r\n  setGeneralMode = (mode) => {\r\n    if(AppMode.SURVEY_MANAGEMENT === mode|| \r\n      AppMode.SURVEY_MANAGEMENT_CREATE === mode || \r\n      AppMode.SURVEY_MANAGEMENT_CREATE_SURVEY  === mode||\r\n      AppMode.SURVEY_MANAGEMENT_RESPONSES === mode \r\n      || AppMode.SURVEY_MANAGEMENT_SEARCH === mode\r\n      || AppMode.SURVEY_MANAGEMENT_SEARCH_SURVEYS === mode){\r\n      return AppMode.SURVEY_MANAGEMENT;\r\n    } else {\r\n      return mode;\r\n    }\r\n  }\r\n  \r\n//renderModeItems -- Renders correct subset of mode menu items based on\r\n//current mode, which is stored in this.prop.mode. Uses switch statement to\r\n//determine mode.\r\nrenderModeMenuItems = () => {\r\n  const mode = this.setGeneralMode(this.props.mode);\r\n  switch (mode) {\r\n    case AppMode.SURVEY_MANAGEMENT || AppMode.SURVEY_MANAGEMENT_CREATE || \r\n          AppMode.SURVEY_MANAGEMENT_RESPONSES  || AppMode.SURVEY_MANAGEMENT_SEARCH ||\r\n          AppMode.SURVEY_MANAGEMENT_CREATE_SURVEY || AppMode.SURVEY_MANAGEMENT_SEARCH_SURVEYS:\r\n      return(\r\n        <div>\r\n        <a className=\"sidemenu-item\" id=\"surveyManagement-MainPage\" onClick={(e) => { \r\n          e.preventDefault();\r\n          this.props.changeMode(AppMode.SURVEY_MANAGEMENT);\r\n          }}>\r\n            <span className=\"fa fa-bolt\"></span>&nbsp;Active Questions</a>\r\n        <a className=\"sidemenu-item \" id=\"surveyManagement-search\" onClick={(e) => { \r\n          e.preventDefault();\r\n          this.props.changeMode(AppMode.SURVEY_MANAGEMENT_SEARCH);\r\n          }}>\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Questions</a>\r\n          <a className=\"sidemenu-item \" id=\"surveyManagement-searchSurvey\" onClick={(e) => { \r\n          e.preventDefault();\r\n          this.props.changeMode(AppMode.SURVEY_MANAGEMENT_SEARCH_SURVEYS);\r\n          }}>\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Surveys</a>\r\n        <a className=\"sidemenu-item \" id=\"surveyManagement-create\" onClick={(e) => { \r\n          e.preventDefault();\r\n          this.props.changeMode(AppMode.SURVEY_MANAGEMENT_CREATE);\r\n          }}>\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Create Questions</a>\r\n            <a className=\"sidemenu-item \" id=\"surveyManagement-createSurvey\" onClick={(e) => { \r\n          e.preventDefault();\r\n          this.props.changeMode(AppMode.SURVEY_MANAGEMENT_CREATE_SURVEY);\r\n          }}>\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Create Survey</a>\r\n        <a className=\"sidemenu-item \" id=\"surveyManagement-responses\" onClick={(e) => { \r\n          e.preventDefault();\r\n          this.props.changeMode(AppMode.SURVEY_MANAGEMENT_RESPONSES);\r\n          }}>\r\n            <span className=\"fa fa-folder-open\"></span>&nbsp;Responses</a>           \r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.ROUNDS:\r\n      return(\r\n        <div>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Log New Round</a>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Rounds</a>\r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.COURSES:\r\n    case AppMode.COURSES_CREATE:\r\n      if (this.props.userType === \"Instructor\"){\r\n        return(\r\n          <div>\r\n          <a className=\"sidemenu-item\" onClick={(e) => { \r\n          e.preventDefault();\r\n          this.props.changeMode(AppMode.COURSES);\r\n          }}>\r\n              <span className=\"fa fa-folder-open\" id=\"viewCoursesLink\"></span>&nbsp;View Courses</a>\r\n          <a className=\"sidemenu-item\" onClick={(e) => { \r\n          e.preventDefault();\r\n          this.props.changeMode(AppMode.COURSES_CREATE);\r\n          }}>\r\n              <span className=\"fa fa-plus\" id=\"addCourseLink\"></span>&nbsp;Add a Course</a>\r\n          </div>\r\n        );\r\n      } else {\r\n        return(\r\n          <div>\r\n          <a className=\"sidemenu-item\" onClick={(e) => { \r\n          e.preventDefault();\r\n          this.props.changeMode(AppMode.COURSES);\r\n          }}>\r\n              <span className=\"fa fa-folder-open\" id=\"viewCoursesLink\"></span>&nbsp;View Courses</a>\r\n          </div>\r\n        );\r\n      }\r\n      break;\r\n      case AppMode.STUDENTS:\r\n      case AppMode.STUDENTS_CREATE:\r\n      case AppMode.STUDENTS_UPLOAD:\r\n        if (this.props.userType === \"Instructor\"){\r\n          return(\r\n            <div>\r\n            <a className=\"sidemenu-item\" onClick={(e) => { \r\n            e.preventDefault();\r\n            this.props.changeMode(AppMode.COURSES);\r\n            }}>\r\n                <span className=\"fa fa-folder-open\" id=\"viewCoursesLink\"></span>&nbsp;View Courses</a>\r\n            <a className=\"sidemenu-item\" onClick={(e) => { \r\n            e.preventDefault();\r\n            this.props.changeMode(AppMode.STUDENTS_CREATE);\r\n            }}>\r\n                <span className=\"fa fa-plus\" id=\"addStudentLink\"></span>&nbsp;Add a Student</a>\r\n            <a className=\"sidemenu-item\" onClick={(e) => { \r\n            e.preventDefault();\r\n            this.props.changeMode(AppMode.STUDENTS_UPLOAD);\r\n            }}>\r\n                <span className=\"fa fa-upload\" id=\"uploadStudentsLink\"></span>&nbsp;Upload Students</a>\r\n            </div>\r\n          );\r\n        } else {\r\n          return(\r\n            <div>\r\n            <a className=\"sidemenu-item\" onClick={(e) => { \r\n            e.preventDefault();\r\n            this.props.changeMode(AppMode.COURSES);\r\n            }}>\r\n                <span className=\"fa fa-folder-open\" id=\"viewCoursesLink\"></span>&nbsp;View Courses</a>\r\n            </div>\r\n          );\r\n        }\r\n      break;\r\n    default:\r\n        return null;\r\n    }\r\n}\r\n\r\n    render() {\r\n       return (\r\n        <div id=\"sidemenu\" className={\"sidemenu \" + (this.props.menuOpen ? \"sidemenu-open\" : \"sidemenu-closed\")}\r\n             onClick={this.props.toggleMenuOpen}>\r\n          {/* SIDE MENU TITLE */}\r\n          <div className=\"sidemenu-title\">\r\n            <img src={this.props.profilePicURL} height='60' width='60' />\r\n            <span id=\"userID\" className=\"sidemenu-userID\">&nbsp;{this.props.displayName}</span>\r\n        </div>\r\n          {/* MENU CONTENT */}\r\n          {this.renderModeMenuItems()}\r\n          {/* The following menu items are present regardless of mode */}\r\n          {this.props.localAccount ? \r\n            <a id=\"accountBtn\" className=\"sidemenu-item\" onClick={this.props.editAccount}>\r\n              <span className=\"fa fa-user\"></span>&nbsp;Account</a> : null}\r\n          <a id=\"aboutBtn\" className=\"sidemenu-item\" onClick={this.props.showAbout}>\r\n            <span className=\"fa fa-info-circle\"></span>&nbsp;About</a>\r\n          <a id=\"logOutBtn\" className=\"sidemenu-item\" onClick={this.props.logOut}>\r\n            <span className=\"fa fa-sign-out-alt\"></span>&nbsp;Log Out</a>\r\n        </div>\r\n       );\r\n    }\r\n}\r\n\r\nexport default SideMenu;\r\n","import React from 'react';\r\nimport AppMode from '../AppMode.js';\r\n\r\n\r\nclass ModeBar extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className={\"modebar\" + (this.props.mode === AppMode.LOGIN ? \r\n          \" invisible\" : (this.props.menuOpen ? \" ignore-click visible\" : \" visible\"))}>\r\n        <a className={(this.props.mode === AppMode.SURVEY_MANAGEMENT ? \" item-selected\" : null)}\r\n            onClick={()=>this.props.changeMode(AppMode.SURVEY_MANAGEMENT)}>\r\n          <span className=\"modebaricon fa fa-th-list\"></span>\r\n          <span className=\"modebar-text\">Survey Management</span>\r\n        </a>\r\n        <a className={(this.props.mode === AppMode.ROUNDS || \r\n               this.props.mode === AppMode.ROUNDS_EDITROUND || \r\n               this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                  \" item-selected\" : null)}\r\n           onClick={()=>this.props.changeMode(AppMode.ROUNDS)}>\r\n          <span className=\"modebar-icon  fa fa-history\"></span>\r\n          <span className=\"modebar-text\">Dashboard</span>\r\n        </a>\r\n        <a id=\"CoursesMode\" className={(this.props.mode === AppMode.COURSES ? \" item-selected\" : null)}\r\n          onClick={()=>this.props.changeMode(AppMode.COURSES)}>\r\n          <span className=\"modebar-icon  fa fa-flag\"></span>\r\n          <span className=\"modebar-text\">Courses</span>\r\n        </a> \r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default ModeBar;\r\n","import React from 'react';\r\n\r\nclass ConfirmDeleteAccount extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.emailRef = React.createRef();\r\n        this.state = {emailMatches: false};\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.emailRef.current.focus();\r\n    }\r\n\r\n    handleChange = () => {\r\n        const match = (this.emailRef.current.value === this.props.email);\r\n        if (match != this.state.emailMatches) {\r\n            this.setState({emailMatches: match});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <center>\r\n                <h3 className=\"modal-title\"><b>Confirm Account Deletion</b></h3>\r\n              </center>\r\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\r\n                 &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p>Do you really want to delete your account? <br />\r\n                 <i>This action cannot be undone.</i></p>\r\n              <label>\r\n                Confirm Email ({this.props.email}):\r\n                <br/>\r\n                <input \r\n                    className=\"form-center\"\r\n                    type=\"text\"\r\n                    ref={this.emailRef}\r\n                    onChange={this.handleChange} />\r\n                </label>\r\n                <br />\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteAccount} disabled={!this.state.emailMatches}>\r\n                  Yes, Delete My Account</button>\r\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\r\n                  No, Cancel</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmDeleteAccount;","import React from 'react';\r\nimport ConfirmDeleteAccount from './ConfirmDeleteAccount.js';\r\nimport confirmDeleteAccount from './ConfirmDeleteAccount.js';\r\n\r\nclass CreateEditAccountDialog extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.origAccountInfo = null;\r\n        //Create a ref for the email input DOM element\r\n        this.newUserRef = React.createRef();\r\n        this.repeatPassRef = React.createRef();\r\n        this.profilePicRef = React.createRef();\r\n        this.state = {accountName: \"\",\r\n                      displayName: \"\",\r\n                      userType: \"\",\r\n                      profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                      password: \"\",\r\n                      passwordRepeat: \"\",\r\n                      securityQuestion: \"\",\r\n                      securityAnswer: \"\",\r\n                      formUpdated: false,\r\n                      confirmDelete: false};\r\n    } \r\n\r\n    //componentDidMount -- If we are editing an existing user acccount, we need to grab the data from\r\n    //the database and push them into the state.\r\n    async componentDidMount() {\r\n        if (!this.props.create) {\r\n            //obtain current user data from database and push into state\r\n            const url = \"/users/\" + this.props.userId;\r\n            const res = await fetch(url);\r\n            const json = await res.json();\r\n            const userData = JSON.parse(json);\r\n            this.origAccountInfo = userData; //This determines whether update can occur\r\n            this.origAccountInfo.passwordRepeat = userData.password;\r\n            this.setState({accountName: this.props.userId,\r\n                           displayName: userData.displayName,\r\n                           userType: userData.userType,\r\n                           profilePicURL: userData.profilePicURL,\r\n                           password: userData.password,\r\n                           passwordRepeat: userData.password,\r\n                           securityQuestion: userData.securityQuestion,\r\n                           securityAnswer: userData.securityAnswer});\r\n        }\r\n    }\r\n\r\n    //checkDataValidity -- Callback function invoked after a form element in\r\n    //the 'Create Account' dialog box changes and component state has been\r\n    //updated. We first check whether the passwords match. If they do not, \r\n    //we set a custom validity message to be displayed when the user clicks the\r\n    //'Create Account' button. Otherwise, we reset the custom validity message\r\n    //to empty so that it will NOT fire when the user clicks 'Create Account'.\r\n    //Second, we check whether anything in the form changed from the original.\r\n    //If so, we update the 'formUpdated' state var, so that the form's submit\r\n    //button is enabled.\r\n    checkDataValidity = () => {\r\n        if(!this.state.accountName.endsWith(\"@wsu.edu\")){\r\n            this.newUserRef.current.setCustomValidity(\"Email needs to be a wsu email: @wsu.edu\");\r\n        }\r\n        else{\r\n            this.newUserRef.current.setCustomValidity(\"\");\r\n        }\r\n\r\n        if (this.state.password != this.state.passwordRepeat) {\r\n            //Passwords don't match\r\n            this.repeatPassRef.current.setCustomValidity(\r\n            \"This password must match password entered in previous field.\");\r\n        } else {\r\n            this.repeatPassRef.current.setCustomValidity(\"\");\r\n        }\r\n    }\r\n\r\n    //handleChange--Called when a field in a dialog box form changes.\r\n    handleChange = (event) => {\r\n        const formUpdated = (this.origAccountInfo == null ? true : this.formIsUpdated(event.target.name,event.target.value));\r\n        if (event.target.name === \"profilePic\") {\r\n            if (event.target.value.length == 0) { //The user canceled the file selection -- set back to default\r\n                this.setState({profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                               formUpdated: formUpdated},\r\n                               this.checkDataValidity);\r\n            } else { //The user selected a file\r\n                const self = this;\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(this.profilePicRef.current.files[0]);\r\n                reader.addEventListener(\"load\",function() {\r\n                    self.setState({profilePicURL:  this.result,\r\n                                   formUpdated: formUpdated},this.checkDataValidity);\r\n                });\r\n                console.log(this.state.profilePicURL);\r\n            }\r\n        } else {\r\n            this.setState({[event.target.name]: event.target.value,\r\n                           formUpdated: formUpdated},this.checkDataValidity);\r\n        }\r\n    } \r\n\r\n    //formisUpdated-- Checks whether any form data element has changed from the original. If so, \r\n    //returns true. Returns false otherwise. Note that in case of editing new account, always returns\r\n    //true since this.origAccountInfo is set to null.\r\n    //Should be called whenever the user makes a change to form data.\r\n    formIsUpdated = (updateField,updateVal) => {\r\n        if (this.origAccountInfo[updateField] != updateVal) {return true;}\r\n        if (updateField != \"displayName\" && \r\n             this.state.displayName != this.origAccountInfo.displayName) \r\n             {return true;}\r\n        if (updateField != \"userType\" && \r\n             this.state.userType != this.origAccountInfo.userType) \r\n             {return true;}\r\n        if (updateField != \"profilePicURL\" && \r\n             this.state.profilePicURL != this.origAccountInfo.profilePicURL) \r\n             {return true;}\r\n        if (updateField != \"password\" &&\r\n            this.state.password !== this.origAccountInfo.password)\r\n            {return true;}\r\n        if (updateField != \"passwordRepeat\" &&\r\n            this.state.passwordRepeat !== this.origAccountInfo.passwordRepeat)\r\n            {return true;}\r\n        if (updateField != \"securityQuestion\" &&\r\n            this.state.securityQuestion !== this.origAccountInfo.securityQuestion)\r\n            {return true;}\r\n        if (updateField != \"securityAnswer\" &&\r\n            this.state.securityAnswer !== this.origAccountInfo.securityAnswer)\r\n            {return true;}\r\n        return false;\r\n    }\r\n\r\n    //setDefaultuserType -- Triggered by onBlur() event of Email field.\r\n    //Sets default value of display name to value entered into Email field \r\n    //as a courtesy.\r\n    setDefaultuserType = (event) => {\r\n        this.setState({userType: event.target.value});\r\n        this.setState({displayName: event.target.value});\r\n    }\r\n\r\n    //handleSubmit -- Triggered when user clicks on submit button to\r\n    //either create or edit account.\r\n    //Custom data checking ensures user account under this email does not \r\n    //already exist and that the rest of the info is valid. We create a new  \r\n    // object for user, save it to localStorage and take user to app's \r\n    //landing page. \r\n    handleSubmit = async(event) => {\r\n        event.preventDefault();\r\n        //Initialize user account\r\n        let userData = {\r\n            displayName: this.state.displayName,\r\n            userType: this.state.userType,\r\n            password: this.state.password,\r\n            profilePicURL: this.state.profilePicURL,\r\n            securityQuestion: this.state.securityQuestion,\r\n            securityAnswer: this.state.securityAnswer\r\n        };\r\n        const url = '/users/' + this.state.accountName;\r\n        let res;\r\n        if (this.props.create) { //use POST route to create new user account\r\n            res = await fetch(url, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                    },\r\n                method: 'POST',\r\n                body: JSON.stringify(userData)}); \r\n            if (res.status == 200) { //successful account creation!\r\n                this.props.done(\"New account created! Enter credentials to log in.\",false);\r\n            } else { //Unsuccessful account creation\r\n                //Grab textual error message\r\n                const resText = await res.text();\r\n                this.props.done(resText,false);\r\n            }\r\n        } else { //use PUT route to update existing user account\r\n            res = await fetch(url, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                    },\r\n                method: 'PUT',\r\n                body: JSON.stringify(userData)}); \r\n            if (res.status == 200) { //successful account creation!\r\n                this.props.done(\"User Account Updated!\",false);\r\n            } else { //Unsuccessful account update\r\n                //Grab textual error message\r\n                const resText = await res.text();\r\n                this.props.done(resText,false);\r\n            }\r\n        }\r\n    }\r\n\r\n    //deleteAccount -- Called after confirms account deletion. \r\n    //Uses DELETE server route to perform server deletion. \r\n    //Calls on done with status message and\r\n    //true if delete was succesful, false otherwise.\r\n    deleteAccount = async() => {\r\n       const url = '/users/' + this.state.accountName;\r\n       const res = await fetch(url, \r\n                    {method: 'DELETE'}); \r\n        if (res.status == 200) { //successful account deletion!\r\n            this.props.done(\"Account '\" + this.state.accountName + \"' has been deleted.\",true);\r\n        } else { //Unsuccessful account deletion\r\n            //Grab textual error message\r\n            const resText = await res.text();\r\n            this.props.done(resText,false);\r\n        }\r\n        this.setState({confirmDelete: false});\r\n    }\r\n\r\n    //confirmDeleteAccount -- Called when user clicks on \"Delete Account...\"\r\n    //button to indicate intention to delete account. Presents the Confirm\r\n    //Delete dialog box.\r\n    confirmDeleteAccount = (e) => {\r\n        e.preventDefault();\r\n        this.setState({confirmDelete: true});\r\n    }\r\n\r\n    render() {\r\n    return (  \r\n    <div className=\"modal\" role=\"dialog\">\r\n    <div className=\"modal-dialog modal-lg\"></div>\r\n        <div className=\"modal-content form-center\">\r\n            <div className=\"modal-header\">\r\n              <h3><b>{this.props.create ? \"Create New Account\" : \"Edit Account\"}</b></h3>\r\n              <button className=\"modal-close\" \r\n                       onClick={this.props.cancel}>\r\n                &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n            <form onSubmit={this.handleSubmit}>\r\n            <label>\r\n                Email: \r\n                <input  \r\n                autocomplete=\"off\"\r\n                disabled={!this.props.create}\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountName\"\r\n                type=\"email\"\r\n                size=\"35\"\r\n                placeholder=\"Enter Email Address\"\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                required={true}\r\n                ref={this.newUserRef}\r\n                value={this.state.accountName}\r\n                onChange={this.handleChange}\r\n                onBlur={this.setDefaultuserType}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Password:\r\n                <input\r\n                autocomplete=\"off\"\r\n                className=\"form-control form-text form-center\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                size=\"35\"\r\n                placeholder=\"Enter Password\"\r\n                pattern=\r\n                \"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                required={true}\r\n                value={this.state.password}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Repeat Password:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"passwordRepeat\"\r\n                type=\"password\"\r\n                size=\"35\"\r\n                placeholder=\"Repeat Password\"\r\n                required={true}\r\n                ref={this.repeatPassRef}\r\n                value={this.state.passwordRepeat}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Display Name:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"displayName\"\r\n                type=\"text\"\r\n                size=\"30\"\r\n                placeholder=\"Display Name\"\r\n                required={true}\r\n                value={this.state.displayName}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Account Type:\r\n                <select name=\"userType\" value={this.state.userType} \r\n                className=\"form-control form-center\" onChange={this.handleChange}>\r\n                <option value=\"SelectOne\">Select One</option>\r\n                <option value=\"Student\">Student</option>\r\n                <option value=\"Instructor\">Instructor</option>\r\n                </select> \r\n                </label>\r\n            <br/>\r\n            <label>\r\n                Profile Picture:<br/>\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"profilePic\"\r\n                type=\"file\"\r\n                accept=\"image/x-png,image/gif,image/jpeg\" \r\n                ref={this.profilePicRef}\r\n                value={this.state.profilePic}\r\n                onChange={this.handleChange}\r\n                />\r\n                <img src={this.state.profilePicURL != \"\" ? \r\n                            this.state.profilePicURL :\r\n                            this.state.profilePicDataURL} \r\n                        height=\"60\" width=\"60\" \r\n                 />\r\n            </label> \r\n            <br/>\r\n            <label>\r\n                Security Question:\r\n                <textarea\r\n                className=\"form-control form-text form-center\"\r\n                name=\"securityQuestion\"\r\n                size=\"35\"\r\n                placeholder=\"Security Question\"\r\n                rows=\"2\"\r\n                cols=\"35\"\r\n                maxLength=\"100\"\r\n                required={true}\r\n                value={this.state.securityQuestion}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Answer to Security Question:\r\n                <textarea\r\n                className=\"form-control form-text form-center\"\r\n                name=\"securityAnswer\"\r\n                type=\"text\"\r\n                placeholder=\"Answer\"\r\n                rows=\"2\"\r\n                cols=\"35\"\r\n                maxLength=\"100\"\r\n                required={true}\r\n                value={this.state.securityAnswer}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            {!this.props.create ?  \r\n            <button className=\"btn btn-small btn-danger\" onClick={this.confirmDeleteAccount}>\r\n                Delete Account...\r\n            </button> : null}\r\n            <br/><br/>\r\n            <button role=\"submit\" \r\n                disabled={!this.state.formUpdated}\r\n                className=\"btn btn-primary btn-color-theme modal-submit-btn\">\r\n                <span className={this.props.create ? \"fa fa-user-plus\" : \"fa fa-user\"}></span>\r\n                &nbsp;{this.props.create ? \"Create Account\" : \"Update Account\"}\r\n            </button>\r\n            </form>\r\n            </div>\r\n        </div>\r\n        {this.state.confirmDelete ? \r\n          <ConfirmDeleteAccount email={this.state.accountName}\r\n                                deleteAccount={this.deleteAccount}\r\n                                close={() => (this.setState({confirmDelete: false}))}\r\n         /> : null}\r\n    </div>\r\n    );\r\n}\r\n}\r\n\r\nexport default CreateEditAccountDialog;","import React from 'react'\r\n\r\nclass ResetPasswordDialog extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.resetPasswordRef = React.createRef();\r\n        this.resetPasswordRepeatRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //handleSubmit -- When the user submits the form, ensure that the passwords match.\r\n    //If so, call on resetPassword in parent component to actually reset the password.\r\n    //Otherwise, display an error message prompting the user to try again.\r\n    handleSubmit= (event) => {\r\n        event.preventDefault();\r\n        if (this.resetPasswordRef.current.value === this.resetPasswordRepeatRef.current.value) {\r\n            this.props.resetPassword(this.resetPasswordRef.current.value);\r\n        } else {\r\n            this.resetPasswordRepeatRef.current.focus();\r\n            this.setState({errorMsg: \"The passwords you entered do not match. Please try again.\"});\r\n        }\r\n    }\r\n\r\n    checkForSubmit = (e) => {\r\n        if (e.code === \"Enter\") {\r\n            e.preventDefault();\r\n            this.handleSubmit();\r\n        }\r\n    }\r\n\r\n    // modified the modal-title inside the header so that the text can be centered in the modal\r\n    // this required using col-12 and text-center since messing with the CSS was not working\r\n    // I also included new paragraph tags between the labels and buttons to create a cleaner layout\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"col-12 modal-title text-center\"><b>Reset Password</b>\r\n                    </h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={this.props.cancelResetPassword}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \r\n                    <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        New Password: \r\n                        <input\r\n                        type=\"password\"\r\n                        id=\"NewPassword\"\r\n                        placeholder=\"Enter new password\"\r\n                pattern=\"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                        className=\"form-control form-text\"\r\n                        ref={this.resetPasswordRef}\r\n                        />\r\n                    </label>\r\n                    <p></p>\r\n                    <label>\r\n                        Repeat New Password: \r\n                        <input\r\n                        type=\"password\"\r\n                        id=\"RepeatPassword\"\r\n                        placeholder=\"Repeat new password\"\r\n                        className=\"form-control form-text\"\r\n                        onKeyUp={this.checkForSubmit}\r\n                        ref={this.resetPasswordRepeatRef}\r\n                        />\r\n                    </label>\r\n                    <p></p>\r\n                    <button role=\"submit\" id=\"PasswordButton\"\r\n                     className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-key\"></span>&nbsp;Reset Password\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          );\r\n        \r\n    }\r\n}\r\n\r\nexport default ResetPasswordDialog;","import React from 'react';\r\nimport AppMode from '../AppMode.js';\r\n\r\nclass LookUpAccountDialog extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.emailRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //handleLookUpAccount: When the user clicks on the \"Look Up Account\" dialog box\r\n    //button, we check whether the account exists. If it does, we update the state,\r\n    //setting the resetEmail var to the email entered, hiding the current dialog box\r\n    //and showing the security question dialog box.\r\n    handleLookUpAccount = async(event) => {\r\n        event.preventDefault();\r\n        let response = await fetch(\"/users/\" + this.emailRef.current.value);\r\n        if (response.status == 200) {\r\n            const json = await response.json();\r\n            const obj = JSON.parse(json);\r\n            if (obj.authStrategy === \"local\") {\r\n                this.props.getSecurityAnswer(obj.id,obj.securityQuestion, obj.securityAnswer);\r\n            } else { //Account exists but was created through OAuth so password can't be reset \r\n                this.setState({errorMsg: \"That account is authenticated through \" + obj.authStrategy + \". \" +\r\n                               \"Please log in to \" + obj.authStrategy + \" to reset the password.\"});\r\n            }\r\n        } else {\r\n            this.setState({errorMsg: \"Sorry, there is no account associated with '\" + this.emailRef.current.value + \"'.\"});\r\n        }\r\n    }\r\n\r\n    // modified the modal-title inside the header so that the text can be centered in the modal\r\n    // this required using col-12 and text-center since messing with the CSS was not working\r\n    // I also included new paragraph tags between the labels and buttons to create a cleaner layout\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"col-12 modal-title text-center\"><b>Look Up Account</b></h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={() => {this.props.cancelResetPassword()}}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null}\r\n                    <form onSubmit={this.handleLookUpAccount}>\r\n                    <label>\r\n                        Account Email Address: \r\n                        <input\r\n                        ref={this.emailRef}\r\n                        className=\"form-control form-text\"\r\n                        id=\"AccountEmail\"\r\n                        type=\"email\"\r\n                        size=\"35\"\r\n                        placeholder=\"Enter Email Address\"\r\n                        pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                        ref={this.emailRef}\r\n                        required={true}\r\n                        />\r\n                    </label>\r\n                    <p></p>\r\n                    <button type=\"submit\" id=\"AccountButton\"\r\n                        className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-search\"></span>&nbsp;Look Up Account\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>  \r\n        );   \r\n    }\r\n\r\n}\r\n\r\nexport default LookUpAccountDialog;\r\n","import React from 'react';\r\n\r\nclass SecurityQuestionDialog extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.securityAnswerRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //Focus cursor in email secrity answer field when mounted\r\n    componentDidMount() {\r\n        this.securityAnswerRef.current.focus();\r\n    }  \r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (this.securityAnswerRef.current.value === this.props.answer) {\r\n            this.props.getNewPassword();\r\n        } else {\r\n            this.securityAnswerRef.current.focus();\r\n            this.setState({errorMsg: \"Sorry, that is not the correct answer to the security question. Try again.\"});\r\n        }\r\n    }\r\n\r\n    // modified the modal-title inside the header so that the text can be centered in the modal\r\n    // this required using col-12 and text-center since messing with the CSS was not working\r\n    // I also included new paragraph tags between the labels and buttons to create a cleaner layout\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"col-12 modal-title text-center\"><b>Answer Security Question</b>\r\n                    </h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={this.props.cancelResetPassword}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \r\n                    <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Security Question: \r\n                        <textarea\r\n                        readOnly={true}\r\n                        value={this.props.question}\r\n                        className=\"form-control form-text\"\r\n                        rows=\"3\"\r\n                        cols=\"35\"\r\n                        />\r\n                    </label>\r\n                    <p></p>\r\n                    <label>\r\n                        Security Answer: \r\n                        <textarea\r\n                        className=\"form-control form-text\"\r\n                        id=\"SecurityAnswer\"\r\n                        placeholder=\"Enter Security Question Answer\"\r\n                        ref={this.securityAnswerRef}\r\n                        rows=\"3\"\r\n                        cols=\"35\"\r\n                        />\r\n                    </label>\r\n                    <p></p>\r\n                    <button role=\"submit\" id=\"SecurityButton\"\r\n                      className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-check\"></span>&nbsp;Verify Answer\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          );        \r\n    }\r\n}\r\n export default SecurityQuestionDialog;","import React from 'react';\r\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js';\r\nimport ResetPasswordDialog from './ResetPasswordDialog.js';\r\nimport LookUpAccountDialog from './LookUpAccountDialog.js';\r\nimport SecurityQuestionDialog from './SecurityQuestionDialog.js';\r\nimport AppMode from '../AppMode.js';\r\n\r\nclass LoginPage extends React.Component {\r\n\r\nconstructor() {\r\n    super();\r\n    //Create a ref for the email input DOM element\r\n    this.emailInputRef = React.createRef();\r\n    this.resetUserId = \"\";\r\n    this.resetQ = \"\";\r\n    this.resetA = \"\";\r\n    this.passwordInputRef = React.createRef();\r\n    this.state = {statusMsg: \"\",\r\n                  loginBtnIcon: \"fa fa-sign-in\",\r\n                  loginBtnLabel: \"Log In\",\r\n                  showLookUpAccountDialog: false,\r\n                  showSecurityQuestionDialog: false,\r\n                  showResetPaswordDialog: false,\r\n                  githubIcon: \"fa fa-github\",\r\n                  githubLabel: \"Sign in with GitHub\",\r\n                  loginMsg: \"\",\r\n                  newAccountCreated: false\r\n                  };\r\n} \r\n    \r\n//Focus cursor in email input field when mounted\r\ncomponentDidMount() {\r\n    this.emailInputRef.current.focus();\r\n}  \r\n\r\n//handleLoginSubmit -- Called when user clicks on login button.\r\nhandleLoginSubmit = async (event) => {\r\n    event.preventDefault();\r\n    this.setState({loginBtnIcon: \"fa fa-spin fa-spinner\",\r\n                   loginBtnLabel: \"Logging In...\"});\r\n    const url = \"auth/login?username=\" + this.emailInputRef.current.value +\r\n                \"&password=\" + this.passwordInputRef.current.value;\r\n    const res = await fetch(url, {method: 'POST'}); \r\n    if (res.status == 200) { //successful login!\r\n        window.open(\"/\",\"_self\");\r\n    } else { //Unsuccessful login\r\n      const resText = await res.text();\r\n      this.setState({loginBtnIcon: \"fa fa-sign-in\",\r\n                     loginBtnLabel: \"Log In\",\r\n                     statusMsg: resText});\r\n    }\r\n}\r\n\r\n  //accountCreateDone -- Called by child CreateAccountDialog component when \r\n  //user attempted to create new account. Hide the dialog and display \r\n  //a message indicating result of the attempt.\r\n  accountCreateDone = (msg) => {\r\n      this.setState({statusMsg: msg,\r\n                     showCreateAccountDialog: false});\r\n  }\r\n\r\n  //cancelCreateAccount -- Called by child CreateAccountDialog componenet when user decides\r\n  //to cancel creation of new account by clicking the \"X\" in top-right of dialog.\r\n  cancelCreateAccount = () => {\r\n      this.setState({showCreateAccountDialog: false});\r\n  }\r\n\r\n//cancelResetPassword -- Called by one of the child three child dialog box components when\r\n//the user decides to cancel resetting their password. Toggles state so that all three\r\n//of the dialog boxes are hidden\r\ncancelResetPassword = () => {\r\n    this.resetUserId = \"\";\r\n    this.resetQ = \"\";\r\n    this.resetA = \"\";\r\n    this.setState({showLookUpAccountDialog: false,\r\n                   showSecurityQuestionDialog: false,\r\n                   showResetPaswordDialog: false});             \r\n}\r\n\r\n//handleOAuthLogin -- Callback function that initiates contact with OAuth\r\n//provider\r\nhandleOAuthLogin = (provider) => {\r\n    window.open(`/auth/${provider}`,\"_self\");\r\n}\r\n\r\n//handleOAuthLoginClick -- Called whent the user clicks on button to\r\n//authenticate via a third-party OAuth service. The name of the provider is\r\n//passed in as a parameter.\r\nhandleOAuthLoginClick = (provider) => {\r\n   this.setState({[provider + \"Icon\"] : \"fa fa-spin fa-spinner\",\r\n                  [provider + \"Label\"] : \"Connecting...\"});\r\n   setTimeout(() => this.handleOAuthLogin(provider),1000);\r\n}\r\n\r\n//getSecurityAnswer: Given the id, security question, and security answer obtained\r\n//from the LookUpAccountDialog component, update state such that the user will\r\n//next be prompted to enter security question and answer for verification\r\ngetSecurityAnswer = (userId, question, answer) => {\r\n    this.resetUserId = userId;\r\n    this.resetQ = question;\r\n    this.resetA = answer;\r\n    this.setState({showLookUpAccountDialog: false,\r\n                   showSecurityQuestionDialog: true\r\n                });\r\n}\r\n\r\n//getNewPassword-- Called after user successfully provides correct answer\r\n//to security question. Presents the \"Reset Password\" dialog box.\r\ngetNewPassword = () => {\r\n    this.setState({showSecurityQuestionDialog: false,\r\n                    showResetPaswordDialog: true});\r\n}\r\n\r\n//resetPassword--Called after the user successfully enters a new (acceptable)\r\n//password. pw contains the new password. Call on the Update (PUT) server\r\n//route to update the user's password in the database.\r\nresetPassword = async(pw) => {\r\n    const url = \"/users/\" + this.resetUserId;\r\n    const res = await fetch(url, {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n            },\r\n        method: 'PUT',\r\n        body: JSON.stringify({password: pw})}); \r\n    if (res.status == 200) { //successful update creation!\r\n        this.setState({showResetPaswordDialog: false,\r\n                       statusMsg: \"Password successfully reset!\"});\r\n    } else { //Unsuccessful account creation\r\n        //Grab textual error message\r\n        const resText = await res.text();\r\n        this.setState({showResetPasswordDialog: false,\r\n                      statusMsg: resText});\r\n    }\r\n    \r\n}\r\n\r\n//newAccountCreated -- Called after successful creation of a new account\r\naccountCreateDone = (msg,deleted) => {\r\n    this.setState({statusMsg: msg,\r\n                   showCreateAccountDialog: false});\r\n}\r\n\r\n//closeStatusMsg -- Called when user clicks on \"x\" to dismiss status message\r\ncloseStatusMsg = () => {\r\n    this.setState({statusMsg: \"\"});\r\n}\r\n\r\n//cancelCreateAccount -- called to hide Create Account dialog without creating acct\r\ncancelCreateAccount = () => {\r\n    this.setState({showCreateAccountDialog: false});\r\n}\r\n\r\n  render() {\r\n    return(\r\n        <div id={\"LoginMode\"}>\r\n        <center>\r\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.statusMsg}</span>\r\n                       <button className=\"modal-close\" onClick={this.closeStatusMsg}>\r\n                          <span className=\"fa fa-times\"></span>\r\n                        </button></div>: null}\r\n            {this.state.showLookUpAccountDialog ? \r\n              <LookUpAccountDialog cancelResetPassword={this.cancelResetPassword}\r\n                                   getSecurityAnswer={this.getSecurityAnswer}/> : null}\r\n            {this.state.showSecurityQuestionDialog ? \r\n               <SecurityQuestionDialog cancelResetPassword={this.cancelResetPassword}\r\n                                       question={this.resetQ}\r\n                                       answer={this.resetA}\r\n                                       getNewPassword={this.getNewPassword}/> : null}\r\n            {this.state.showResetPaswordDialog ? \r\n              <ResetPasswordDialog cancelResetPassword={this.cancelResetPassword}\r\n                                   resetPassword={this.resetPassword} /> : null}\r\n            <form id=\"loginInterface\" onSubmit={this.handleLoginSubmit}>\r\n            <label htmlFor=\"emailInput\" style={{ padding: 0, fontSize: 24 }}>\r\n                Email:\r\n                <input\r\n                ref={this.emailInputRef}\r\n                className=\"form-control login-text\"\r\n                type=\"email\"\r\n                placeholder=\"Enter Email Address\"\r\n                id=\"emailInput\"\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                required={true}\r\n                />\r\n            </label>\r\n            <p />\r\n            <label htmlFor=\"passwordInput\" style={{ padding: 0, fontSize: 24 }}>\r\n                Password:\r\n                <input\r\n                ref={this.passwordInputRef}\r\n                id=\"passwordInput\"\r\n                className=\"form-control login-text\"\r\n                type=\"password\"\r\n                placeholder=\"Enter Password\"\r\n                pattern=\"[A-Za-z0-9!@#$%^&*()_+\\-]+\"\r\n                required={true}\r\n                />\r\n            </label>\r\n            <p className=\"bg-danger\" id=\"feedback\" style={{ fontSize: 16 }} />\r\n            <button\r\n                id=\"loginButton\"\r\n                type=\"submit\"\r\n                className=\"btn-color-theme btn btn-primary btn-block login-btn\">\r\n                <span id=\"login-btn-icon\" className={this.state.loginBtnIcon}/>\r\n                &nbsp;{this.state.loginBtnLabel}\r\n            </button>\r\n            <p>\r\n            <button type=\"button\" className=\"btn btn-link login-link\" \r\n                    onClick={() => {this.setState({showCreateAccountDialog: true});}}>\r\n                Create an account</button> | \r\n                <button id=\"ResetPassword\" type=\"button\" id=\"ResetPassword\" className=\"btn btn-link login-link\"\r\n                        onClick={() => {this.setState({showLookUpAccountDialog: true});}}>\r\n                Reset your password</button>\r\n            </p>  \r\n            {/* <button type=\"button\" className=\"btn btn-github\"\r\n               onClick={() => this.handleOAuthLoginClick(\"github\")}>\r\n              <span className={this.state.githubIcon}></span>&nbsp;\r\n                {this.state.githubLabel}\r\n            </button> */}\r\n            <p>\r\n                <i>Version CptS 489</i>\r\n            </p>\r\n            </form>\r\n            {this.state.showCreateAccountDialog ? \r\n              <CreateEditAccountDialog\r\n                create={true} \r\n                done={this.accountCreateDone}\r\n                cancel={this.cancelCreateAccount} /> : null}\r\n            {this.state.showResetPasswordDialog ? <ResetPasswordDialog /> : null}\r\n        </center>\r\n        </div>\r\n        )\r\n    }\r\n} \r\n\r\nexport default LoginPage;\r\n","import React from 'react';\r\n\r\nclass FileUpload extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor(props) {\r\n        super(props);\r\n        this.fileRef = React.createRef();\r\n        this.state = {\r\n          file : \"\",\r\n          selectedOptions : []\r\n        }\r\n    }\r\n    \r\n    // Handle the file changes\r\n    onFileChange = (event) => {\r\n\r\n      if(event.target.value.length == 0)\r\n      {\r\n        this.props.setAnswer([this.result]);\r\n        this.setState({file:  \"\"});\r\n      }\r\n      else\r\n      {\r\n        //The user selected a file\r\n        const self = this;\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(this.fileRef.current.files[0]);\r\n        reader.addEventListener(\"load\",function() {\r\n            self.props.setAnswer([this.result]);\r\n            self.setState({file:  this.result});\r\n          });\r\n        }\r\n\r\n        this.props.setAcceptableAnswerTypes(this.state.selectedOptions);\r\n\r\n        this.state =  {\r\n          selectedOptions : []\r\n        };\r\n    }\r\n\r\n    // Handles the onchange for the selected items.\r\n    handleChange = (event) => {\r\n      let newSelectedOptions = event.target.value;\r\n      let selectedOptions = this.state.selectedOptions;\r\n  \r\n      console.log(selectedOptions)\r\n      console.log(newSelectedOptions)\r\n      if(selectedOptions.indexOf(newSelectedOptions) === -1)\r\n      {\r\n        selectedOptions.push(newSelectedOptions);\r\n      }\r\n      else{\r\n        if(selectedOptions.length === 1)\r\n        {\r\n          selectedOptions = [];\r\n        }\r\n        else{\r\n          selectedOptions.splice(selectedOptions.indexOf(newSelectedOptions), 1);\r\n        }\r\n      }\r\n\r\n      this.setState({ selectedOptions: selectedOptions }, ()=> { console.log(\"String representation:\"); console.log(this.state.selectedOptions.toString()); console.log(this.state.selectedOptions);});\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n            <center>\r\n            <p></p>\r\n            <label>Acceptable File Types:\r\n            <select name=\"answerType\" multiple={true} value={this.state.selectedOptions} onChange={this.handleChange} \r\n              id={\"createQuestion-file-fileTypes\"}\r\n              className=\"form-control form-center\">\r\n              <option value=\".pdf\">pdf</option>\r\n              <option value=\".docx\">docx</option>\r\n              <option value=\".jpg\">jpg</option>\r\n              <option value=\".jpeg\">jpeg</option>\r\n              <option value=\".png\">png</option>\r\n              <option value=\".doc\">doc</option>                     \r\n            </select> \r\n            </label>\r\n            <p></p>\r\n              <label>\r\n                File:\r\n                <input name=\"file\" className=\"form-control form-center\" \r\n                id={\"createQuestion-file-upload\"}\r\n                onChange={this.onFileChange}\r\n                ref={this.fileRef}\r\n                value={this.state.fileObj}\r\n                type=\"file\"\r\n                accept={this.state.selectedOptions.toString()}/>\r\n              </label>\r\n            <p></p>\r\n            </center>\r\n          </div>            \r\n        );\r\n    }\r\n}\r\n\r\nexport default FileUpload;","import React from 'react';\r\n\r\nclass FreeResponse extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          answer: \"\"\r\n        }\r\n    }\r\n\r\n    // Handle the response change\r\n    onResponseChange = (event) => {\r\n        this.props.setAnswer([event.target.value]);\r\n        this.setState({\r\n            answer : event.target.value\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n            <center>\r\n            <label>Answer:\r\n                <textarea name=\"answer\" className=\"form-control\" rows=\"6\" cols=\"75\" \r\n                id={\"createQuestion-freeResponse\"}\r\n                placeholder=\"Enter answer here\" value={this.state.answer} \r\n                onChange={this.onResponseChange}\r\n                />\r\n                </label>\r\n            <p></p>\r\n            </center>\r\n          </div>            \r\n        );\r\n    }\r\n}\r\n\r\nexport default FreeResponse;","import React from 'react';\r\n\r\nclass MultipleChoice extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          answers : [\r\n                    {\r\n                      placeholder: \"\",\r\n                      name: 0,\r\n                      value : \"\",\r\n                      id : 0\r\n                    }\r\n                  ]\r\n        };\r\n    }\r\n\r\n    // Handles the event when the user clicks on addAnswer\r\n    onAddAnswer = (event) => {\r\n      event.preventDefault();\r\n      var answers = this.state.answers;\r\n\r\n      answers.push(\r\n        {\r\n          placeholder: answers.length,\r\n          name: answers.length,\r\n          value : \"\",\r\n          id: answers.length\r\n        }\r\n      );\r\n\r\n      this.setState({\r\n        answers : answers\r\n      });\r\n\r\n      let strAnswers = answers.map((element) => {\r\n        return element.value;\r\n      });      \r\n\r\n      this.props.setAnswer(strAnswers);\r\n    }\r\n\r\n    // Handles the event when the user clicks on removeAnswer\r\n    onRemoveAnswer = (event) => {\r\n      event.preventDefault();\r\n      var answers = this.state.answers;\r\n\r\n      if(answers.length > 0)\r\n      {\r\n        answers.pop();\r\n  \r\n        this.setState({\r\n          answers : answers\r\n        });\r\n\r\n        let strAnswers = answers.map((element) => {\r\n          return element.value;\r\n        });\r\n\r\n        this.props.setAnswer(strAnswers);\r\n      }else{\r\n        this.props.setAnswer([\"\"]);\r\n      }\r\n    }\r\n\r\n    // Gets the answers and creates input elements for them\r\n    getAnswers = () => {\r\n      var answers = [];\r\n\r\n      for(var index = 0; index < this.state.answers.length; index++){\r\n        answers.push(\r\n          <input id={index+\"-mcOption\"} placeholder=\"Input answer...\" onChange={this.onAnswerTextChange} value={this.state.answers[index].value} name={this.state.answers[index].name} aria-label=\"Username\" aria-describedby=\"basic-addon1\" className=\"form-control\"/>\r\n        );\r\n      }\r\n      return answers;\r\n    }\r\n\r\n    // Handles the text change of the input elements\r\n    onAnswerTextChange = (event) => {\r\n      var answers = this.state.answers;\r\n\r\n      answers[Number(event.target.name)].value = event.target.value;\r\n\r\n      let strAnswers = answers.map((element) => {\r\n        return element.value;\r\n      });\r\n\r\n      this.props.setAnswer(strAnswers);\r\n      this.setState({\r\n        answers : answers\r\n      });\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div>\r\n            <center>\r\n            <div className=\"mb-3 input-group\" style={{width:\"20%\"}}>\r\n              <div className=\"input-group-prepend\">\r\n                <span className=\"input-group-text\" id=\"basic-addon1\">Answer choice</span>\r\n              </div>\r\n              <div id={\"multiple-choice-option-answers\"}>\r\n                {\r\n                  this.getAnswers()\r\n                }\r\n              </div>\r\n            </div>\r\n            <p></p>\r\n            \r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"col-md-3\" style={{width: \"40%\"}}>\r\n                  <button type=\"button\" style={{fontSize: \"28px\"}} \r\n                  id={\"createQuestion-mc-addAnswerBtn\"}\r\n                  onClick={this.onAddAnswer} \r\n                    className=\"btn btn-primary btn-color-theme\">\r\n                      <span className=\"fa fa-plus\"/>&nbsp;Add Answer\r\n                  </button>\r\n                </div>\r\n                <div className=\"col-md-3\" style={{width: \"40%\"}}>\r\n                  <button  type=\"button\" style={{fontSize: \"28px\"}} \r\n                  id={\"createQuestion-mc-removeAnswerBtn\"}\r\n                  onClick={this.onRemoveAnswer} \r\n                    className=\"btn btn-primary btn-color-theme\">\r\n                      <span className=\"fa fa-plus\"/>&nbsp;Remove Answer\r\n                  </button>\r\n                </div>\r\n            </div>            \r\n            <p></p>\r\n            </center>\r\n          </div>            \r\n        );\r\n    }\r\n}\r\n\r\nexport default MultipleChoice;","import React from 'react';\r\nimport FileUpload from './AnswerTypes/FileUpload';\r\nimport FreeResponse from './AnswerTypes/FreeResponse';\r\nimport MultipleChoice from './AnswerTypes/MultipleChoice';\r\nimport AppMode from '../../AppMode';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\n\r\nconst answerTypes = {};\r\nanswerTypes[\"multipleChoice\"] = MultipleChoice;\r\nanswerTypes[\"shortAnswer\"] = FreeResponse;\r\nanswerTypes[\"fileUpload\"] = FileUpload;\r\n\r\nclass CreateQuestion extends React.Component {\r\n    //  constructor\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\r\n        this.questionTextRef = React.createRef();\r\n        this.questionTitleRef = React.createRef();\r\n        this.surveySelectionRef = React.createRef();\r\n        this.dateRef = React.createRef();\r\n\r\n        if (this.props.mode == AppMode.SURVEY_MANAGEMENT_CREATE)\r\n        {\r\n            this.state = {\r\n                dropdownOfSurveys : this.props.surveys.length > 0 ? this.props.surveys[0].surveyID : \"\",\r\n                numberOfSurveys : this.props.surveys.length,\r\n                date: today.toISOString().substr(0,10),\r\n                answerType : \"shortAnswer\",\r\n                question: \"\",\r\n                title : \"\",\r\n                answers : [],\r\n                active : false,\r\n                acceptableAnswerTypes : [],\r\n                surveyID : this.props.surveys.length > 0 ? this.props.surveys[0].surveyID : \"\" \r\n            }   \r\n            this.state.submitIcon = \"fa fa-save\";\r\n            this.state.submitLabel = \"Save Question\" ;\r\n        } \r\n        else\r\n        {\r\n            this.state = this.props.startData;\r\n            this.state.submitIcon = \"fa fa-edit\";\r\n            this.state.submitLabel = \"Update Question\";\r\n        }\r\n    }\r\n\r\n    // On change handler for the form elements\r\n    handleChange = (event) => {\r\n        const name = event.target.name; \r\n        this.setState({[name]: event.target.value}, this.checkDataValidity);\r\n    }\r\n\r\n    // Event handler for when the user clicks on Add Survey\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        var newQuestion = {\r\n            questionID: uuid(),\r\n            questionTitle: this.state.title,\r\n            questionText: this.state.question,\r\n            questionType: this.state.answerType,\r\n            questionAnswers:this.state.answers,\r\n            acceptableAnswerTypes: this.state.acceptableAnswerTypes,\r\n            questionActive: this.state.active,\r\n            responses:  []\r\n        }\r\n\r\n        setTimeout(this.props.saveQuestion, 100, this.state.surveyID, newQuestion);\r\n        this.props.changeMode(AppMode.SURVEY_MANAGEMENT_SEARCH);\r\n    }\r\n\r\n    // Handles when the user clicks on add survey [If there are no sureys]\r\n    onAddSurvey = (event) => {\r\n        event.preventDefault();\r\n        this.props.changeMode(AppMode.SURVEY_MANAGEMENT_CREATE_SURVEY)\r\n    }\r\n\r\n    // Sets the acceptable types for the file type [if the answer has to be a file upload]\r\n    setAcceptableAnswerTypes = (newTypes) => {\r\n        this.setState({\r\n            acceptableAnswerTypes: newTypes\r\n        });\r\n    }\r\n\r\n    // Creates the dropdown options [Surveys] \r\n    getSurveys = () => {\r\n        var surveys = [];\r\n  \r\n        for(var index = 0; index < this.props.surveys.length; index++)\r\n        {\r\n          surveys.push(<option name={this.props.surveys[index].surveyID} key={this.props.surveys[index].surveyID} id={this.props.surveys[index].surveyID} value={this.props.surveys[index].surveyID}>{this.props.surveys[index].surveyTitle}</option>);\r\n        }\r\n\r\n       return surveys;\r\n    }\r\n\r\n    // sets the value of the answer\r\n    setAnswer = (newAnswer) => {\r\n        this.setState({\r\n            answers : newAnswer\r\n        });\r\n    }\r\n\r\n    // Handles the change event for the switch button\r\n    switchHandler = () => {\r\n        this.setState({\r\n            active : !this.state.active\r\n        });\r\n    }\r\n\r\n    // Handles the changes that occur to the dropdown menu \r\n    handleDropdownChange = (event) => {\r\n        const name = event.target.name; \r\n        this.setState({[name]: event.target.value,\r\n          surveyID : event.target.value\r\n        }, this.checkDataValidity);        \r\n    }\r\n\r\n    // data validator for the form elements\r\n    checkDataValidity = () => {\r\n        if(this.state.dropdownOfSurveys == \"\"){\r\n            this.surveySelectionRef.current.setCustomValidity(\"No Survey selected.\");\r\n        }\r\n        else{\r\n            this.surveySelectionRef.current.setCustomValidity(\"\");\r\n        }\r\n\r\n        if(this.state.question.length == 0){\r\n            this.questionTextRef.current.setCustomValidity(\"Question does not have a any text.\");\r\n        }\r\n        else{\r\n            this.questionTextRef.current.setCustomValidity(\"\");\r\n        }\r\n\r\n        if(this.state.title.length == 0){\r\n            this.questionTitleRef.current.setCustomValidity(\"Question does not have a title.\");\r\n        }\r\n        else{\r\n            this.questionTitleRef.current.setCustomValidity(\"\");\r\n        }\r\n\r\n        let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\r\n        if(this.state.date < today.toISOString().substr(0,10)){\r\n            this.dateRef.current.setCustomValidity(\"Cannot create a question for the past.\");\r\n        }\r\n        else{\r\n            this.dateRef.current.setCustomValidity(\"\");\r\n        }        \r\n    }\r\n\r\n    render(){\r\n        const AnswerType = answerTypes[this.state.answerType];\r\n        return(\r\n            <form className=\"padded-page\" id={\"createQuestionMode\"} onSubmit={this.handleSubmit}>\r\n                {\r\n                this.props.surveys.length == 0 ?\r\n                <center>\r\n                    <p></p>\r\n                    <p>There are no surveys, please create surveys in order to create questions </p>\r\n                    <p></p>\r\n                    <button type=\"button\" style={{width: \"50%\",fontSize: \"36px\"}} id={\"createQuestion-createSurveyBtn\"} onClick={this.onAddSurvey}\r\n                    className=\"btn btn-primary btn-color-theme\">\r\n                        <span className=\"fa fa-plus\"/>&nbsp; Add a survey\r\n                    </button>\r\n                </center>\r\n                :\r\n                (\r\n                    <center>\r\n                        <label\r\n                        style={{fontSize: \"20px\"}}\r\n                        >\r\n                            Question Title:\r\n                            <input name=\"title\"\r\n                            id={\"createQuestion-title\"}\r\n                            className=\"form-control form-center\" value={this.state.title} onChange={this.handleChange}\r\n                            ref={this.questionTitleRef}\r\n                            minLength={1}\r\n                            type=\"text\"/>\r\n                        </label>\r\n                        <p></p>\r\n                            <label\r\n                                style={{fontSize: \"20px\"}}\r\n                            >Question:\r\n                                <textarea name=\"question\" className=\"form-control\" rows=\"6\" cols=\"75\" \r\n                                placeholder=\"Enter Question here\"\r\n                                id={\"createQuestion-question\"}\r\n                                value={this.state.question}\r\n                                ref={this.questionTextRef}\r\n                                minLength={1}\r\n                                onChange={this.handleChange}\r\n                                />\r\n                            </label>\r\n                        <p></p>\r\n                        <label\r\n                            style={{fontSize: \"20px\"}}\r\n                        >\r\n                            Date:\r\n                            <input name=\"date\" className=\"form-control form-center\" \r\n                            type=\"date\" \r\n                            id={\"createQuestion-date\"}\r\n                            value={this.state.date} onChange={this.handleChange}\r\n                            ref={this.dateRef}\r\n                            />\r\n                        </label>\r\n                        <p></p>                        \r\n                        <label\r\n                            style={{fontSize: \"20px\"}}\r\n                        >Survey:\r\n                        <select name=\"dropdownOfSurveys\"\r\n                            id={\"dropdownOfSurveys\"}\r\n                            value={this.state.dropdownOfSurveys}\r\n                            onChange={this.handleDropdownChange}\r\n                            onBlur={this.handleDropdownChange}\r\n                            className=\"form-control form-center\"\r\n                            ref={this.surveySelectionRef}\r\n                            required={true}\r\n                        >\r\n                            {this.getSurveys()}\r\n                        </select> \r\n                        </label>\r\n                        <p></p>\r\n                        <label style={{fontSize: \"20px\"}}>\r\n                            Activate Question after Creation:\r\n                            <p></p>\r\n                            <label className=\"switch\"><input type={\"checkbox\"} id={\"createQuestion-togBtn\"} onClick={this.switchHandler}/>\r\n                                <div className=\"slider round\">\r\n                                <span className=\"on\" style={{textAlign:\"left\"}}>YES</span><span className=\"off\"  style={{textAlign:\"right\"}}>NO</span>\r\n                                </div>\r\n                            </label>\r\n                        </label>\r\n                        <p></p>\r\n                        <label\r\n                            style={{fontSize: \"20px\"}}\r\n                        >Answer Type:\r\n                        <select name=\"answerType\" \r\n                        id={\"createQuestion-answerTypeDropdown\"}\r\n                        value={this.state.answerType} onChange={this.handleChange} \r\n                        className=\"form-control form-center\">\r\n                        <option value=\"shortAnswer\">Short Answer</option>\r\n                        <option value=\"multipleChoice\">Multiple Choice</option>\r\n                        <option value=\"fileUpload\">File Upload</option>\r\n                        </select> \r\n                        </label>\r\n                        <p></p>\r\n                        <AnswerType\r\n                            setAnswer={this.setAnswer}\r\n                            setAcceptableAnswerTypes={this.setAcceptableAnswerTypes}\r\n                        >\r\n                        </AnswerType>\r\n                        <p></p>\r\n                        <button \r\n                        id={\"createQuestion-createQuestionBtn\"}\r\n                        type=\"submit\" style={{width: \"70%\",fontSize: \"36px\"}} \r\n                        className=\"btn btn-primary btn-color-theme\">\r\n                            <span className={this.state.submitIcon}/>&nbsp; {this.state.submitLabel}\r\n                        </button>\r\n                    </center>\r\n                )\r\n                }\r\n          </form>\r\n\r\n        );\r\n    }\r\n}  \r\n\r\nexport default CreateQuestion;","import React from 'react';\r\nimport FileUpload from './AnswerTypes/FileUpload';\r\nimport FreeResponse from './AnswerTypes/FreeResponse';\r\nimport MultipleChoice from './AnswerTypes/MultipleChoice';\r\nimport CreateQuestion from './CreateQuestion';\r\nimport AppMode from '../../AppMode';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nconst answerTypes = {};\r\nanswerTypes[\"multipleChoice\"] = MultipleChoice;\r\nanswerTypes[\"shortAnswer\"] = FreeResponse;\r\nanswerTypes[\"fileUpload\"] = FileUpload;\r\n\r\nclass CreateSurvey extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.courseSelectionRef = React.createRef();\r\n        this.surveyTitleRef = React.createRef();\r\n        this.surveyDateRef = React.createRef();\r\n\r\n        //Create date object for today, taking time zone into consideration\r\n        let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\r\n\r\n        this.state = {\r\n            answerType : \"shortAnswer\",\r\n            question: \"\",\r\n            addSurvey: false,\r\n            surveyTitle : \"\",\r\n            date: today.toISOString().substr(0,10),\r\n            dropdownOfCourses : this.props.userObj.courses.length > 0 ? (this.props.userObj.courses[0].courseSemester + \"-\"  + this.props.userObj.courses[0].courseYear +\r\n            \": \" + this.props.userObj.courses[0].courseName + \"  \" + this.props.userObj.courses[0].courseNumber) : \"\",\r\n            courseID: this.props.userObj.courses.length > 0 ? this.props.userObj.courses[0].courseID : \"\" \r\n        }     \r\n    }\r\n\r\n    // Handles any change that has been made\r\n    handleChange = (event) => {\r\n        const name = event.target.name; \r\n        this.setState({[name]: event.target.value}, this.checkDataValidity);\r\n    }\r\n\r\n    // Handles creation of the new Survey\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(this.state.dropdownOfCourses.length == 0){\r\n        }else{\r\n          var newSurvey = {\r\n            surveyTitle : this.state.surveyTitle,\r\n            surveyDate : this.state.date,\r\n            courseID : this.state.courseID\r\n          };\r\n\r\n          setTimeout(this.props.saveSurvey, 1000, uuid(), newSurvey);\r\n          this.props.changeMode(AppMode.SURVEY_MANAGEMENT_SEARCH_SURVEYS);\r\n        }\r\n    }\r\n\r\n    // Gets the courses for the dropdown\r\n    getCourses = () => {\r\n      var courses = [];\r\n\r\n      for(var index = 0; index < this.props.userObj.courses.length; index++)\r\n      {\r\n        const id = this.props.userObj.courses[index].courseSemester + \"-\"  + this.props.userObj.courses[index].courseYear +\r\n        \": \" + this.props.userObj.courses[index].courseName + \"  \" + this.props.userObj.courses[index].courseNumber;\r\n        courses.push(<option id={this.props.userObj.courses[index].courseID} value={this.props.userObj.courses[index].courseID}>{id}</option>);\r\n      }\r\n\r\n     return courses;\r\n    }\r\n\r\n    // Handles the change for the dropdown option\r\n    handleDropdownChange = (event) => {\r\n      const name = event.target.name; \r\n      this.setState({[name]: event.target.value,\r\n        courseID : event.target.value\r\n      }, this.checkDataValidity);\r\n    }\r\n\r\n    // Checks that the data elements are filled and with the correct information.\r\n    checkDataValidity = () => {\r\n      if(this.state.surveyTitle.length == 0){\r\n          this.surveyTitleRef.current.setCustomValidity(\"Survey title missing.\");\r\n      }\r\n      else{\r\n          this.surveyTitleRef.current.setCustomValidity(\"\");\r\n      }\r\n\r\n      if(this.state.dropdownOfCourses == \"\"){\r\n          this.courseSelectionRef.current.setCustomValidity(\"Course is missing for the survey.\");\r\n      }\r\n      else{\r\n          this.courseSelectionRef.current.setCustomValidity(\"\");\r\n      }\r\n\r\n      let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\r\n      if(this.state.date < today.toISOString().substr(0,10)){\r\n          this.surveyDateRef.current.setCustomValidity(\"Cannot create a survey for day in the past.\");\r\n      }\r\n      else{\r\n          this.surveyDateRef.current.setCustomValidity(\"\");\r\n      }        \r\n  }    \r\n\r\n    render(){\r\n        return(\r\n            <form className=\"padded-page\" id={\"createSurvey-page\"} onSubmit={this.handleSubmit}>\r\n            <center>\r\n              <label>\r\n                Survey Title:\r\n                <input name=\"surveyTitle\" \r\n                id={\"createSurvey-title\"}\r\n                className=\"form-control form-center\"\r\n                value={this.state.surveyTitle}\r\n                onChange={this.handleChange}\r\n                minLength={1}\r\n                ref={this.surveyTitleRef}\r\n                  type=\"text\"/>\r\n              </label>\r\n              <p></p>\r\n              <label>\r\n                Date:\r\n                <input name=\"date\" \r\n                  id={\"createSurvey-date\"}\r\n                  className=\"form-control form-center\" \r\n                  type=\"date\" value={this.state.date} onChange={this.handleChange} \r\n                  ref={this.surveyDateRef}/>\r\n              </label>\r\n              <p></p>\r\n            <p></p>\r\n            <label>Course:\r\n            <select name=\"dropdownOfCourses\" value={this.state.dropdownOfCourses} \r\n              onChange={this.handleDropdownChange}\r\n              onBlur={this.handleDropdownChange}\r\n              id={this.state.courseID}\r\n              defaultValue={this.state.dropdownOfCourses}\r\n              required={true}\r\n              ref={this.courseSelectionRef}\r\n              className=\"form-control form-center\">\r\n                {this.getCourses()}\r\n            </select> \r\n            </label>\r\n            <p></p>\r\n            <button type=\"submit\" \r\n              id={\"createSurvey-creatBtn\"}\r\n              style={{width: \"50%\",fontSize: \"36px\"}}\r\n              className=\"btn btn-primary btn-color-theme\">\r\n              <span className=\"fa fa-plus\"/>&nbsp; Create survey\r\n            </button>\r\n            </center>\r\n          </form>            \r\n        );\r\n    }\r\n}\r\n\r\nexport default CreateSurvey;","import React from 'react';\r\n\r\nclass ActiveQuestions extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <form  id=\"activeQuestionPage\" className=\"padded-page\">\r\n            <center>\r\n                <div class=\"wrapper\">\r\n                    <div className=\"card survey-card\">\r\n                    <button type=\"submit\" style={{width: \"100%\",fontSize: \"17px\"}} \r\n                    className=\"btn btn-primary btn-color-theme\">\r\n                    <span className=\"fa fa-pencil\"/>&nbsp; Edit\r\n                    </button>\r\n                    <div className=\"card-header\">Question 1</div>\r\n                    <div className=\"card-body\">Question Type  <br/>  Content:</div> \r\n                    <div className=\"card-footer\">Course Number  Section</div>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"card survey-card\">\r\n                    <button type=\"submit\" style={{width: \"100%\",fontSize: \"17px\"}} \r\n                    className=\"btn btn-primary btn-color-theme\">\r\n                    <span className=\"fa fa-pencil\"/>&nbsp; Edit\r\n                    </button>\r\n                    <div className=\"card-header\">Question 2</div>\r\n                    <div className=\"card-body\">Question Type  <br/>  Content:</div> \r\n                    <div className=\"card-footer\">Course Number  Section</div>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"card survey-card\">\r\n                    <button type=\"submit\" style={{width: \"100%\",fontSize: \"17px\"}} \r\n                    className=\"btn btn-primary btn-color-theme\">\r\n                    <span className=\"fa fa-pencil\"/>&nbsp; Edit\r\n                    </button>\r\n                    <div className=\"card-header\">Question 3</div>\r\n                    <div className=\"card-body\">Question Type  <br/>  Content:</div> \r\n                    <div className=\"card-footer\">Course Number  Section</div>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"card survey-card\">\r\n                    <button type=\"submit\" style={{width: \"100%\",fontSize: \"17px\"}} \r\n                    className=\"btn btn-primary btn-color-theme\">\r\n                    <span className=\"fa fa-pencil\"/>&nbsp; Edit\r\n                    </button>\r\n                    <div className=\"card-header\">Question 4</div>\r\n                    <div className=\"card-body\">Question Type  <br/>  Content:</div> \r\n                    <div className=\"card-footer\">Course Number  Section</div>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"card survey-card\">\r\n                    <button type=\"submit\" style={{width: \"100%\",fontSize: \"17px\"}} \r\n                    className=\"btn btn-primary btn-color-theme\">\r\n                    <span className=\"fa fa-pencil\"/>&nbsp; Edit\r\n                    </button>\r\n                    <div className=\"card-header\">Question 5</div>\r\n                    <div className=\"card-body\">Question Type  <br/>  Content:</div> \r\n                    <div className=\"card-footer\">Course Number  Section</div>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"card survey-card\">\r\n                    <button type=\"submit\" style={{width: \"100%\",fontSize: \"17px\"}} \r\n                    className=\"btn btn-primary btn-color-theme\">\r\n                    <span className=\"fa fa-pencil\"/>&nbsp; Edit\r\n                    </button>\r\n                    <div className=\"card-header\">Question 6</div>\r\n                    <div className=\"card-body\">Question Type  <br/>  Content:</div> \r\n                    <div className=\"card-footer\">Course Number  Section</div>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"card survey-card\">\r\n                    <button type=\"submit\" style={{width: \"100%\",fontSize: \"17px\"}} \r\n                    className=\"btn btn-primary btn-color-theme\">\r\n                    <span className=\"fa fa-pencil\"/>&nbsp; Edit\r\n                    </button>\r\n                    <div className=\"card-header\">Question 7</div>\r\n                    <div className=\"card-body\">Question Type  <br/>  Content:</div> \r\n                    <div className=\"card-footer\">Course Number  Section</div>\r\n                    </div>\r\n                </div>\r\n            </center>\r\n          </form>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default ActiveQuestions;","\r\nimport React from 'react';\r\n\r\nclass DeleteResponseModal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n      }\r\n\r\n    /* \r\n        Name: deleteResponse\r\n        Purpose: OnClick handler to delete the response.\r\n                Calls the delete response in the SubmittedResponse componenet.\r\n    */      \r\n      deleteResponse = (event) => {\r\n        event.preventDefault();\r\n        this.props.deleteResponse({\r\n            \"responseId\" : this.props.responseItem.response.responseId, \r\n            \"questionID\" : this.props.responseItem.question.questionID,\r\n            \"courseID\" : this.props.responseItem.survey.courseID,\r\n            \"surveyID\" : this.props.responseItem.survey.surveyID\r\n        });\r\n        this.props.closeDeleteResponseModal();\r\n      }\r\n\r\n        /* \r\n            Name: closeModal\r\n            Purpose: Close the modal.\r\n        */ \r\n      closeModal = (event) => {\r\n        event.preventDefault();\r\n        this.props.closeDeleteResponseModal();\r\n      }\r\n\r\n    render(){\r\n        return(\r\n        <div id=\"deleteResponseModal\" className=\"modal\"tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalCenterTitle\" aria-hidden=\"true\">\r\n        <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n            <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n                <h5 className=\"modal-title\" id=\"exampleModalLongTitle\">Delete Response</h5>\r\n                <button type=\"button\" className=\"close\" id=\"deleteResponseModal-closeBtn\" onClick={this.closeModal} data-dismiss=\"modal\" aria-label=\"Close\">\r\n                <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n                Are you sure you want to delete this response?\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                <button type=\"button\" className=\"btn btn-primary\" id=\"deleteResponseModal-cancelBtn\" onClick={this.closeModal} data-dismiss=\"modal\">Close</button>\r\n                <button type=\"button\" onClick={this.deleteResponse} id=\"deleteResponseModal-deleteBtn\" className=\"btn btn-danger\">Delete</button>\r\n            </div>\r\n            </div>\r\n        </div>\r\n        </div>    \r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default DeleteResponseModal;","import React from 'react';\r\n\r\nclass ViewResponse extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      questions : [],\r\n      allResponses : [],\r\n      showConfirmDelete: false\r\n    };\r\n  }\r\n\r\n /* \r\n    Name: handleAnswers\r\n    Purpose: Display the correct answer depending on the type of answer type.\r\n  */\r\n  handleAnswers = () => {\r\n      if(this.props.responseItem.question.questionAnswers.length == 1){\r\n        if(this.props.responseItem.question.questionType == \"FileUpload\" || this.props.responseItem.question.questionType == \"F\"){\r\n            return (\r\n                <iframe\r\n                    id=\"viewResponse-answer-file\"\r\n                    src={this.props.responseItem.question.questionAnswers[0]}\r\n                > </iframe>\r\n            );\r\n        }\r\n        \r\n        return (\r\n            <div id=\"viewResponse-answer-freeResponse\">\r\n                {this.props.responseItem.question.questionAnswers[0]}\r\n            </div>\r\n        );\r\n      }\r\n\r\n    var answers = this.props.responseItem.question.questionAnswers;\r\n    var elements = [];\r\n    answers.forEach((answer) => {\r\n        elements.push(\r\n            <div>{answer}</div>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div id=\"viewResponse-answer-multipleChoice\">{elements}</div>\r\n    );\r\n  }\r\n\r\n  render(){\r\n    return (\r\n        <div id=\"viewResponseModal\" className=\"modal\" itemID=\"exampleModalLong\" tabIndex={-1} role=\"dialog\" aria-labelledby=\"exampleModalLongTitle\" aria-hidden=\"true\">\r\n        <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n            <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n                <h5 className=\"modal-title\" id=\"exampleModalLongTitle\">{this.props.responseItem.survey.surveyTitle}</h5>\r\n                <button type=\"button\" className=\"close\" data-dismiss=\"modal\" id=\"viewResponseModal-exitBtn\"  onClick={ () => { this.props.closeResponse();} } aria-label=\"Close\">\r\n                <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"recipient-name\" style={{fontSize:\"22pt\"}} class=\"col-form-label\">Question:</label>\r\n                    <div class=\"form-control\" id=\"viewResponse-question\">{this.props.responseItem.question.questionText}</div>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"recipient-name\" style={{fontSize:\"22pt\"}} class=\"col-form-label\">Response:</label>\r\n                    <div class=\"form-control\" id=\"viewResponse-response\">{this.props.responseItem.response.surveyResponse}</div>\r\n                </div>       \r\n            </div>\r\n            <div className=\"modal-body\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"recipient-name\" style={{fontSize:\"22pt\"}} class=\"col-form-label\">Answer(s):</label>\r\n                    <div class=\"form-control\" id=\"viewResponse-answer\">{this.handleAnswers()}</div>\r\n                </div>       \r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                <button id=\"viewResponseModal-closeBtn\" type=\"button\" className=\"btn btn-secondary\" onClick={ () => { this.props.closeResponse();}} data-dismiss=\"modal\">Close</button>\r\n                {/* <button type=\"button\" className=\"btn btn-primary\">Save changes</button> */}\r\n            </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    );\r\n  }\r\n\r\n}\r\nexport default ViewResponse;\r\n","import React from 'react';\r\nimport { async } from 'regenerator-runtime';\r\nimport DeleteResponseModal from './DeleteResponseModal';\r\nimport ViewResponse from './viewResponseModal';\r\n\r\n\r\nclass SubmittedResponse extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      questions : this.props.questions,\r\n      responses : this.props.responses,\r\n      showResponseModal : false,\r\n      showConfirmDelete: false,\r\n      editRowId: \"\",\r\n      responseItem : {},\r\n      searchKey : \"\",\r\n      showDeleteResponseModal : false,\r\n\r\n      // Sort state variables\r\n      sortResponseInOrder: false,\r\n      sortDateInOrder: false,\r\n      sortQuestionInOrder: false,\r\n      sortResponseTypeInOrder: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n  }\r\n\r\n  // TO DO Delete all RESPONSES BUTTON\r\n\r\n\r\n  //renderResponseTable -- render an HTML table displaying the responses made\r\n  //by the students of all courses for the instructor and providing buttons to view and delete each response.\r\n  renderResponseTable = (allResponses) => {\r\n  let table = [];\r\n  console.log(\"renderResponseTable\");\r\n  console.log(allResponses);\r\n    var index = 0;\r\n    allResponses.forEach((response)=>{\r\n      console.log(\"index\");\r\n      table.push(\r\n        <tr key={response.surveyID+\"-\"+response.question.questionID+\"-\"+response.responseId+\"-\"+index}>\r\n          <td>{response.responseType}</td>\r\n          <td>{response.question.questionText}</td>\r\n          <td>{response.response.responseDateTime}</td>\r\n          <td>{response.response.surveyResponse}</td>\r\n          <td><button id={response.surveyID+\"-\"+response.question.questionID+\"-\"+response.response.responseId+\"-\"+index+\"-\"+\"view\"} onClick={this.props.menuOpen ? null : () => \r\n          this.viewResponse(response.surveyID+\"-\"+response.question.questionID+\"-\"+response.response.responseId+\"-\"+index)}>\r\n              <span className=\"fa fa-eye\"></span></button></td>\r\n          <td><button id={response.surveyID+\"-\"+response.question.questionID+\"-\"+response.response.responseId+\"-\"+index+\"-\"+\"delete\"} onClick={this.props.menuOpen ? null : \r\n          () => this.confirmDeleteResponse(response.surveyID+\"-\"+response.question.questionID+\"-\"+response.response.responseId+\"-\"+index)}>\r\n              <span className=\"fa fa-trash\"></span></button></td>\r\n        </tr>\r\n      );\r\n      index++;     \r\n    });\r\n  return table;\r\n  }\r\n\r\n\r\n  /* \r\n    Name: ViewResponse\r\n    Purpose: Views a response from the specific row clicked on\r\n  */\r\n  viewResponse = (rowId) => {\r\n    console.log(\"viewResponse: rowId\");\r\n    console.log(rowId);\r\n\r\n    let responseKeys = this.parseResponseRowId(rowId);    \r\n    var response = this.state.responses.find((response) => {\r\n      if((response.surveyID == responseKeys[0]) && (response.questionID == responseKeys[1]) && \r\n      (response.response.responseId == responseKeys[2])){\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n    \r\n    console.log(\"viewResponse: responseObject\");\r\n    console.log(response);\r\n    this.setState({showResponseModal : true, editRowId: rowId, responseItem : response});\r\n    console.log(\"Viewing a response\");\r\n  }\r\n\r\n  /* \r\n    Name: parseResponseRowId\r\n    Purpose: Parses the row key from the response table and returns an array of keys\r\n    in the form: [surveyID, questionID, responseId, index]\r\n  */\r\n  parseResponseRowId = (id) => {\r\n    let keys = id.split(\"-\");\r\n    return keys;\r\n  }\r\n\r\n  /* \r\n    Name: confirmDeleteResponse\r\n    Purpose: Confirms to delete a response from the database given the response object\r\n  */\r\n  confirmDeleteResponse = (rowId) => {\r\n    console.log(\"confirmDeleteResponse: rowId\");\r\n    console.log(rowId);\r\n\r\n    let responseKeys = this.parseResponseRowId(rowId);    \r\n\r\n    var response = this.state.responses.find((response) => {\r\n      if((response.surveyID == responseKeys[0]) && (response.questionID == responseKeys[1]) && \r\n      (response.response.responseId == responseKeys[2])){\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n    \r\n    console.log(\"confirmDeleteResponse: responseObject\");\r\n    console.log(response);\r\n    this.setState({showDeleteResponseModal : true, editRowId: rowId, responseItem : response});\r\n    console.log(\"Deleting a response\");\r\n  }\r\n\r\n  /* \r\n    Name: deleteResponse\r\n    Purpose: Deletes a response from the database given the response object\r\n  */\r\n  deleteResponse = (body) => {\r\n    this.removeResponse(body);\r\n  }\r\n\r\n  /* \r\n    Name: RemoveResponse\r\n    Purpose: Makes a call to delete the response.\r\n  */\r\n  removeResponse = async (body) => {\r\n    const url = '/responses/'\r\n    const res = await fetch(url, {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n            },\r\n        method: 'DELETE',\r\n        body: JSON.stringify(body)}); \r\n    const msg = await res.text();\r\n    if (res.status == 200) {\r\n      this.props.getQuestions();\r\n      return 1;\r\n    } else {\r\n      console.log(res);\r\n      console.log(msg);\r\n      console.log(\"deleteResponse: ERROR\");\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /* \r\n    Name: SearchResponseTable\r\n    Purpose: Given a search query, it searches for responses/questions that contain that search query.\r\n  */\r\n  searchResponseTable = (event) => {\r\n    if(event.keyCode === 13){\r\n      event.preventDefault();\r\n    \r\n      // Do some reduction to only display the elements that match that searchKey -- Responses ONLY not questions.\r\n      if(this.state.searchKey.length > 0){\r\n        this.onSearch(this.state.searchKey);\r\n      }\r\n      else{\r\n        this.setState({\r\n          responses : this.props.responses\r\n        }); \r\n      }\r\n    }\r\n  }\r\n\r\n  /* \r\n    Name: onSearch\r\n    Purpose: Looks for rows that contain the searchTerm by concatenting the text\r\n              for each column except the view/delete columns\r\n  */\r\n  onSearch = (searchTerm) => {\r\n    var oldResponses = this.props.responses;\r\n    var newResponses = [];\r\n    oldResponses.forEach((response) => {\r\n      var rowString = \"\";\r\n      rowString += response.responseType;\r\n      rowString += response.question.questionText + \" \";\r\n      rowString += response.response.responseDateTime + \" \";\r\n      rowString += response.response.surveyResponse + \" \";\r\n\r\n      if(rowString.toUpperCase().indexOf(searchTerm.toUpperCase()) > -1){\r\n        newResponses.push(response);\r\n      }\r\n    });\r\n\r\n    this.setState({\r\n      responses : newResponses\r\n    }); \r\n  }\r\n\r\n  /* SORT METHODS FOR THE TABLE */\r\n\r\n  /* \r\n    Name: sortTable\r\n    Purpose: Sorts the response object given the compareFunction or the kind of \r\n      sorting we are doing function\r\n  */\r\n  sortTable = (searchCriterionCallBack) =>{\r\n    return this.state.responses.sort(searchCriterionCallBack);\r\n  }\r\n\r\n  /* \r\n    Name: onSearchKeyChange\r\n    Purpose: Updates the searchTerm when it changes\r\n  */\r\n  onSearchKeyChange = (event) => {\r\n    this.setState({searchKey : event.target.value});\r\n  }\r\n\r\n  /* \r\n    Name: sortByDate\r\n    Purpose: Sorts the responses by comparing the date the responses were made\r\n  */\r\n  sortByDate = (event) => {\r\n    event.preventDefault();\r\n\r\n    var newResponses = this.sortTable((valueA, valueB) => {\r\n      if(valueA == null || valueB == null){\r\n        if(valueA == null){\r\n          return this.state.sortDateInOrder ? -1 : 1;\r\n        }\r\n        else if(valueB == null){\r\n          return this.state.sortDateInOrder ? 1 : -1;\r\n        }\r\n      }\r\n\r\n      if (valueA.response.responseDateTime < valueB.response.responseDateTime) {\r\n        return this.state.sortDateInOrder ? -1 : 1;\r\n      }\r\n      if (valueA.response.responseDateTime > valueB.response.responseDateTime) {\r\n        return this.state.sortDateInOrder ? 1 : -1;\r\n      }\r\n      return 0;\r\n    });\r\n    \r\n    this.setState({\r\n      responses : newResponses,\r\n      sortDateInOrder : !this.state.sortDateInOrder\r\n    });\r\n  }\r\n\r\n  /* \r\n    Name: sortByQuestion\r\n    Purpose: Sorts the responses by comparing the question text.[Actual question]\r\n  */  \r\n  sortByQuestion = (event) => {\r\n    event.preventDefault();\r\n\r\n    var newResponses = this.sortTable((valueA, valueB) => {\r\n      if(valueA == null || valueB == null){\r\n        if(valueA == null){\r\n          return this.state.sortQuestionInOrder ? -1 : 1;\r\n        }\r\n        else if(valueB == null){\r\n          return this.state.sortQuestionInOrder ? 1 : -1;\r\n        }\r\n      }\r\n\r\n      if (valueA.question.questionText < valueB.question.questionText) {\r\n        return this.state.sortQuestionInOrder ? -1 : 1;\r\n      }\r\n      if (valueA.question.questionText > valueB.question.questionText) {\r\n        return this.state.sortQuestionInOrder ? 1 : -1;\r\n      }\r\n      return 0;\r\n    });\r\n    \r\n    this.setState({\r\n      responses : newResponses,\r\n      sortQuestionInOrder : !this.state.sortQuestionInOrder\r\n    });\r\n  }\r\n\r\n  /* \r\n    Name: sortByResponseType\r\n    Purpose: Sorts the responses by comparing whether the responses are individual or group.\r\n  */\r\n  sortByResponseType = (event) => {\r\n    event.preventDefault();\r\n\r\n    var newResponses = this.sortTable((valueA, valueB) => {\r\n      if(valueA == null || valueB == null){\r\n        if(valueA == null){\r\n          return this.state.sortResponseTypeInOrder ? -1 : 1;\r\n        }\r\n        else if(valueB == null){\r\n          return this.state.sortResponseTypeInOrder ? 1 : -1;\r\n        }\r\n      }\r\n\r\n      if (valueA.responseType < valueB.responseType) {\r\n        return this.state.sortResponseTypeInOrder ? -1 : 1;\r\n      }\r\n      if (valueA.responseType > valueB.responseType) {\r\n        return this.state.sortResponseTypeInOrder ? 1 : -1;\r\n      }\r\n      return 0;\r\n    });\r\n    \r\n    this.setState({\r\n      responses : newResponses,\r\n      sortResponseTypeInOrder : !this.state.sortResponseTypeInOrder\r\n    });\r\n  }\r\n\r\n  /* \r\n    Name: sortByResponse\r\n    Purpose: Sorts the responses by comparing the responses [Alphabet].\r\n  */  \r\n  sortByResponse = (event) => {\r\n    event.preventDefault();\r\n\r\n    var newResponses = this.sortTable((valueA, valueB) => {\r\n      if(valueA == null || valueB == null){\r\n        if(valueA == null){\r\n          return this.state.sortResponseInOrder ? -1 : 1;\r\n        }\r\n        else if(valueB == null){\r\n          return this.state.sortResponseInOrder ? 1 : -1;\r\n        }\r\n      }\r\n\r\n      if (valueA.response.surveyResponse < valueB.response.surveyResponse) {\r\n        return this.state.sortResponseInOrder ? -1 : 1;\r\n      }\r\n      if (valueA.response.surveyResponse > valueB.response.surveyResponse) {\r\n        return this.state.sortResponseInOrder ? 1 : -1;\r\n      }\r\n      return 0;\r\n    });\r\n    \r\n    this.setState({\r\n      responses : newResponses,\r\n      sortResponseInOrder : !this.state.sortResponseInOrder\r\n    });        \r\n  }\r\n\r\n  //render--render the entire responses table with header, displaying a \"No\r\n  //Responses made\" message in case the table is empty.\r\n  render() {\r\n    return(\r\n    <div id=\"responseTableMode\" className=\"padded-page\">\r\n      <h1></h1>\r\n      <div className=\"input-group center-search\" style={{justifyContent: \"center\", paddingBottom: \"20px\"}}>\r\n             <span className=\"input-group-prepend\">\r\n                 <div className=\"input-group-text bg-transparent border-right-0\">\r\n                   <i className=\"fa fa-search\"></i>\r\n                </div>\r\n             </span>\r\n             <input className=\"form-control py-2 border-left-0 border\" placeholder=\"Search responses\" type=\"search\" value={this.state.searchKey} id=\"searchResponses\"\r\n             onKeyUp={this.searchResponseTable} onChange={this.onSearchKeyChange}/>\r\n      </div>     \r\n      <table className=\"table table-hover\">\r\n        <thead className=\"thead-light\">\r\n        <tr>\r\n          <th><span id=\"responseSortQuestionType\" style={{cursor:\"pointer\"}} className=\"fa fa-sort\" onClick={this.sortByResponseType}></span>&nbsp;Response type </th>\r\n          <th><span id=\"responseSortQuestion\" style={{cursor:\"pointer\"}} className=\"fa fa-sort\" onClick={this.sortByQuestion}></span>&nbsp;Question</th>\r\n          <th><span id=\"responseSortDate\" style={{cursor:\"pointer\"}} className=\"fa fa-sort\" onClick={this.sortByDate}></span>&nbsp;Response Date-Time</th>\r\n          <th><span id=\"responseSortResponse\" style={{cursor:\"pointer\"}} className=\"fa fa-sort\" onClick={this.sortByResponse}></span>&nbsp;Response</th>\r\n          <th>View</th>\r\n          <th>Delete</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody id=\"responseTableBody\">\r\n          {Object.keys(this.props.responses).length === 0 ? \r\n          <tr>\r\n          <td colSpan=\"5\" style={{fontStyle: \"italic\"}}>No responses made</td>\r\n          </tr> : this.renderResponseTable(this.state.responses)\r\n          }\r\n        </tbody>\r\n      </table>\r\n      {\r\n        this.state.showResponseModal ?\r\n        <ViewResponse\r\n          closeResponse={() => {this.props.getQuestions(); this.setState({showResponseModal : false})}}\r\n          responseItem={this.state.responseItem}\r\n        >\r\n        </ViewResponse> :\r\n        null\r\n      }\r\n      {this.state.showDeleteResponseModal ?\r\n        <DeleteResponseModal \r\n          closeDeleteResponseModal={() => {this.props.getQuestions(); this.setState({showDeleteResponseModal: false})}}\r\n          responseItem={this.state.responseItem}\r\n          deleteResponse={this.deleteResponse} /> : null\r\n        }\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SubmittedResponse;\r\n","import React from 'react';\r\nimport SearchField from 'react-search-field'\r\n//import ConfirmDeleteRound from './ConfirmDeleteRound.js';\r\n// import AppMode from './../AppMode.js';\r\n\r\nclass SubmittedResponse extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n    onSearchClicked = () => {\r\n        console.log(\"onSearchClicked\");\r\n    }\r\n  //render--render the entire rounds table with header, displaying a \"No\r\n  //Rounds Logged\" message in case the table is empty.\r\n  render() {\r\n    return(\r\n    <div className=\"padded-page\" id={\"searchQuestionsMode\"}>\r\n      <center>\r\n      <h1></h1>\r\n        \r\n         <div className=\"input-group center-search\" style={{justifyContent: \"center\", paddingBottom: \"20px\"}}>\r\n            <SearchField\r\n              classNames=\"search-width\"\r\n              placeholder=\"Search question\"\r\n              onSearchClick={this.onSearchClicked}\r\n          />\r\n             {/* <span className=\"input-group-prepend\">\r\n                 <div className=\"input-group-text bg-transparent border-right-0\"><i className=\"fa fa-search\"></i></div>\r\n             </span>\r\n             <input className=\"form-control py-2 border-left-0 border\" placeholder=\"Search Rounds\" type=\"search\" value=\"\" id=\"searchRounds\"\r\n             onkeyup=\"searchRoundsTable(this.value)\" onSearch onsearch=\"searchRoundsTable(this.value)\"/> */}\r\n         </div>\r\n      <table className=\"table table-hover\">\r\n        <thead className=\"thead-light\">\r\n        <tr>\r\n          <th>Question Title</th>\r\n          <th>Question</th>\r\n          <th>Answer Type</th>\r\n          <th>View/Edit...</th>\r\n          <th>Delete</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n        </tbody>\r\n      </table>\r\n      </center>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SubmittedResponse;","import React from 'react';\r\n\r\nclass SearchSurveys extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n        \r\n      this.state = {\r\n          surveys : this.props.surveys\r\n      };\r\n    }\r\n\r\n    // Renders the survey table with the surveys for the user.\r\n    renderTable = (surveys) => {\r\n        let table = [];\r\n        for (let r = 0; r < surveys.length; r++) {\r\n            table.push(\r\n                <tr key={surveys[r].surveyID+\"-\"+r}>\r\n                <td>{surveys[r].surveyID}</td>\r\n                <td>{surveys[r].surveyTitle}</td>\r\n                <td>{surveys[r].surveyDate}</td>\r\n                <td>{surveys[r].courseID}</td>\r\n                <td id={surveys[r].surveyID+\"-\"+\"questionsLength\"}>{surveys[r].questions.length}</td>\r\n                {/* <td><button id={response.surveyID+\"-\"+index+\"-\"+\"view\"} onClick={this.props.menuOpen ? null : () => \r\n                this.viewResponse(response.surveyID+\"-\"+index)}>\r\n                    <span className=\"fa fa-eye\"></span></button></td> */}\r\n                <td><button id={surveys[r].surveyID+\"-\"+r+\"-\"+\"delete\"} onClick={this.props.menuOpen ? null : \r\n                () => this.confirmDeleteResponse(surveys[r].surveyID+\"-\"+r)}>\r\n                    <span className=\"fa fa-trash\"></span></button></td>\r\n            </tr>\r\n            );\r\n        }\r\n        return table;\r\n    }\r\n\r\n    // Sorts the surveys by the courseID\r\n    sortByCourseID = () => {\r\n        console.log(\"sortByCourseID\");\r\n    }\r\n\r\n    // Sorts the surveys by the Date the survey was created\r\n    sortByDate = () => {\r\n        console.log(\"sortByDate\");\r\n    }\r\n\r\n    // Sorts the surveys by the surveyID\r\n    sortBySurveyID = () => {\r\n        console.log(\"sortBySurveyID\");\r\n    }\r\n\r\n    // Sorts the surveys by the number of questions the survey has\r\n    sortByNumberOfQuestions = () => {\r\n        console.log(\"sortByNumberOfQuestions\");\r\n    }\r\n\r\n    // Sorts the surveys by the the survey title\r\n    sortBySurveyTitle = () => {\r\n        console.log(\"sortBySurveyTitle\");\r\n    }\r\n  \r\n    //render--render the entire surveys table with header, displaying a \"No\r\n    //Responses made\" message in case the table is empty.\r\n    render() {\r\n      return(\r\n      <div id=\"searchSurveyTableMode\" className=\"padded-page\">\r\n        <h1></h1>\r\n        <div className=\"input-group center-search\" style={{justifyContent: \"center\", paddingBottom: \"20px\"}}>\r\n               <span className=\"input-group-prepend\">\r\n                   <div className=\"input-group-text bg-transparent border-right-0\">\r\n                     <i className=\"fa fa-search\"></i>\r\n                  </div>\r\n               </span>\r\n               <input className=\"form-control py-2 border-left-0 border\" placeholder=\"Search responses\" type=\"search\" id=\"searchSurveys\"/>\r\n        </div>     \r\n        <table className=\"table table-hover\">\r\n          <thead className=\"thead-light\">\r\n          <tr>\r\n            <th><span id=\"surveySearch-SurveyID\" style={{cursor:\"pointer\"}} className=\"fa fa-sort\" onClick={this.sortBySurveyID}></span>&nbsp;Survey ID </th>\r\n            <th><span id=\"surveySearch-SurveyTitle\" style={{cursor:\"pointer\"}} className=\"fa fa-sort\" onClick={this.sortBySurveyTitle}></span>&nbsp;Survey Title</th>\r\n            <th><span id=\"surveySearch-Date\" style={{cursor:\"pointer\"}} className=\"fa fa-sort\" onClick={this.sortByDate}></span>&nbsp;Survey Creation Date</th>\r\n            <th><span id=\"surveySearch-CourseID\" style={{cursor:\"pointer\"}} className=\"fa fa-sort\" onClick={this.sortByCourseID}></span>&nbsp;Course ID</th>\r\n            <th><span id=\"surveySearch-NumberOfQuestions\" style={{cursor:\"pointer\"}} className=\"fa fa-sort\" onClick={this.sortByNumberOfQuestions}></span>&nbsp;Number of Questions</th>\r\n            {/* <th>View</th> */}\r\n            <th>Delete</th>\r\n          </tr>\r\n          </thead>\r\n          <tbody id=\"searchSurveyTableBody\">\r\n            {Object.keys(this.props.surveys).length === 0 ? \r\n            <tr>\r\n            <td colSpan=\"5\" style={{fontStyle: \"italic\"}}>No surveys created</td>\r\n            </tr> : this.renderTable(this.state.surveys)\r\n            }              \r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default SearchSurveys;","import React from 'react';\r\nimport CreateSurvey from './SurveyManagement/CreateSurvey.js';\r\nimport ActiveQuestions from './SurveyManagement/ActiveQuestions.js'\r\nimport SubmittedResponse from './SurveyManagement/SubmittedResponse.js'\r\nimport AppMode from './../AppMode.js'\r\nimport SearchQestions from './SurveyManagement/SearchQuestions.js'\r\nimport CreateQuestion from './SurveyManagement/CreateQuestion.js';\r\nimport SearchSurveys from './SurveyManagement/SearchSurveys.js';\r\n\r\nclass SurveyManagementPage extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            questions: [],\r\n            responses: [],\r\n            surveys : [],\r\n            errorMsg : \"\",\r\n            deleteId: \"\",\r\n            editId: \"\"\r\n        };\r\n\r\n        this.getQuestions();\r\n    }\r\n\r\n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\r\n    //the user is considering deleting.\r\n    setDeleteId = (val) => {\r\n        this.setState({deleteId: val});\r\n    }\r\n\r\n    //setEditId -- Capture in this.state.editId the unique id of the item\r\n    //the user is considering editing.\r\n    setEditId = (val) => {\r\n        this.setState({editId: val});\r\n    }\r\n\r\n    /*\r\n        Save a question to the mongoDB \r\n    */\r\n    saveQuestion = async (surveyId, newQuestion) => {\r\n        const url = '/questions/' + surveyId;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'POST',\r\n            body: JSON.stringify(newQuestion)});\r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            await this.getQuestions();\r\n            this.props.changeMode(AppMode.SURVEY_MANAGEMENT_SEARCH);\r\n        } else {\r\n            this.setState({errorMsg: \"\"});\r\n            await this.getQuestions();\r\n            this.props.refreshOnUpdate(AppMode.SURVEY_MANAGEMENT_SEARCH);\r\n        }\r\n    }\r\n\r\n    /*\r\n        Edit a question to the mongoDB \r\n    */\r\n    editQuestion = async (surveyId, updatedQuestion) => {\r\n        const url = '/questions/' + surveyId + '/' + \r\n            this.props.userObj.questions[this.state.editId]._id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'PUT',\r\n            body: JSON.stringify(updatedQuestion)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            alert(\"An error occurred when attempting to update the question to database: \" \r\n            + msg);\r\n            this.props.changeMode(AppMode.SURVEY_MANAGEMENT_SEARCH);\r\n        } else {\r\n            console.log(\"Question Updated!\");\r\n            this.props.refreshOnUpdate(AppMode.SURVEY_MANAGEMENT_SEARCH);\r\n        }\r\n    }\r\n\r\n    //deleteQuestion -- Delete the current user's question uniquely identified by\r\n    //this.state.deleteId, delete from the database, and reset deleteId to empty.\r\n    deleteQuestion = async () => {\r\n        const url = '/questions/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.entries[this.state.deleteId]._id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'DELETE'\r\n            //body: JSON.stringify()\r\n        }); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            alert(\"An error occurred when attempting to delete question in database: \" \r\n            + msg);\r\n            this.props.changeMode(AppMode.SURVEY_MANAGEMENT_SEARCH);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.SURVEY_MANAGEMENT_SEARCH);\r\n        }\r\n    }\r\n\r\n    /*\r\n        Save a survey to the mongoDB \r\n    */\r\n    saveSurvey = async (surveyID, newSurvey) => {\r\n        const url = '/surveys/' + surveyID;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'POST',\r\n            body: JSON.stringify(newSurvey)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            await this.getQuestions();\r\n            this.props.changeMode(AppMode.SURVEY_MANAGEMENT_SEARCH_SURVEYS);\r\n        } else {\r\n            this.setState({errorMsg: \"\"});\r\n            await this.getQuestions();\r\n            this.props.refreshOnUpdate(AppMode.SURVEY_MANAGEMENT_SEARCH_SURVEYS);\r\n        }\r\n    }\r\n\r\n    /* \r\n        Name: getQuestions\r\n        Purpose: Gets all of the questions, surveys, and responses for the particular instructor.\r\n    */     \r\n    getQuestions = async () => {\r\n\r\n        var courses = [];\r\n        courses = this.props.userObj.courses.map((course) => {\r\n            return course.courseID;\r\n        });\r\n\r\n        if(courses.length == 0){\r\n            courses = [\"\"]\r\n        }\r\n\r\n        let response = await fetch(\"/responses/\" + this.props.userObj.id+\"/\"+JSON.stringify(courses)); //[\"cpts489Fall2020\"]\r\n    \r\n        if (response.status == 200) {\r\n            response = await response.json();\r\n            const obj = JSON.parse(response);    \r\n        \r\n            var getAllResponses = (questions) => {\r\n                if(questions.length == 0){\r\n                  return [];\r\n                }\r\n            \r\n                var responses = [];\r\n                var newquestions = [];\r\n                questions.forEach((survey) => {\r\n                  survey.questions.forEach((question) => {\r\n                    newquestions.push({\r\n                        questionID: question.questionID,\r\n                        surveyID: survey.surveyID,\r\n                        responses: question.responses,\r\n                        survey: survey,\r\n                        question: question\r\n                      });\r\n                    question.responses.forEach((response) => {\r\n                        responses.push({\r\n                          questionID: question.questionID,\r\n                          surveyID: survey.surveyID,\r\n                          response: response,\r\n                          survey: survey,\r\n                          question: question,\r\n                          responseType: response.students.length > 1 ? \"Group\" : \"Individual\"\r\n                        });\r\n                    });\r\n                  });\r\n                });\r\n                return [responses, newquestions];\r\n              }\r\n    \r\n            var data = getAllResponses(obj);\r\n            this.setState({\r\n              surveys : obj,\r\n              questions : data[1],\r\n              responses : data[0]\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        switch(this.props.mode) {\r\n            case AppMode.SURVEY_MANAGEMENT:\r\n                return (\r\n                    <>\r\n                    <ActiveQuestions>\r\n                    </ActiveQuestions>\r\n                    </>\r\n                );\r\n            case AppMode.SURVEY_MANAGEMENT_CREATE:\r\n                return (\r\n                    <CreateQuestion\r\n                    userObj={this.props.userObj}\r\n                    surveys={this.state.surveys}\r\n                    mode={this.props.mode}\r\n                    changeMode={this.props.changeMode}\r\n                    saveQuestion={this.saveQuestion}\r\n                    >\r\n                    </CreateQuestion>\r\n                );\r\n            case AppMode.SURVEY_MANAGEMENT_EDIT:\r\n                let thisEntry = {...this.props.userObj.questions[this.state.editId]}\r\n                thisEntry.date = thisEntry.date.substr(0,10);\r\n                return (\r\n                    <CreateQuestion\r\n                    startData={thisEntry}\r\n                    surveys={this.state.surveys}\r\n                    mode={this.props.mode}\r\n                    changeMode={this.props.changeMode}\r\n                    saveQuestion={this.saveQuestion}\r\n                    editQuestion={this.editQuestion}\r\n                    >\r\n                    </CreateQuestion>\r\n                );\r\n            case AppMode.SURVEY_MANAGEMENT_CREATE_SURVEY:\r\n                return (\r\n                    <CreateSurvey \r\n                    userObj={this.props.userObj}\r\n                    surveys={this.state.surveys}\r\n                    changeMode={this.props.changeMode}\r\n                    saveSurvey={this.saveSurvey}\r\n                    >\r\n                    </CreateSurvey>\r\n                );\r\n            case AppMode.SURVEY_MANAGEMENT_SEARCH:\r\n                return (\r\n                    <SearchQestions\r\n                    setEditId={this.setEditId}\r\n                    setDeleteId={this.setDeleteId}\r\n                    deleteQuestion={this.deleteQuestion}\r\n                    >\r\n                    </SearchQestions>\r\n                );\r\n            case AppMode.SURVEY_MANAGEMENT_SEARCH_SURVEYS:\r\n                return (\r\n                    <SearchSurveys\r\n                    surveys={this.state.surveys}\r\n                    getQuestions={this.getQuestions}\r\n                    menuOpen={this.props.menuOpen}\r\n                    >\r\n                    </SearchSurveys>\r\n                );\r\n            case AppMode.SURVEY_MANAGEMENT_RESPONSES:\r\n                return (\r\n                    <SubmittedResponse\r\n                    userObj={this.props.userObj}\r\n                    getQuestions={this.getQuestions}\r\n                    questions={this.state.questions}\r\n                    responses={this.state.responses}\r\n                    menuOpen={this.props.menuOpen}\r\n                    >\r\n                    </SubmittedResponse>\r\n                );\r\n        }\r\n    }   \r\n}\r\n\r\nexport default SurveyManagementPage;\r\n\r\n\r\n/*\r\n    CODE TO HOW HOW TO CALL THE METHODS FOR RESPONSE\r\n\r\nBELOW IS HOW YOU CAN CALL THE GET METHOD FOR responses\r\n        const url = '/responses/' + this.props.userObj.id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'GET',\r\n            body: JSON.stringify({\"courses\": [\"cpts489Fall2020\"]})}); \r\n        const msg = await res.text();\r\n        if (res.status == 200) {\r\n          console.log(\"getQuestions: SUCCESS\");\r\n          console.log(res);\r\n          console.log(msg);\r\n        } else {\r\n          console.log(res);\r\n          console.log(msg);\r\n          console.log(\"getQuestions: ERROR\");\r\n        }\r\n\r\n    \r\nBELOW IS HOW YOU CAN CALL THE CREATE METHOD FOR responses\r\n    var newResponse = {\r\n    \"students\": [\r\n        {\r\n        \"userID\": \"marco.arceo@wsu.edu\",\r\n        \"studentDisplayName\": \"marco.arceo@wsu.edu\"\r\n        }],\r\n    \"responseId\": \"rID55\",\r\n    \"responseDateTime\": \"Wed Nov 12 2020 14:19:12 GMT-0800\",\r\n    \"surveyResponse\": \"Choice 5\"\r\n    }\r\n\r\n    var newData = {\r\n    \"response\" : newResponse,\r\n    \"questionID\": \"questionID1\",\r\n    \"courseID\": \"cpts489Fall2020\",\r\n    \"surveyID\": \"testID\",\r\n    }\r\n    \r\n    \r\n    const url = '/responses/';// + this.props.userObj.id;\r\n    const res = await fetch(url, {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n            },\r\n        method: 'POST',\r\n        body: JSON.stringify(newData)}); \r\n    const msg = await res.text();\r\n    if (res.status == 200) {\r\n        console.log(\"getQuestions: SUCCESS\");\r\n        console.log(res);\r\n        console.log(msg);\r\n    } else {\r\n        console.log(res);\r\n        console.log(msg);\r\n        console.log(\"getQuestions: ERROR\");\r\n    }\r\n*/","import React from 'react';\r\n\r\nclass ConfirmDeleteRound extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <center>\r\n                <h3 className=\"modal-title\"><b>Confirm Round Deletion</b></h3>\r\n              </center>\r\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\r\n                 &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p>Do you really want to delete this round?</p>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteRound}>\r\n                  Yes, Delete</button>\r\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\r\n                  No, Cancel</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmDeleteRound;","import React from 'react';\r\nimport ConfirmDeleteRound from './ConfirmDeleteRound.js';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass RoundsTable extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {showConfirmDelete: false};\r\n  }\r\n\r\n  //editRound -- Triggered when the user clicks the edit button for a given\r\n  //round. The id param is the unique property that identifies the round.\r\n  //Set the state variable representing the id of the round to be edited and\r\n  //then switch to the ROUNDS_EDITROUND mode to allow the user to edit the\r\n  //chosen round.\r\n  editRound = (id) => {\r\n    this.props.setEditId(id);\r\n    this.props.changeMode(AppMode.ROUNDS_EDITROUND);\r\n  }\r\n\r\n  //deleteRound -- Triggered when the user clicks on the \"Yes, Delete\"\r\n  //button in the Confirm Delete dialog box. It executes the deletion and\r\n  //closes the dialog box.\r\n  deleteRound = () => {\r\n    this.props.deleteRound();\r\n    this.setState({showConfirmDelete: false});\r\n  }\r\n\r\n\r\n  //confirmDelete -- Triggered when the user clicks the delete button\r\n  //for a given round. The id paam is the unique property that \r\n  //identifies the round. Set the state variable representing the id\r\n  //of the round to be deleted and then present a dialog box asking\r\n  //the user to confirm the deletion.\r\n  confirmDelete = (id) => {\r\n    this.props.setDeleteId(id);\r\n    this.setState({showConfirmDelete: true});\r\n  }\r\n\r\n\r\n  //renderTable -- render an HTML table displaying the rounds logged\r\n  //by the current user and providing buttons to view/edit and delete each round.\r\n  renderTable = () => {\r\n  let table = [];\r\n  for (let r = 0; r < this.props.rounds.length; ++r) {\r\n    table.push(\r\n      <tr key={r}>\r\n        <td>{this.props.rounds[r].date.substring(0,10)}</td>\r\n        <td>{this.props.rounds[r].course}</td>\r\n        <td>{(Number(this.props.rounds[r].strokes) + \r\n              Number(this.props.rounds[r].minutes)) +\r\n              \":\" + (this.props.rounds[r].seconds < 10 ?  \r\n                \"0\" + this.props.rounds[r].seconds :\r\n                this.props.rounds[r].seconds) + \" (\" + \r\n              this.props.rounds[r].strokes + \r\n              \" in \" + this.props.rounds[r].minutes + \":\" + \r\n              (this.props.rounds[r].seconds < 10 ?  \r\n                \"0\" + this.props.rounds[r].seconds :\r\n                this.props.rounds[r].seconds) + \")\"}\r\n        </td>\r\n        <td><button onClick={this.props.menuOpen ? null : () => \r\n          this.editRound(r)}>\r\n              <span className=\"fa fa-eye\"></span></button></td>\r\n        <td><button onClick={this.props.menuOpen ? null : \r\n          () => this.confirmDelete(r)}>\r\n              <span className=\"fa fa-trash\"></span></button></td>\r\n      </tr> \r\n    );\r\n  }\r\n  return table;\r\n  }\r\n\r\n  //render--render the entire rounds table with header, displaying a \"No\r\n  //Rounds Logged\" message in case the table is empty.\r\n  render() {\r\n    return(\r\n    <div className=\"padded-page\">\r\n      <h1></h1>\r\n      <table className=\"table table-hover\">\r\n        <thead className=\"thead-light\">\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>Course</th>\r\n          <th>Score</th>\r\n          <th>View/Edit...</th>\r\n          <th>Delete</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n          {Object.keys(this.props.rounds).length === 0 ? \r\n          <tr>\r\n          <td colSpan=\"5\" style={{fontStyle: \"italic\"}}>No rounds logged</td>\r\n          </tr> : this.renderTable()\r\n          }\r\n        </tbody>\r\n      </table>\r\n      {this.state.showConfirmDelete ?\r\n        <ConfirmDeleteRound \r\n          close={() => this.setState({showConfirmDelete: false})} \r\n          deleteRound={this.deleteRound} /> : null}\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RoundsTable;\r\n","import React from 'react';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass RoundForm extends React.Component {\r\n  constructor(props) {\r\n  super(props);\r\n  //Create date object for today, taking time zone into consideration\r\n  let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\r\n  //store date as ISO string\r\n  if (this.props.mode === AppMode.ROUNDS_LOGROUND) {\r\n    //If logging a new round, the starting state is a default round with\r\n    //today's date.\r\n    this.state = {date:  today.toISOString().substr(0,10), \r\n                  course: \"\",\r\n                  type: \"practice\",\r\n                  holes: \"18\",\r\n                  strokes: 80,\r\n                  minutes: 50,\r\n                  seconds: \"00\",\r\n                  notes: \"\",\r\n                  faIcon: \"fa fa-save\",\r\n                  btnLabel: \"Save Round Data\"}\r\n  } else {\r\n    //if editing an existing round, the starting state is the round's\r\n    //current data\r\n    let thisRound = {...this.props.startData};\r\n    delete thisRound.id;\r\n    thisRound.faIcon = \"fa fa-edit\";\r\n    thisRound.btnLabel = \"Update Round Data\";\r\n    this.state = thisRound;\r\n  }\r\n}\r\n  \r\n  \r\n    handleChange = (event) => {\r\n        const name = event.target.name;\r\n        if (name === \"seconds\") {\r\n          let newSec = (event.target.value.length < 2 ? \"0\" + \r\n            event.target.value : event.target.value);\r\n          let newSGS = this.computeSGS(this.state.strokes, this.state.minutes, \r\n                                       newSec);\r\n          this.setState({seconds: newSec, SGS: newSGS});\r\n        } else if (name === \"strokes\") {\r\n          let newStrokes = event.target.value;\r\n          let newSGS = this.computeSGS(newStrokes, this.state.minutes, \r\n            this.state.seconds);\r\n          this.setState({strokes: newStrokes, SGS: newSGS});\r\n        } else if (name === \"minutes\") {\r\n            let newMin = event.target.value;\r\n            let newSGS = this.computeSGS(this.state.strokes, newMin, \r\n              this.state.seconds);\r\n            this.setState({minutes: newMin, SGS: newSGS});\r\n        } else {\r\n          this.setState({[name]: event.target.value});\r\n        }\r\n    }\r\n  \r\n  \r\n    //handleSubmit -- When the user clicks on the button to save/update the\r\n    //round, start the spinner and invoke the parent component's saveRound\r\n    //method to do the actual work. Note that saveRound is set to the correct\r\n    //parent method based on whether the user is logging a new round or editing\r\n    //an existing round.\r\n    handleSubmit = (event) => {\r\n        //start spinner\r\n        this.setState({faIcon: \"fa fa-spin fa-spinner\",\r\n                        btnLabel: (this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                                    \"Saving...\" : \"Updating...\")});\r\n        //Prepare current round data to be saved\r\n        let roundData = this.state;\r\n        delete roundData.faIcon;\r\n        delete roundData.btnLabel;\r\n        //call saveRound on 1 second delay to show spinning icon\r\n        setTimeout(this.props.saveRound,1000,roundData); \r\n        event.preventDefault(); \r\n        }\r\n  \r\n\r\n    computeSGS = (strokes, min, sec) => {\r\n      return (Number(strokes) + Number(min)) \r\n                  + \":\" + sec;\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <form className=\"padded-page\" onSubmit={this.handleSubmit}>\r\n          <center>\r\n            <label>\r\n              Date:\r\n              <input name=\"date\" className=\"form-control form-center\" \r\n                type=\"date\" value={this.state.date} onChange={this.handleChange} />\r\n            </label>\r\n            <p></p>\r\n            <label>\r\n              Course:\r\n              <input name=\"course\" className=\"form-control form-center\" type=\"text\"\r\n                value={this.state.course} onChange={this.handleChange}\r\n                placeholder=\"Course played\" size=\"50\" maxLength=\"50\" />\r\n            </label>\r\n          <p></p>\r\n          <label>Type:\r\n          <select name=\"type\" value={this.state.type} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"practice\">Practice</option>\r\n            <option value=\"tournament\">Tournament</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Holes:\r\n          <select name=\"holes\" value={this.state.holes} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"9\">9</option>\r\n            <option value=\"18\">18</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Strokes:\r\n          <input name=\"strokes\" className=\"form-control form-center\" type=\"number\" \r\n            min=\"9\" max=\"200\" value={this.state.strokes} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Time: <br></br>\r\n          <input name=\"minutes\" type=\"number\" size=\"3\"\r\n            min=\"10\" max=\"400\" value={this.state.minutes}\r\n            onChange={this.handleChange} />:  \r\n          <input name=\"seconds\" type=\"number\" size=\"2\"\r\n            min=\"0\" max=\"60\" value={this.state.seconds} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Speedgolf Score: <br></br>\r\n              <input name=\"SGS\" className=\"form-center\" type=\"text\" size=\"6\" \r\n                disabled={true} value={this.computeSGS(this.state.strokes,this.state.minutes,this.state.seconds)} />\r\n          </label>\r\n          <p></p>\r\n          <label>Notes:\r\n              <textarea name=\"notes\" className=\"form-control\" rows=\"6\" cols=\"75\" \r\n                placeholder=\"Enter round notes\" value={this.state.notes} \r\n                onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <p></p>\r\n          <button type=\"submit\" style={{width: \"70%\",fontSize: \"36px\"}} \r\n            className=\"btn btn-primary btn-color-theme\">\r\n              <span className={this.state.faIcon}/>&nbsp;{this.state.btnLabel}\r\n          </button>\r\n          </center>\r\n        </form>\r\n      );\r\n    }\r\n}\r\n\r\nexport default RoundForm;","import React from 'react';\r\n\r\nclass FloatingButton extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className={(this.props.upload ? \"floatbtn-upload\" : \"floatbtn\")} onClick={this.props.handleClick}>\r\n          <span className={(this.props.upload ? \"floatbtn-icon fa fa-upload\" : \"floatbtn-icon fa fa-plus\")}></span>\r\n        </div>  \r\n      );\r\n    }\r\n}\r\n\r\nexport default FloatingButton;\r\n","//Rounds -- A parent component for the app's \"rounds\" mode.\r\n//Manages the rounds data for the current user and conditionally renders the\r\n//appropriate rounds mode page based on App's mode, which is passed in as a prop.\r\n\r\nimport React from 'react';\r\nimport AppMode from './../AppMode.js';\r\nimport RoundsTable from './RoundsTable.js';\r\nimport RoundForm from './RoundForm.js';\r\nimport FloatingButton from './FloatingButton.js';\r\n\r\nclass Rounds extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor() {\r\n        super();\r\n        this.deleteId = \"\";\r\n        this.editId = \"\";\r\n        this.state = {errorMsg: \"\"};           \r\n    }\r\n\r\n    //addRound -- Given an object newData containing a new round, use the \r\n    //server POST route to add the new round to the database. If the add is\r\n    //successful, call on the refreshOnUpdate() method to force the parent\r\n    //App component to refresh its state from the database and re-render itself,\r\n    //allowing the change to be propagated to the Rounds table. Then switch\r\n    //the mode back to AppMode.ROUNDS since the user is done adding a round.\r\n    addRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'POST',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.setState({errorMsg: \"\"});\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n    //editRound -- Given an object newData containing updated data on an\r\n    //existing round, update the current user's round in the database. \r\n    //toggle the mode back to AppMode.ROUNDS since the user is done editing the\r\n    //round. \r\n    editRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.editId]._id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'PUT',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n\r\n    //deleteRound -- Delete the current user's round uniquely identified by\r\n    //this.state.deleteId, delete from the database, and reset deleteId to empty.\r\n    deleteRound = async () => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.deleteId]._id;\r\n        const res = await fetch(url, {method: 'DELETE'}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: \"An error occurred when attempting to delete round from database: \" \r\n            + msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }  \r\n    }\r\n \r\n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\r\n    //the user is considering deleting.\r\n    setDeleteId = (val) => {\r\n        this.deleteId = val;\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n\r\n    //setEditId -- Capture in this.state.editId the unique id of the item\r\n    //the user is considering editing.\r\n    setEditId = (val) => {\r\n        this.editId = val;\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n\r\n    closeErrorMsg = () => {\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n    \r\n    //render -- Conditionally render the Rounds mode page as either the rounds\r\n    //table, the rounds form set to obtain a new round, or the rounds form set\r\n    //to edit an existing round.\r\n    render() {\r\n        switch(this.props.mode) {\r\n            case AppMode.ROUNDS:\r\n                return (\r\n                    <>\r\n                    {this.state.errorMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.errorMsg}</span>\r\n                       <button className=\"modal-close\" onClick={this.closeErrorMsg}>\r\n                          <span className=\"fa fa-times\"></span>\r\n                        </button></div>: null}\r\n                    <RoundsTable \r\n                        rounds={this.props.userObj.rounds}\r\n                        setEditId={this.setEditId}\r\n                        setDeleteId={this.setDeleteId}\r\n                        deleteRound={this.deleteRound}\r\n                        changeMode={this.props.changeMode}\r\n                        menuOpen={this.props.menuOpen} /> \r\n                    <FloatingButton\r\n                        handleClick={() => \r\n                        this.props.changeMode(AppMode.ROUNDS_LOGROUND)}\r\n                        menuOpen={this.props.menuOpen}\r\n                        icon={\"fa fa-plus\"} />\r\n                    </>\r\n                );\r\n            case AppMode.ROUNDS_LOGROUND:\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={\"\"} \r\n                        saveRound={this.addRound} />\r\n                );\r\n            case AppMode.ROUNDS_EDITROUND:\r\n                let thisRound = {...this.props.userObj.rounds[this.editId]};\r\n                thisRound.date = thisRound.date.substr(0,10);\r\n                if (thisRound.seconds < 10) {\r\n                    thisRound.seconds = \"0\" + thisRound.seconds;\r\n                } \r\n                delete thisRound.SGS;\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={thisRound} \r\n                        saveRound={this.editRound} />\r\n                );\r\n        }\r\n    }\r\n\r\n}   \r\n\r\nexport default Rounds;\r\n","// Students table displays the students in a currently selected course\r\n\r\nimport React from 'react';\r\nimport AppMode from \"./../../AppMode.js\";\r\n\r\nclass StudentsTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    // handles a click on edit student button in the table\r\n    editStudent = (userId) => {\r\n        console.log(\"Editing student: \" + userId);\r\n    }\r\n\r\n    // handles a click on delete student button in the table\r\n    deleteStudent = (userId) => {\r\n        console.log(\"Deleting student: \" + userId);\r\n    }\r\n\r\n    //renderTable -- render an HTML table displaying the rounds logged\r\n    //by the current user and providing buttons to view/edit and delete each round.\r\n    renderTable = () => {\r\n        let table = [];\r\n        for (const r in this.props.students) {\r\n        table.push(\r\n            <tr key={r}>\r\n            <td>{this.props.students[r].userID}</td>\r\n            <td>{this.props.students[r].studentDisplayName}</td>\r\n            {this.props.userType === \"Instructor\" ? \r\n                <div className=\"instructor-buttons\">\r\n                    <td><button onClick={this.props.menuOpen ? null : () => \r\n                        this.editStudent(this.props.students[r].userID)}>\r\n                            <span className=\"fa fa-pencil-square-o\"></span></button></td>\r\n                    <td><button onClick={this.props.menuOpen ? null : () => \r\n                        this.deleteStudent(this.props.students[r].userID)}>\r\n                            <span className=\"fa fa-trash-o\"></span></button></td>\r\n                </div> : null}\r\n            </tr> \r\n        );\r\n        }\r\n      return table;\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"padded-page\">\r\n                <h1></h1>\r\n                <table id=\"StudentsTable\" className=\"table table-hover\">\r\n                    <thead className=\"thead-light\">\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>ID</th>\r\n                        {this.props.userType === \"Instructor\" ? \r\n                        <div className=\"instructor-buttons\">\r\n                            <th>Edit</th>\r\n                            <th>Delete</th>\r\n                        </div> : null}\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {Object.keys(this.props.students).length === 0 ? \r\n                        <tr>\r\n                        <td colSpan=\"5\" style={{fontStyle: \"italic\"}}>There aren't any students in this course</td>\r\n                        </tr> : this.renderTable()\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default StudentsTable;","// A modal to confirm deletion of a course\r\n\r\nimport React from 'react';\r\nimport AppMode from \"./../../AppMode.js\";\r\n\r\nclass DeleteCourse extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    // handles the modal closure\r\n    handleCloseModal = (event) => {\r\n        event.preventDefault();\r\n        this.props.changeMode(AppMode.COURSES);\r\n    }\r\n\r\n    handleDelete = (event) => {\r\n        event.preventDefault();\r\n        this.props.deleteCourse(this.props.courseId);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n                <div id=\"ConfirmCourseDeleteModal\" className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                    <center>\r\n                        <h3 className=\"modal-title\"><b>Are you sure you'd like to delete {this.props.courseName}?</b></h3>\r\n                    </center>\r\n                    <button id=\"modalClose\" className=\"modal-close\" onClick={this.handleCloseModal}>\r\n                        &times;</button>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                    <form onSubmit={this.handleDelete}>\r\n                        <button role=\"submit\" className=\"btn btn-primary\">\r\n                            Confirm</button>\r\n                            <button className=\"btn btn-secondary\" onClick={this.handleCloseModal}>\r\n                            Cancel</button>\r\n                        <br />\r\n                    </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DeleteCourse;","// A modal component that instructors use to create new courses\r\n\r\nimport React from 'react';\r\nimport AppMode from \"./../../AppMode.js\";\r\n\r\nclass EditCourse extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.numberRef = React.createRef();\r\n        this.semesterRef = React.createRef();\r\n        this.yearRef = React.createRef();\r\n\r\n        this.state = {\r\n            name: \"\",\r\n            number: \"\",\r\n            id: \"\",\r\n            semester: \"\",\r\n            year: \"\",\r\n            instructorFirstName: \"\",\r\n            instructorLastName: \"\",\r\n            enrollmentLimit: \"\",\r\n            currentlyEnrolled: \"\",\r\n            notes: \"\",\r\n        };\r\n        this.componentDidMount = this.componentDidMount.bind(this);\r\n    }\r\n\r\n    //componentDidMount -- grab the course data from the database and push them into the state.\r\n    async componentDidMount() {\r\n            //obtain current course data from database and push into state\r\n            const url = \"/courses/\" + this.props.userId;\r\n            const res = await fetch(url);\r\n            const json = await res.json();\r\n            const userData = JSON.parse(json);\r\n\r\n            let currCourse = userData.filter(function (course) {\r\n                return course.courseID === this.props.courseId;\r\n            }.bind(this))\r\n\r\n            currCourse = currCourse[0];\r\n\r\n            this.setState({\r\n                instructorFirstName: currCourse.courseInstructorFirstName,\r\n                instructorLastName: currCourse.courseInstructorLastName,\r\n                name: currCourse.courseName,\r\n                number: currCourse.courseNumber,\r\n                year: currCourse.courseYear,\r\n                semester: currCourse.courseSemester,\r\n                enrollmentLimit: currCourse.courseEnrollmentLimit,\r\n                currentlyEnrolled: currCourse.courseCurrentlyEnrolled,\r\n                id: currCourse.courseID,\r\n                notes: currCourse.courseNotes\r\n            });\r\n    }\r\n\r\n    // handles the modal closure\r\n    handleCloseModal = (event) => {\r\n        event.preventDefault();\r\n        this.props.changeMode(AppMode.COURSES);\r\n    }\r\n\r\n    // handles create button click\r\n    handleEditSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const newCourse = {\r\n            courseInstructorFirstName: this.state.instructorFirstName,\r\n            courseInstructorLastName: this.state.instructorLastName,\r\n            courseInstructorID: this.props.instructorId,\r\n            courseName: this.state.name,\r\n            courseNumber: this.state.number,\r\n            courseYear: this.state.year,\r\n            courseSemester: this.state.semester,\r\n            courseEnrollmentLimit: this.state.enrollmentLimit,\r\n            courseCurrentlyEnrolled: this.state.currentlyEnrolled,\r\n            courseID: this.state.id,\r\n            courseNotes: this.state.notes\r\n        };\r\n\r\n        this.props.editCourse(newCourse);\r\n        this.props.changeMode(AppMode.COURSES);\r\n    }\r\n\r\n    // called everytime a field in the form changes value\r\n    handleChange = (event) => {\r\n        const name = event.target.name;\r\n\r\n        // Update the courseID if number, semester, or year has changed\r\n        if (name === \"number\" || name === \"semester\" || name === \"year\"){\r\n            let newCourseId = this.numberRef.current.value + this.semesterRef.current.value + this.yearRef.current.value;\r\n            this.setState({id : newCourseId});\r\n        }\r\n\r\n        this.setState({[name]: event.target.value});\r\n    }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n                <div id=\"AddCourseModal\" className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                    <center>\r\n                        <h3 className=\"modal-title\"><b>Edit {this.props.courseName}</b></h3>\r\n                    </center>\r\n                    <button id=\"modalClose\" className=\"modal-close\" onClick={this.handleCloseModal}>\r\n                        &times;</button>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                    <form onSubmit={this.handleEditSubmit}>\r\n                        <label>\r\n                            Course Name:\r\n                            <br/>\r\n                            <input name=\"name\" className=\"form-control form-center\" type=\"text\"\r\n                                value={this.state.name} onChange={this.handleChange}\r\n                                placeholder=\"Course name\" size=\"50\" maxLength=\"50\" required={true}/>\r\n                        </label>\r\n                        <p></p>\r\n                        <label>\r\n                            Course Number:\r\n                            <br/>\r\n                            <input name=\"number\" className=\"form-control form-center\" type=\"text\"\r\n                                value={this.state.number} onChange={this.handleChange} ref={this.numberRef}\r\n                                placeholder=\"Course number\" size=\"50\" maxLength=\"50\" required={true}/>\r\n                        </label>\r\n                        <p></p>\r\n                        <label>\r\n                            Term:\r\n                            <br/>\r\n                            <input name=\"semester\" className=\"form-control form-center\" type=\"text\"\r\n                                value={this.state.semester} onChange={this.handleChange} ref={this.semesterRef}\r\n                                placeholder=\"Current term\" size=\"50\" maxLength=\"50\" required={true}/>\r\n                        </label>\r\n                        <p></p>\r\n                        <label>\r\n                            Year:\r\n                            <br/>\r\n                            <input name=\"year\" className=\"form-control form-center\" type=\"text\"\r\n                                value={this.state.year} onChange={this.handleChange} ref={this.yearRef}\r\n                                placeholder=\"Current year\" size=\"50\" maxLength=\"50\" required={true}/>\r\n                        </label>\r\n                        <p></p>\r\n                        <label>\r\n                            Instructor First Name:\r\n                            <br/>\r\n                            <input name=\"instructorFirstName\" className=\"form-control form-center\" type=\"text\"\r\n                                value={this.state.instructorFirstName} onChange={this.handleChange}\r\n                                placeholder=\"First name\" size=\"50\" maxLength=\"50\" required={true}/>\r\n                        </label>\r\n                        <p></p>\r\n                        <label>\r\n                            Instructor Last Name:\r\n                            <br/>\r\n                            <input name=\"instructorLastName\" className=\"form-control form-center\" type=\"text\"\r\n                                value={this.state.instructorLastName} onChange={this.handleChange}\r\n                                placeholder=\"Last name\" size=\"50\" maxLength=\"50\" required={true}/>\r\n                        </label>\r\n                        <p></p>\r\n                        <label>\r\n                            Enrollment Limit:\r\n                            <br/>\r\n                            <input name=\"enrollmentLimit\" className=\"form-control form-center\" type=\"text\"\r\n                                value={this.state.enrollmentLimit} onChange={this.handleChange}\r\n                                placeholder=\"Enrollment limit\" size=\"50\" maxLength=\"50\" required={true}/>\r\n                        </label>\r\n                        <p></p>\r\n                        <label>Notes:\r\n                            <textarea name=\"notes\" className=\"form-control\" rows=\"6\" cols=\"75\" \r\n                                placeholder=\"Enter course notes\" value={this.state.notes} \r\n                                onChange={this.handleChange} />\r\n                        </label>\r\n                        <p></p>\r\n                        <p></p>\r\n                        <div className=\"modal-footer\">\r\n                            <button role=\"submit\" className=\"btn btn-primary\">\r\n                            Edit</button>\r\n                            <button className=\"btn btn-secondary\" onClick={this.handleCloseModal}>\r\n                            Cancel</button>\r\n                        </div>\r\n                        <br />\r\n                    </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EditCourse;","// A table that displays all the courses a student is in\r\n\r\nimport React from 'react';\r\nimport AppMode from \"./../../AppMode.js\";\r\nimport DeleteCourse from './DeleteCourse.js';\r\nimport EditCourse from './EditCourse.js';\r\n\r\nclass CoursesTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            courseId: \"\",\r\n            courseName: \"\",\r\n        };\r\n    }\r\n\r\n    viewStudents = (courseId, courseName) => {\r\n        console.log(\"Opening students for courseId: \" + courseId);\r\n\r\n        // update courseID state in app\r\n        this.props.changeCourse(courseId, courseName);\r\n        this.props.changeMode(AppMode.STUDENTS);\r\n    }\r\n\r\n    handleEditCourse = (id, name) => {\r\n        console.log(\"Editing \" + id);\r\n        \r\n        this.setState({\r\n            courseId: id,\r\n            courseName: name\r\n        });\r\n\r\n        this.props.changeMode(AppMode.COURSES_EDIT);\r\n    }\r\n\r\n    handleDeleteCourse = (id, name) => {\r\n        console.log(\"Deleting \" + id);\r\n\r\n        this.setState({\r\n            courseId: id,\r\n            courseName: name\r\n        });\r\n\r\n        this.props.changeMode(AppMode.COURSES_DELETE);\r\n    }\r\n\r\n    deleteCourse = async (courseId) => {\r\n       const url = '/courses/' + this.props.userId + '/' + courseId;\r\n       const res = await fetch(url, \r\n                    {method: 'DELETE'}); \r\n        if (res.status == 200) {\r\n            console.log(\"Successfully deleted course\")\r\n        } else {\r\n            const resText = await res.text();\r\n            console.log(\"Course deletion failed with error: \" + resText);\r\n        }\r\n\r\n        this.props.changeMode(AppMode.COURSES);\r\n    }\r\n\r\n    editCourse = async (courseInfo) => {\r\n        console.log(courseInfo);\r\n\r\n        // update course using route\r\n        const url = '/courses/' + this.props.userId + '/' + this.state.courseId;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'PUT',\r\n            body: JSON.stringify(courseInfo)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            console.log(\"Course successfully updated\");\r\n        } else {\r\n            console.log(\"Error occurred while updating course\");\r\n        }\r\n    }\r\n\r\n    //renderTable -- render an HTML table displaying the rounds logged\r\n    //by the current user and providing buttons to view/edit and delete each round.\r\n    renderTable = () => {\r\n        let table = [];\r\n        for (const r in this.props.courses) {\r\n        table.push(\r\n            <tr key={r}>\r\n            <td>{this.props.courses[r].courseName}</td>\r\n            <td>{this.props.courses[r].courseYear}</td>\r\n            <td>{this.props.courses[r].courseSemester}</td>\r\n            <td>{\"\" + this.props.courses[r].courseInstructorFirstName + \" \" + \r\n                    this.props.courses[r].courseInstructorLastName + \"\"}\r\n            </td>\r\n            <td><button onClick={this.props.menuOpen ? null : () => \r\n                this.viewStudents(this.props.courses[r].courseID, this.props.courses[r].courseName)}>\r\n                    <span id=\"studentView\" className=\"fa fa-users\"></span></button></td>\r\n            {this.props.userType === \"Instructor\" ? \r\n                <div className=\"instructor-buttons\">\r\n                    <td><button onClick={this.props.menuOpen ? null : () => \r\n                        this.handleEditCourse(this.props.courses[r].courseID, this.props.courses[r].courseName)}>\r\n                            <span className=\"fa fa-pencil-square-o\"></span></button></td>\r\n                    <td><button onClick={this.props.menuOpen ? null : () => \r\n                        this.handleDeleteCourse(this.props.courses[r].courseID, this.props.courses[r].courseName)}>\r\n                            <span className=\"fa fa-trash-o\"></span></button></td>\r\n                </div> : null}\r\n            </tr> \r\n        );\r\n        }\r\n        return table;\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"padded-page\">\r\n                <h1></h1>\r\n                <table id=\"CoursesTable\" className=\"table table-hover\">\r\n                    <thead className=\"thead-light\">\r\n                    <tr>\r\n                        <th>Course Name</th>\r\n                        <th>Year</th>\r\n                        <th>Semester</th>\r\n                        <th>Instructor Name</th>\r\n                        <th>View Students</th>\r\n                        {this.props.userType === \"Instructor\" ? \r\n                        <div className=\"instructor-buttons\">\r\n                            <th>Edit</th>\r\n                            <th>Delete</th>\r\n                        </div> : null}\r\n                        \r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {Object.keys(this.props.courses).length === 0 ? \r\n                        <tr>\r\n                        <td colSpan=\"5\" style={{fontStyle: \"italic\"}}>You don't have any courses</td>\r\n                        </tr> : this.renderTable()\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n                {this.props.mode === AppMode.COURSES_DELETE ?\r\n                <DeleteCourse\r\n                changeMode={this.props.changeMode}\r\n                deleteCourse={this.deleteCourse}\r\n                courseId={this.state.courseId}\r\n                courseName={this.state.courseName} />\r\n                : null}\r\n\r\n                {this.props.mode === AppMode.COURSES_EDIT ?\r\n                <EditCourse\r\n                changeMode={this.props.changeMode}\r\n                editCourse={this.editCourse}\r\n                courseName={this.state.courseName}\r\n                courseId={this.state.courseId}\r\n                userId={this.props.userId} />\r\n                : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CoursesTable;","// A modal component that has a file input that accepts only .csv files of a class roster\r\n\r\nimport React from 'react';\r\nimport AppMode from '../../AppMode';\r\n\r\nclass UploadStudents extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.rosterRef = React.createRef();\r\n        this.fileReadingFinished = this.fileReadingFinished.bind(this);\r\n\r\n        this.state = {\r\n            roster: [],\r\n        }\r\n    }\r\n\r\n    // handles the modal closure\r\n    handleCloseModal = (event) => {\r\n        event.preventDefault();\r\n        this.props.changeMode(AppMode.STUDENTS);\r\n    }\r\n\r\n    // handles when a new file is chosen\r\n    handleFile = (files) => {\r\n        if (window.FileReader) {\r\n            // FileReader are supported.\r\n            this.getAsText(this.rosterRef.current.files[0]);\r\n        }\r\n    }\r\n\r\n    // handles upload button click\r\n    handleUploadSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.uploadStudents(this.state.roster);\r\n        this.props.changeMode(AppMode.STUDENTS);\r\n    }\r\n\r\n    // reades the file as a string\r\n    getAsText(fileToRead) {\r\n        var reader = new FileReader();\r\n        // Read file into memory as UTF-8      \r\n        reader.readAsText(fileToRead);\r\n        // Handle errors load\r\n        reader.onload = this.fileReadingFinished;\r\n        reader.onerror = this.errorHandler;\r\n    }\r\n\r\n    // processes the file and extracts data\r\n    fileReadingFinished(event) {\r\n        var csv = event.target.result;\r\n        var allTextLines = csv.split(/\\r\\n|\\n/);\r\n\r\n        // remove header entry and blank entries\r\n        allTextLines = allTextLines.filter(function (student) {\r\n            return student !== \"userID,displayName\" && student !== \"\";\r\n        })\r\n        var lines = allTextLines.map(data => data.split(';'));\r\n        \r\n        // split each string into two array elements\r\n        lines = lines.map(function(val, index) {\r\n            val = val[0].split(',');\r\n            return val;\r\n        });\r\n\r\n        this.setState({roster : lines});\r\n    }\r\n\r\n    // handles erros when uploading a file\r\n    errorHandler(event) {\r\n        if (event.target.error.name === \"NotReadableError\") {\r\n            alert(\"Cannot read file!\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n                <div id=\"UploadStudentsModal\" className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                    <center>\r\n                        <h3 className=\"modal-title\"><b>Upload Students</b></h3>\r\n                    </center>\r\n                    <button id=\"modalClose\" className=\"modal-close\" onClick={this.handleCloseModal}>\r\n                        &times;</button>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                    <p>Add multiple students to this course at once by using uploading a class roster CSV file. \r\n                        Each student entry needs a userID and DisplayName column.<br />\r\n                    </p>\r\n                    <form onSubmit={this.handleUploadSubmit}>\r\n                        <label>\r\n                            Select a Roster File:\r\n                            <br/>\r\n                            <input\r\n                            className=\"form-control form-text form-center\"\r\n                            name=\"roster\"\r\n                            type=\"file\"\r\n                            accept=\".csv\"\r\n                            required={true}\r\n                            ref={this.rosterRef}\r\n                            value={this.state.rosterFileName}\r\n                            onChange={this.handleFile}\r\n                            />\r\n                        </label>\r\n                        <div className=\"modal-footer\">\r\n                            <button role=\"submit\" className=\"btn btn-primary\">\r\n                            Upload</button>\r\n                            <button className=\"btn btn-secondary\" onClick={this.handleCloseModal}>\r\n                            Cancel</button>\r\n                        </div>\r\n                        <br />\r\n                    </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UploadStudents;","// A modal component that instructors use to create new courses\r\n\r\nimport React from 'react';\r\nimport AppMode from \"./../../AppMode.js\";\r\n\r\nclass AddCourse extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.numberRef = React.createRef();\r\n        this.semesterRef = React.createRef();\r\n        this.yearRef = React.createRef();\r\n\r\n        this.state = {\r\n            name: \"\",\r\n            number: \"\",\r\n            id: \"\",\r\n            semester: \"\",\r\n            year: \"\",\r\n            instructorFirstName: \"\",\r\n            instructorLastName: \"\",\r\n            enrollmentLimit: \"\",\r\n            notes: \"\",\r\n        };\r\n    }\r\n\r\n    // handles the modal closure\r\n    handleCloseModal = (event) => {\r\n        event.preventDefault();\r\n        this.props.changeMode(AppMode.COURSES);\r\n    }\r\n\r\n    // handles create button click\r\n    handleCreateSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const newCourse = {\r\n            courseInstructorFirstName: this.state.instructorFirstName,\r\n            courseInstructorLastName: this.state.instructorLastName,\r\n            courseInstructorID: this.props.instructorId,\r\n            courseName: this.state.name,\r\n            courseNumber: this.state.number,\r\n            courseYear: this.state.year,\r\n            courseSemester: this.state.semester,\r\n            courseEnrollmentLimit: this.state.enrollmentLimit,\r\n            courseCurrentlyEnrolled: \"0\",\r\n            courseID: this.state.id,\r\n            courseNotes: this.state.notes\r\n        };\r\n\r\n        this.props.addCourse(newCourse);\r\n        this.props.changeMode(AppMode.COURSES);\r\n    }\r\n\r\n    // called everytime a field in the form changes value\r\n    handleChange = (event) => {\r\n        const name = event.target.name;\r\n\r\n        // Update the courseID if number, semester, or year has changed\r\n        if (name === \"number\" || name === \"semester\" || name === \"year\"){\r\n            let newCourseId = this.numberRef.current.value + this.semesterRef.current.value + this.yearRef.current.value;\r\n            this.setState({id : newCourseId});\r\n        }\r\n\r\n        this.setState({[name]: event.target.value});\r\n    }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n                <div id=\"AddCourseModal\" className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                    <center>\r\n                        <h3 className=\"modal-title\"><b>Create a Course</b></h3>\r\n                    </center>\r\n                    <button id=\"modalClose\" className=\"modal-close\" onClick={this.handleCloseModal}>\r\n                        &times;</button>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                    <p>Create a new course to send surveys to. After you have created a course, you can add students to it.<br />\r\n                    </p>\r\n                    <form onSubmit={this.handleCreateSubmit}>\r\n                        <label>\r\n                            Course Name:\r\n                            <br/>\r\n                            <input name=\"name\" id=\"courseName\" className=\"form-control form-center\" type=\"text\"\r\n                                value={this.state.name} onChange={this.handleChange}\r\n                                placeholder=\"Course name\" size=\"50\" maxLength=\"50\" required={true}/>\r\n                        </label>\r\n                        <p></p>\r\n                        <label>\r\n                            Course Number:\r\n                            <br/>\r\n                            <input name=\"number\" id=\"courseNumber\" className=\"form-control form-center\" type=\"text\"\r\n                                value={this.state.number} onChange={this.handleChange} ref={this.numberRef}\r\n                                placeholder=\"Course number\" size=\"50\" maxLength=\"50\" required={true}/>\r\n                        </label>\r\n                        <p></p>\r\n                        <label>\r\n                            Term:\r\n                            <br/>\r\n                            <input name=\"semester\" id=\"courseSemester\" className=\"form-control form-center\" type=\"text\"\r\n                                value={this.state.semester} onChange={this.handleChange} ref={this.semesterRef}\r\n                                placeholder=\"Current term\" size=\"50\" maxLength=\"50\" required={true}/>\r\n                        </label>\r\n                        <p></p>\r\n                        <label>\r\n                            Year:\r\n                            <br/>\r\n                            <input name=\"year\" id=\"courseYear\" className=\"form-control form-center\" type=\"text\"\r\n                                value={this.state.year} onChange={this.handleChange} ref={this.yearRef}\r\n                                placeholder=\"Current year\" size=\"50\" maxLength=\"50\" required={true}/>\r\n                        </label>\r\n                        <p></p>\r\n                        <label>\r\n                            Instructor First Name:\r\n                            <br/>\r\n                            <input name=\"instructorFirstName\" id=\"courseFirstName\" className=\"form-control form-center\" type=\"text\"\r\n                                value={this.state.instructorFirstName} onChange={this.handleChange}\r\n                                placeholder=\"First name\" size=\"50\" maxLength=\"50\" required={true}/>\r\n                        </label>\r\n                        <p></p>\r\n                        <label>\r\n                            Instructor Last Name:\r\n                            <br/>\r\n                            <input name=\"instructorLastName\" id=\"courseLastName\" className=\"form-control form-center\" type=\"text\"\r\n                                value={this.state.instructorLastName} onChange={this.handleChange}\r\n                                placeholder=\"Last name\" size=\"50\" maxLength=\"50\" required={true}/>\r\n                        </label>\r\n                        <p></p>\r\n                        <label>\r\n                            Enrollment Limit:\r\n                            <br/>\r\n                            <input name=\"enrollmentLimit\" id=\"courseEnrollmentLimit\" className=\"form-control form-center\" type=\"text\"\r\n                                value={this.state.enrollmentLimit} onChange={this.handleChange}\r\n                                placeholder=\"Enrollment limit\" size=\"50\" maxLength=\"50\" required={true}/>\r\n                        </label>\r\n                        <p></p>\r\n                        <label>Notes:\r\n                            <textarea name=\"notes\" id=\"courseNotes\"className=\"form-control\" rows=\"6\" cols=\"75\" \r\n                                placeholder=\"Enter course notes\" value={this.state.notes} \r\n                                onChange={this.handleChange} />\r\n                        </label>\r\n                        <p></p>\r\n                        <p></p>\r\n                        <div className=\"modal-footer\">\r\n                            <button role=\"submit\" id=\"saveCourse\" className=\"btn btn-primary\">\r\n                            Create</button>\r\n                            <button id=\"cancelCourse\" className=\"btn btn-secondary\" onClick={this.handleCloseModal}>\r\n                            Cancel</button>\r\n                        </div>\r\n                        <br />\r\n                    </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddCourse;","// Main manage courses page\r\n// From here a student can view courses they are in and see the students that are in their courses\r\n// An intructor is able to add courses, delete courses, add students, upload a roster of students\r\n// and add an individual student\r\n\r\nimport React from 'react';\r\nimport AppMode from '../../AppMode';\r\nimport StudentsTable from './StudentsTable.js';\r\nimport CoursesTable from './CoursesTable';\r\nimport FloatingButton from './../FloatingButton.js';\r\nimport UploadStudents from './UploadStudents.js';\r\nimport AddCourse from './AddCourse.js';\r\n\r\nclass CoursesPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            courseId: \"\",\r\n            courseName: \"\",\r\n            students: [],\r\n        };\r\n    }\r\n\r\n    // changes the courses page mode to display different componeents based on state\r\n    handleChangeMode = (newMode) => {\r\n        this.setState({mode: newMode});\r\n\r\n        // if state changed to courses, possibly reset the forms to remove old text\r\n    }\r\n\r\n    // fetches the students for the selected course\r\n    handleChangeCourse = async (courseId, courseName) => {\r\n        this.setState({\r\n            courseId: courseId,\r\n            courseName: courseName,\r\n        });\r\n\r\n        // Get the courses students\r\n        let url = \"/students/\" + courseId;\r\n        let res = await fetch(url, {method: 'GET'});\r\n        if (res.status != 200) {\r\n            let msg = await res.text();\r\n            console.log(\"There was an error obtaining students in this course: \" + msg);\r\n            return;\r\n        } \r\n        let body = await res.json();\r\n        body = JSON.parse(body);\r\n        console.log(\"in componentDidMount with GET results: \" + body);\r\n        this.setState({students: body});\r\n    }\r\n\r\n    // handle click on the add course button\r\n    handleAddCourse = async () => {\r\n        this.props.changeMode(AppMode.COURSES_CREATE);\r\n    }\r\n\r\n    // handle click on the add students button\r\n    handleAddStudent = () => {\r\n        //this.handleChangeMode(AppMode.STUDENTS_CREATE);\r\n        console.log(\"Adding a student\");\r\n        this.props.changeMode(AppMode.STUDENTS_CREATE);\r\n    }\r\n\r\n    // handle click on upload students button\r\n    handleUploadStudents = () => {\r\n        //this.handleChangeMode(AppMode.STUDENTS_UPLOAD);\r\n        this.props.changeMode(AppMode.STUDENTS_UPLOAD);\r\n    }\r\n\r\n    // upload the list of students extracted from csv file\r\n    uploadStudents = async (students) => {\r\n\r\n        // make a post request for each student\r\n        for(const student of students) {\r\n            var newData = {\r\n                \"userID\" : student[0],\r\n                \"studentDisplayName\": student[1],\r\n                };\r\n            \r\n            const url = '/students/' + this.state.courseId;\r\n            const res = await fetch(url, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                    },\r\n                method: 'POST',\r\n                body: JSON.stringify(newData)}); \r\n            const msg = await res.text();\r\n            if (res.status != 200) {\r\n                console.log(\"Successfully added students\");\r\n            } else {\r\n                console.log(\"Error adding students\");\r\n            }\r\n        }\r\n\r\n        // refetch the students list\r\n        this.handleChangeCourse(this.state.courseId, this.state.courseName);\r\n    }\r\n\r\n    // handle adding a student to the currently selected course\r\n    addStudent = async (newStudent) => {\r\n        console.log(\"Adding a student for course: \" + this.state.courseId);\r\n    }\r\n\r\n    addCourse = async (courseData) => {\r\n        console.log(\"Creating a new course: \" + courseData);\r\n\r\n        const url = '/courses/' + this.props.userObj.id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'POST',\r\n            body: JSON.stringify(courseData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            console.log(\"Successfully added course\");\r\n        } else {\r\n            console.log(\"Error adding course\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"padded-page\">\r\n                <center>\r\n                <h1>{this.props.mode === AppMode.COURSES || this.props.mode === AppMode.COURSES_DELETE || this.props.mode === AppMode.COURSES_EDIT || this.props.mode === AppMode.COURSES_CREATE ? \"Courses\" : \"Students in \" + this.state.courseName}</h1>\r\n\r\n                {this.props.mode === AppMode.COURSES || this.props.mode === AppMode.COURSES_DELETE || this.props.mode === AppMode.COURSES_EDIT || this.props.mode === AppMode.COURSES_CREATE ?\r\n                    <CoursesTable \r\n                    courses={this.props.userObj.courses}\r\n                    userType={this.props.userObj.userType}\r\n                    menuOpen={this.props.menuOpen}\r\n                    changeMode={this.props.changeMode}\r\n                    mode={this.props.mode}\r\n                    userId={this.props.userObj.id}\r\n                    changeCourse={this.handleChangeCourse}/> :\r\n                    <StudentsTable \r\n                    students={this.state.students}\r\n                    userType={this.props.userObj.userType}\r\n                    menuOpen={this.props.menuOpen}\r\n                    changeMode={this.props.changeMode}/>\r\n                }\r\n                </center>\r\n\r\n                {this.props.userObj.userType === \"Instructor\" &&  this.props.mode === AppMode.STUDENTS ?\r\n                <div className=\"floatingbtn-container\">\r\n                <FloatingButton\r\n                id={\"AddStudentBtn\"}\r\n                handleClick={this.handleAddStudent}/>\r\n                <FloatingButton\r\n                id=\"UploadStudentsBtn\"\r\n                handleClick={this.handleUploadStudents}\r\n                upload={true}/>\r\n                </div> : null}\r\n\r\n                {this.props.userObj.userType === \"Instructor\" && this.props.mode === AppMode.COURSES ?\r\n                <FloatingButton\r\n                id=\"AddCourseBtn\"\r\n                handleClick={this.handleAddCourse}/>\r\n                : null}\r\n\r\n                {this.props.mode === AppMode.STUDENTS_UPLOAD ? \r\n                <UploadStudents\r\n                uploadStudents={this.uploadStudents}\r\n                changeMode={this.props.changeMode} /> : null}\r\n\r\n                {this.props.mode === AppMode.COURSES_CREATE ?\r\n                <AddCourse\r\n                changeMode={this.props.changeMode}\r\n                addCourse={this.addCourse}\r\n                instructorId={this.props.userObj.id} />\r\n                : null}\r\n\r\n            </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default CoursesPage;","import React from 'react';\r\n\r\nclass AboutBox extends React.Component {\r\n\r\nrender() {\r\n    return (\r\n        <div className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-dialog modal-lg\">\r\n            <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n                <h3>About SpeedScore</h3>\r\n                <button className=\"modal-close\" onClick={this.props.close}>\r\n                    &times;\r\n                </button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n                <img\r\n                src=\"https://dl.dropboxusercontent.com/s/awuwr1vpuw1lkyl/SpeedScore4SplashLogo.png\"\r\n                height=\"200\" width=\"200\"/>\r\n                <h3>The World's First and Only Suite of Apps for\r\n                Speedgolf</h3>\r\n                <p>Version CptS 489 Fa20 Complete (MERN)<br/>\r\n                &copy; 2017-20 The Professor of Speedgolf. All rights\r\n                reserved.\r\n                </p>\r\n                <div style={{textAlign: \"left\"}}>\r\n                <p>SpeedScore apps support</p>\r\n                <ul>\r\n                <li>live touranment scoring (<i>SpeedScore Live&reg;</i>)</li>\r\n                <li>tracking personal speedgolf rounds and sharing results\r\n                (<i>SpeedScore Track&reg;</i>)</li>\r\n                <li>finding speedgolf-friendly courses, booking tee times, and\r\n                paying to play speedgolf by the minute (<i>SpeedScore\r\n                Play&reg;</i>)</li>\r\n                </ul>\r\n                <p>SpeedScore was first developed by Dr. Chris Hundhausen,\r\n                associate professor of computer science at Washington State\r\n                University and the <i>Professor of Speedgolf</i>, with support\r\n                from Scott Dawley, CEO of Speedgolf USA, LLC.</p>\r\n                <p>For more information on SpeedScore, visit <a\r\n                href=\"http://speedscore.live\" target=\"_blank\">SpeedScore's web\r\n                site</a>. For more information on speedgolf, visit <a\r\n                href=\"http://playspeedgolf.com\"\r\n                target=\"_blank\">playspeedgolf.com</a> and <a\r\n                href=\"http://usaspeedgolf.com\" target=\"_blank\">Speedgolf\r\n                USA</a>.</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                <button className=\"btn btn-primary btn-color-theme\"\r\n                onClick={this.props.close}>OK</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default AboutBox;","import React from 'react';\r\nimport NavBar from './NavBar.js';\r\nimport SideMenu from './SideMenu.js';\r\nimport ModeBar from './ModeBar.js';\r\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js'\r\nimport LoginPage from './LoginPage.js';\r\nimport AppMode from \"./../AppMode.js\"\r\nimport SurveyManagementPage from './SurveyManagementPage.js';\r\nimport Rounds from './Rounds.js';\r\nimport CoursesPage from './CourseManagement/CoursesPage.js';\r\nimport AboutBox from './AboutBox.js';\r\n\r\nconst modeTitle = {};\r\nmodeTitle[AppMode.LOGIN] = \"Welcome to Kliks\";\r\nmodeTitle[AppMode.SURVEY_MANAGEMENT] = \"Survey Management\";\r\nmodeTitle[AppMode.ROUNDS] = \"My Rounds\";\r\nmodeTitle[AppMode.ROUNDS_LOGROUND] = \"Log New Round\";\r\nmodeTitle[AppMode.ROUNDS_EDITROUND] = \"Edit Round\";\r\nmodeTitle[AppMode.COURSES] = \"Courses\";\r\nmodeTitle[AppMode.COURSES_CREATE] = \"Add Course\";\r\nmodeTitle[AppMode.COURSES_DELETE] = \"Delete Course\";\r\nmodeTitle[AppMode.COURSES_EDIT] = \"Edit Course\";\r\nmodeTitle[AppMode.STUDENTS] = \"Students\";\r\nmodeTitle[AppMode.STUDENTS_CREATE] = \"Add a Student\";\r\nmodeTitle[AppMode.STUDENTS_UPLOAD] = \"Students\";\r\n\r\nconst modeToPage = {};\r\n\r\n/*  Login/Register Pages */\r\nmodeToPage[AppMode.LOGIN] = LoginPage;\r\n\r\n/*  Survey/Responses/Questions Pages */\r\nmodeToPage[AppMode.SURVEY_MANAGEMENT] = SurveyManagementPage;\r\nmodeToPage[AppMode.SURVEY_MANAGEMENT_RESPONSES] = SurveyManagementPage;\r\nmodeToPage[AppMode.SURVEY_MANAGEMENT_CREATE] = SurveyManagementPage;\r\nmodeToPage[AppMode.SURVEY_MANAGEMENT_EDIT] = SurveyManagementPage;\r\nmodeToPage[AppMode.SURVEY_MANAGEMENT_CREATE_SURVEY] = SurveyManagementPage;\r\nmodeToPage[AppMode.SURVEY_MANAGEMENT_SEARCH] = SurveyManagementPage;\r\nmodeToPage[AppMode.SURVEY_MANAGEMENT_SEARCH_SURVEYS] = SurveyManagementPage;\r\n\r\n/*  Dashboard Pages */\r\nmodeToPage[AppMode.ROUNDS] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_LOGROUND] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_EDITROUND] = Rounds;\r\n\r\n/*  Course Pages */\r\nmodeToPage[AppMode.COURSES] = CoursesPage;\r\nmodeToPage[AppMode.COURSES_CREATE] = CoursesPage;\r\nmodeToPage[AppMode.COURSES_DELETE] = CoursesPage;\r\nmodeToPage[AppMode.COURSES_EDIT] = CoursesPage;\r\n\r\n/* Students Pages, students are tied to courses */\r\nmodeToPage[AppMode.STUDENTS] = CoursesPage;\r\nmodeToPage[AppMode.STUDENTS_CREATE] = CoursesPage;\r\nmodeToPage[AppMode.STUDENTS_UPLOAD] = CoursesPage;\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {mode: AppMode.LOGIN,\r\n                  menuOpen: false,\r\n                  authenticated: false,\r\n                  userObj: {displayName: \"\", profilePicURL: \"\"},\r\n                  editAccount: false,\r\n                  showEditAccountDialog: false,\r\n                  statusMsg: \"\",\r\n                  showAboutDialog: false\r\n                 };\r\n  }\r\n\r\n  //componentDidMount\r\n  componentDidMount() {\r\n    if (!this.state.authenticated) { \r\n      //Use /auth/test route to (re)-test authentication and obtain user data\r\n      fetch(\"/auth/test\")\r\n        .then((response) => response.json())\r\n        .then((obj) => {\r\n          if (obj.isAuthenticated) {\r\n            this.setState({\r\n              userObj: obj.user,\r\n              authenticated: true,\r\n              mode: AppMode.SURVEY_MANAGEMENT //We're authenticated so can get into the app.\r\n            });\r\n          }\r\n        }\r\n      )\r\n    } \r\n  }\r\n\r\n  //refreshOnUpdate(newMode) -- Called by child components when user data changes in \r\n  //the database. The function calls the users/:userid (GET) route to update \r\n  //the userObj state var based on the latest database changes, and sets the \r\n  //mode state var is set to newMode. After this method is called, the\r\n  //App will re-render itself, forcing the new data to \r\n  //propagate to the child components when they are re-rendered.\r\n  refreshOnUpdate = async(newMode) => {\r\n    let response = await fetch(\"/users/\" + this.state.userObj.id);\r\n    response = await response.json();\r\n    const obj = JSON.parse(response);\r\n    this.setState({\r\n      userObj: obj,\r\n      mode: newMode\r\n    });\r\n  }\r\n\r\n\r\n  handleChangeMode = (newMode) => {\r\n    this.setState({mode: newMode});\r\n  }\r\n\r\n  openMenu = () => {\r\n    this.setState({menuOpen : true});\r\n  }\r\n  \r\n  closeMenu = () => {\r\n    this.setState({menuOpen : false});\r\n  }\r\n\r\n  toggleMenuOpen = () => {\r\n    this.setState(prevState => ({menuOpen: !prevState.menuOpen}));\r\n  }\r\n\r\n  setUserId = (Id) => {\r\n    this.setState({userId: Id,\r\n                   authenticated: true});\r\n  }\r\n\r\n  showEditAccount = () => {\r\n    this.setState({showEditAccountDialog: true});\r\n\r\n  }\r\n\r\n  cancelEditAccount = () => {\r\n    this.setState({showEditAccountDialog: false});\r\n  }\r\n\r\n  //editAccountDone -- called after successful edit or\r\n  //deletion of user account. msg contains the status\r\n  //message and deleted indicates whether an account was\r\n  //edited (deleted == false) or deleted (deleted == true)\r\n  editAccountDone = (msg, deleted) => {\r\n    if (deleted) {\r\n      this.setState({showEditAccountDialog: false,\r\n                     statusMsg: msg,\r\n                     mode: AppMode.LOGIN});\r\n      } else {\r\n        this.setState({showEditAccountDialog: false,\r\n          statusMsg: msg});\r\n      }\r\n  }\r\n\r\n  closeStatusMsg = () => {\r\n    this.setState({statusMsg: \"\"});\r\n  }\r\n\r\n  render() {\r\n    const ModePage = modeToPage[this.state.mode];\r\n    return (\r\n      <div className=\"padded-page\">\r\n        {this.state.showAboutDialog ? \r\n          <AboutBox close={() => this.setState({showAboutDialog: false})}/> : null}\r\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\">\r\n              <span>{this.state.statusMsg}</span>\r\n              <button className=\"modal-close\" onClick={this.closeStatusMsg}>\r\n                  <span className=\"fa fa-times\"></span></button></div> : null}\r\n        {this.state.showEditAccountDialog ? \r\n            <CreateEditAccountDialog \r\n              create={false} \r\n              userId={this.state.userObj.id} \r\n              done={this.editAccountDone} \r\n              cancel={this.cancelEditAccount}/> : null}\r\n        <NavBar \r\n          title={modeTitle[this.state.mode]} \r\n          mode={this.state.mode}\r\n          changeMode={this.handleChangeMode}\r\n          menuOpen={this.state.menuOpen}\r\n          toggleMenuOpen={this.toggleMenuOpen}/>\r\n          <SideMenu \r\n            menuOpen = {this.state.menuOpen}\r\n            mode={this.state.mode}\r\n            toggleMenuOpen={this.toggleMenuOpen}\r\n            displayName={this.state.userObj.displayName}\r\n            profilePicURL={this.state.userObj.profilePicURL}\r\n            localAccount={this.state.userObj.authStrategy === \"local\"}\r\n            editAccount={this.showEditAccount}\r\n            logOut={() => this.handleChangeMode(AppMode.LOGIN)}\r\n            changeMode={this.handleChangeMode}\r\n            showAbout={() => {this.setState({showAboutDialog: true})}}\r\n            userType={this.state.userObj.userType}/>\r\n          <ModeBar \r\n            mode={this.state.mode} \r\n            changeMode={this.handleChangeMode}\r\n            menuOpen={this.state.menuOpen}/>\r\n          <ModePage \r\n            menuOpen={this.state.menuOpen}\r\n            mode={this.state.mode}\r\n            changeMode={this.handleChangeMode}\r\n            userObj={this.state.userObj}\r\n            refreshOnUpdate={this.refreshOnUpdate}/>\r\n      </div>\r\n    );  \r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap-social/bootstrap-social.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport './styles/index.css';\r\nimport App from './components/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}