[{"O:\\Documents\\bp-kliks\\client\\src\\index.js":"1","O:\\Documents\\bp-kliks\\client\\src\\components\\App.js":"2","O:\\Documents\\bp-kliks\\client\\src\\serviceWorker.js":"3","O:\\Documents\\bp-kliks\\client\\src\\components\\NavBar.js":"4","O:\\Documents\\bp-kliks\\client\\src\\components\\SideMenu.js":"5","O:\\Documents\\bp-kliks\\client\\src\\components\\ModeBar.js":"6","O:\\Documents\\bp-kliks\\client\\src\\AppMode.js":"7","O:\\Documents\\bp-kliks\\client\\src\\components\\CreateEditAccountDialog.js":"8","O:\\Documents\\bp-kliks\\client\\src\\components\\LoginPage.js":"9","O:\\Documents\\bp-kliks\\client\\src\\components\\SurveyManagementPage.js":"10","O:\\Documents\\bp-kliks\\client\\src\\components\\AboutBox.js":"11","O:\\Documents\\bp-kliks\\client\\src\\components\\Rounds.js":"12","O:\\Documents\\bp-kliks\\client\\src\\components\\CourseManagement\\CoursesPage.js":"13","O:\\Documents\\bp-kliks\\client\\src\\components\\ConfirmDeleteAccount.js":"14","O:\\Documents\\bp-kliks\\client\\src\\components\\LookUpAccountDialog.js":"15","O:\\Documents\\bp-kliks\\client\\src\\components\\ResetPasswordDialog.js":"16","O:\\Documents\\bp-kliks\\client\\src\\components\\RoundsTable.js":"17","O:\\Documents\\bp-kliks\\client\\src\\components\\SecurityQuestionDialog.js":"18","O:\\Documents\\bp-kliks\\client\\src\\components\\RoundForm.js":"19","O:\\Documents\\bp-kliks\\client\\src\\components\\FloatingButton.js":"20","O:\\Documents\\bp-kliks\\client\\src\\components\\SurveyManagement\\CreateSurvey.js":"21","O:\\Documents\\bp-kliks\\client\\src\\components\\SurveyManagement\\ActiveQuestions.js":"22","O:\\Documents\\bp-kliks\\client\\src\\components\\SurveyManagement\\SubmittedResponse.js":"23","O:\\Documents\\bp-kliks\\client\\src\\components\\SurveyManagement\\SearchQuestions.js":"24","O:\\Documents\\bp-kliks\\client\\src\\components\\SurveyManagement\\CreateQuestion.js":"25","O:\\Documents\\bp-kliks\\client\\src\\components\\SurveyManagement\\SearchSurveys.js":"26","O:\\Documents\\bp-kliks\\client\\src\\components\\CourseManagement\\StudentsTable.js":"27","O:\\Documents\\bp-kliks\\client\\src\\components\\CourseManagement\\AddCourse.js":"28","O:\\Documents\\bp-kliks\\client\\src\\components\\CourseManagement\\UploadStudents.js":"29","O:\\Documents\\bp-kliks\\client\\src\\components\\CourseManagement\\CoursesTable.js":"30","O:\\Documents\\bp-kliks\\client\\src\\components\\ConfirmDeleteRound.js":"31","O:\\Documents\\bp-kliks\\client\\src\\components\\SurveyManagement\\viewResponseModal.js":"32","O:\\Documents\\bp-kliks\\client\\src\\components\\SurveyManagement\\DeleteResponseModal.js":"33","O:\\Documents\\bp-kliks\\client\\src\\components\\CourseManagement\\DeleteCourse.js":"34","O:\\Documents\\bp-kliks\\client\\src\\components\\CourseManagement\\EditCourse.js":"35","O:\\Documents\\bp-kliks\\client\\src\\components\\SurveyManagement\\AnswerTypes\\FreeResponse.js":"36","O:\\Documents\\bp-kliks\\client\\src\\components\\SurveyManagement\\AnswerTypes\\FileUpload.js":"37","O:\\Documents\\bp-kliks\\client\\src\\components\\SurveyManagement\\AnswerTypes\\MultipleChoice.js":"38","O:\\Desktop\\bp-kliks\\client\\src\\index.js":"39","O:\\Desktop\\bp-kliks\\client\\src\\components\\App.js":"40","O:\\Desktop\\bp-kliks\\client\\src\\serviceWorker.js":"41","O:\\Desktop\\bp-kliks\\client\\src\\components\\SideMenu.js":"42","O:\\Desktop\\bp-kliks\\client\\src\\AppMode.js":"43","O:\\Desktop\\bp-kliks\\client\\src\\components\\NavBar.js":"44","O:\\Desktop\\bp-kliks\\client\\src\\components\\SurveyManagementPage.js":"45","O:\\Desktop\\bp-kliks\\client\\src\\components\\ModeBar.js":"46","O:\\Desktop\\bp-kliks\\client\\src\\components\\CreateEditAccountDialog.js":"47","O:\\Desktop\\bp-kliks\\client\\src\\components\\LoginPage.js":"48","O:\\Desktop\\bp-kliks\\client\\src\\components\\Rounds.js":"49","O:\\Desktop\\bp-kliks\\client\\src\\components\\AboutBox.js":"50","O:\\Desktop\\bp-kliks\\client\\src\\components\\CourseManagement\\CoursesPage.js":"51","O:\\Desktop\\bp-kliks\\client\\src\\components\\ConfirmDeleteAccount.js":"52","O:\\Desktop\\bp-kliks\\client\\src\\components\\ResetPasswordDialog.js":"53","O:\\Desktop\\bp-kliks\\client\\src\\components\\SecurityQuestionDialog.js":"54","O:\\Desktop\\bp-kliks\\client\\src\\components\\FloatingButton.js":"55","O:\\Desktop\\bp-kliks\\client\\src\\components\\RoundsTable.js":"56","O:\\Desktop\\bp-kliks\\client\\src\\components\\LookUpAccountDialog.js":"57","O:\\Desktop\\bp-kliks\\client\\src\\components\\RoundForm.js":"58","O:\\Desktop\\bp-kliks\\client\\src\\components\\SurveyManagement\\CreateSurvey.js":"59","O:\\Desktop\\bp-kliks\\client\\src\\components\\SurveyManagement\\CreateQuestion.js":"60","O:\\Desktop\\bp-kliks\\client\\src\\components\\SurveyManagement\\ActiveQuestions.js":"61","O:\\Desktop\\bp-kliks\\client\\src\\components\\SurveyManagement\\SubmittedResponse.js":"62","O:\\Desktop\\bp-kliks\\client\\src\\components\\SurveyManagement\\SearchQuestions.js":"63","O:\\Desktop\\bp-kliks\\client\\src\\components\\SurveyManagement\\SearchSurveys.js":"64","O:\\Desktop\\bp-kliks\\client\\src\\components\\CourseManagement\\StudentsTable.js":"65","O:\\Desktop\\bp-kliks\\client\\src\\components\\CourseManagement\\UploadStudents.js":"66","O:\\Desktop\\bp-kliks\\client\\src\\components\\CourseManagement\\AddCourse.js":"67","O:\\Desktop\\bp-kliks\\client\\src\\components\\CourseManagement\\AddStudent.js":"68","O:\\Desktop\\bp-kliks\\client\\src\\components\\CourseManagement\\CoursesTable.js":"69","O:\\Desktop\\bp-kliks\\client\\src\\components\\ConfirmDeleteRound.js":"70","O:\\Desktop\\bp-kliks\\client\\src\\components\\SurveyManagement\\ConfirmDeleteSurvey.js":"71","O:\\Desktop\\bp-kliks\\client\\src\\components\\SurveyManagement\\SortTypes.js":"72","O:\\Desktop\\bp-kliks\\client\\src\\components\\CourseManagement\\EditStudent.js":"73","O:\\Desktop\\bp-kliks\\client\\src\\components\\CourseManagement\\DeleteStudent.js":"74","O:\\Desktop\\bp-kliks\\client\\src\\components\\SurveyManagement\\DeleteResponseModal.js":"75","O:\\Desktop\\bp-kliks\\client\\src\\components\\SurveyManagement\\viewResponseModal.js":"76","O:\\Desktop\\bp-kliks\\client\\src\\components\\SurveyManagement\\AnswerTypes\\FileUpload.js":"77","O:\\Desktop\\bp-kliks\\client\\src\\components\\SurveyManagement\\AnswerTypes\\FreeResponse.js":"78","O:\\Desktop\\bp-kliks\\client\\src\\components\\CourseManagement\\DeleteCourse.js":"79","O:\\Desktop\\bp-kliks\\client\\src\\components\\SurveyManagement\\AnswerTypes\\MultipleChoice.js":"80","O:\\Desktop\\bp-kliks\\client\\src\\components\\CourseManagement\\EditCourse.js":"81"},{"size":631,"mtime":1607572495370,"results":"82","hashOfConfig":"83"},{"size":7378,"mtime":1607572495359,"results":"84","hashOfConfig":"83"},{"size":5140,"mtime":1607572495371,"results":"85","hashOfConfig":"83"},{"size":1469,"mtime":1607572495364,"results":"86","hashOfConfig":"83"},{"size":6944,"mtime":1607572495366,"results":"87","hashOfConfig":"83"},{"size":1432,"mtime":1607572495364,"results":"88","hashOfConfig":"83"},{"size":1005,"mtime":1607572495359,"results":"89","hashOfConfig":"83"},{"size":16268,"mtime":1607572495363,"results":"90","hashOfConfig":"83"},{"size":9861,"mtime":1607572495364,"results":"91","hashOfConfig":"83"},{"size":11885,"mtime":1607572495369,"results":"92","hashOfConfig":"83"},{"size":2576,"mtime":1607572495359,"results":"93","hashOfConfig":"83"},{"size":6225,"mtime":1607572495365,"results":"94","hashOfConfig":"83"},{"size":6895,"mtime":1607572495361,"results":"95","hashOfConfig":"83"},{"size":1976,"mtime":1607572495360,"results":"96","hashOfConfig":"83"},{"size":3640,"mtime":1607572495364,"results":"97","hashOfConfig":"83"},{"size":3683,"mtime":1607572495364,"results":"98","hashOfConfig":"83"},{"size":3757,"mtime":1607572495365,"results":"99","hashOfConfig":"83"},{"size":3205,"mtime":1607572495365,"results":"100","hashOfConfig":"83"},{"size":6135,"mtime":1607572495365,"results":"101","hashOfConfig":"83"},{"size":411,"mtime":1607572495363,"results":"102","hashOfConfig":"83"},{"size":6070,"mtime":1607572495367,"results":"103","hashOfConfig":"83"},{"size":4446,"mtime":1607572495366,"results":"104","hashOfConfig":"83"},{"size":13412,"mtime":1607572495369,"results":"105","hashOfConfig":"83"},{"size":1800,"mtime":1607572495368,"results":"106","hashOfConfig":"83"},{"size":11187,"mtime":1607572495367,"results":"107","hashOfConfig":"83"},{"size":4260,"mtime":1607572495368,"results":"108","hashOfConfig":"83"},{"size":2787,"mtime":1607572495362,"results":"109","hashOfConfig":"83"},{"size":7520,"mtime":1607572495360,"results":"110","hashOfConfig":"83"},{"size":4332,"mtime":1607572495362,"results":"111","hashOfConfig":"83"},{"size":6016,"mtime":1607572495361,"results":"112","hashOfConfig":"83"},{"size":1073,"mtime":1607572495360,"results":"113","hashOfConfig":"83"},{"size":3581,"mtime":1607572495369,"results":"114","hashOfConfig":"83"},{"size":2371,"mtime":1607572495367,"results":"115","hashOfConfig":"83"},{"size":1662,"mtime":1607572495361,"results":"116","hashOfConfig":"83"},{"size":8549,"mtime":1607572495362,"results":"117","hashOfConfig":"83"},{"size":1000,"mtime":1607572495366,"results":"118","hashOfConfig":"83"},{"size":3194,"mtime":1607572495366,"results":"119","hashOfConfig":"83"},{"size":4090,"mtime":1607572495367,"results":"120","hashOfConfig":"83"},{"size":631,"mtime":1604930282437,"results":"121","hashOfConfig":"122"},{"size":8106,"mtime":1607721644217,"results":"123","hashOfConfig":"122"},{"size":5140,"mtime":1604930282438,"results":"124","hashOfConfig":"122"},{"size":6944,"mtime":1607721644223,"results":"125","hashOfConfig":"122"},{"size":1082,"mtime":1607721644216,"results":"126","hashOfConfig":"122"},{"size":1469,"mtime":1607111189279,"results":"127","hashOfConfig":"122"},{"size":13147,"mtime":1607729753957,"results":"128","hashOfConfig":"122"},{"size":1432,"mtime":1607111189278,"results":"129","hashOfConfig":"122"},{"size":16268,"mtime":1607111189275,"results":"130","hashOfConfig":"122"},{"size":9861,"mtime":1607111189277,"results":"131","hashOfConfig":"122"},{"size":6225,"mtime":1604930282435,"results":"132","hashOfConfig":"122"},{"size":2576,"mtime":1604930282431,"results":"133","hashOfConfig":"122"},{"size":10088,"mtime":1607721644220,"results":"134","hashOfConfig":"122"},{"size":1976,"mtime":1604930282432,"results":"135","hashOfConfig":"122"},{"size":3683,"mtime":1607111189280,"results":"136","hashOfConfig":"122"},{"size":3205,"mtime":1607111189281,"results":"137","hashOfConfig":"122"},{"size":411,"mtime":1605925289393,"results":"138","hashOfConfig":"122"},{"size":3757,"mtime":1604930282436,"results":"139","hashOfConfig":"122"},{"size":3640,"mtime":1607111189278,"results":"140","hashOfConfig":"122"},{"size":6135,"mtime":1604930282435,"results":"141","hashOfConfig":"122"},{"size":6226,"mtime":1607729038775,"results":"142","hashOfConfig":"122"},{"size":12376,"mtime":1607729714848,"results":"143","hashOfConfig":"122"},{"size":830,"mtime":1607721644224,"results":"144","hashOfConfig":"122"},{"size":13412,"mtime":1607111189285,"results":"145","hashOfConfig":"122"},{"size":7789,"mtime":1607734487787,"results":"146","hashOfConfig":"122"},{"size":11835,"mtime":1607726249054,"results":"147","hashOfConfig":"122"},{"size":4248,"mtime":1607730259722,"results":"148","hashOfConfig":"122"},{"size":4371,"mtime":1607730259723,"results":"149","hashOfConfig":"122"},{"size":7520,"mtime":1607721644218,"results":"150","hashOfConfig":"122"},{"size":3452,"mtime":1607721644219,"results":"151","hashOfConfig":"122"},{"size":6010,"mtime":1607730259719,"results":"152","hashOfConfig":"122"},{"size":1073,"mtime":1604930282432,"results":"153","hashOfConfig":"122"},{"size":1539,"mtime":1607721644226,"results":"154","hashOfConfig":"122"},{"size":288,"mtime":1607721644229,"results":"155","hashOfConfig":"122"},{"size":3778,"mtime":1607721644221,"results":"156","hashOfConfig":"122"},{"size":1736,"mtime":1607730259721,"results":"157","hashOfConfig":"122"},{"size":2371,"mtime":1607111189284,"results":"158","hashOfConfig":"122"},{"size":3581,"mtime":1607111189286,"results":"159","hashOfConfig":"122"},{"size":3190,"mtime":1607726249052,"results":"160","hashOfConfig":"122"},{"size":1000,"mtime":1607721644225,"results":"161","hashOfConfig":"122"},{"size":1697,"mtime":1607730259720,"results":"162","hashOfConfig":"122"},{"size":4090,"mtime":1607721644225,"results":"163","hashOfConfig":"122"},{"size":8708,"mtime":1607730259722,"results":"164","hashOfConfig":"122"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"12f4fxa",{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"173","messages":"174","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"175","messages":"176","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"181","messages":"182","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"183","messages":"184","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"185","messages":"186","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"187","messages":"188","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"189","messages":"190","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"193","messages":"194","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"195","messages":"196","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"199","messages":"200","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"209","messages":"210","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"211","messages":"212","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"213","messages":"214","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"215","messages":"216","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"217","messages":"218","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"219","messages":"220","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"223","messages":"224","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"227","messages":"228","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},"1vy2u8q",{"filePath":"244","messages":"245","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"243"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"243"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"243"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"243"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"243"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"243"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"243"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"243"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"243"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"243"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"243"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"243"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"243"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"243"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"243"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"243"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"243"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"243"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"243"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"311","messages":"312","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"243"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"243"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"243"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"243"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"243"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"243"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"243"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"243"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"243"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"243"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"243"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"356"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359","usedDeprecatedRules":"243"},"O:\\Documents\\bp-kliks\\client\\src\\index.js",[],"O:\\Documents\\bp-kliks\\client\\src\\components\\App.js",["360"],"O:\\Documents\\bp-kliks\\client\\src\\serviceWorker.js",[],"O:\\Documents\\bp-kliks\\client\\src\\components\\NavBar.js",["361"],"O:\\Documents\\bp-kliks\\client\\src\\components\\SideMenu.js",["362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385"],"O:\\Documents\\bp-kliks\\client\\src\\components\\ModeBar.js",["386","387","388"],"O:\\Documents\\bp-kliks\\client\\src\\AppMode.js",[],"O:\\Documents\\bp-kliks\\client\\src\\components\\CreateEditAccountDialog.js",["389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408"],"O:\\Documents\\bp-kliks\\client\\src\\components\\LoginPage.js",["409","410","411","412","413"],"O:\\Documents\\bp-kliks\\client\\src\\components\\SurveyManagementPage.js",["414","415","416","417","418","419","420","421"],"O:\\Documents\\bp-kliks\\client\\src\\components\\AboutBox.js",["422","423","424","425"],"O:\\Documents\\bp-kliks\\client\\src\\components\\Rounds.js",["426","427","428","429","430"],"O:\\Documents\\bp-kliks\\client\\src\\components\\CourseManagement\\CoursesPage.js",["431","432","433","434","435"],"O:\\Documents\\bp-kliks\\client\\src\\components\\ConfirmDeleteAccount.js",["436"],"O:\\Documents\\bp-kliks\\client\\src\\components\\LookUpAccountDialog.js",["437","438","439","440"],"O:\\Documents\\bp-kliks\\client\\src\\components\\ResetPasswordDialog.js",["441","442"],"O:\\Documents\\bp-kliks\\client\\src\\components\\RoundsTable.js",["443"],"O:\\Documents\\bp-kliks\\client\\src\\components\\SecurityQuestionDialog.js",["444","445"],"O:\\Documents\\bp-kliks\\client\\src\\components\\RoundForm.js",[],"O:\\Documents\\bp-kliks\\client\\src\\components\\FloatingButton.js",[],"O:\\Documents\\bp-kliks\\client\\src\\components\\SurveyManagement\\CreateSurvey.js",["446","447","448","449"],"O:\\Documents\\bp-kliks\\client\\src\\components\\SurveyManagement\\ActiveQuestions.js",["450"],"O:\\Documents\\bp-kliks\\client\\src\\components\\SurveyManagement\\SubmittedResponse.js",["451","452","453","454","455","456","457","458","459","460","461"],"O:\\Documents\\bp-kliks\\client\\src\\components\\SurveyManagement\\SearchQuestions.js",["462","463"],"O:\\Documents\\bp-kliks\\client\\src\\components\\SurveyManagement\\CreateQuestion.js",["464","465","466","467","468"],"O:\\Documents\\bp-kliks\\client\\src\\components\\SurveyManagement\\SearchSurveys.js",["469","470","471"],"O:\\Documents\\bp-kliks\\client\\src\\components\\CourseManagement\\StudentsTable.js",["472","473","474"],"O:\\Documents\\bp-kliks\\client\\src\\components\\CourseManagement\\AddCourse.js",["475"],"O:\\Documents\\bp-kliks\\client\\src\\components\\CourseManagement\\UploadStudents.js",["476"],"O:\\Documents\\bp-kliks\\client\\src\\components\\CourseManagement\\CoursesTable.js",["477","478","479","480"],"O:\\Documents\\bp-kliks\\client\\src\\components\\ConfirmDeleteRound.js",[],"O:\\Documents\\bp-kliks\\client\\src\\components\\SurveyManagement\\viewResponseModal.js",["481","482","483","484"],"O:\\Documents\\bp-kliks\\client\\src\\components\\SurveyManagement\\DeleteResponseModal.js",[],"O:\\Documents\\bp-kliks\\client\\src\\components\\CourseManagement\\DeleteCourse.js",["485","486"],"O:\\Documents\\bp-kliks\\client\\src\\components\\CourseManagement\\EditCourse.js",["487"],"O:\\Documents\\bp-kliks\\client\\src\\components\\SurveyManagement\\AnswerTypes\\FreeResponse.js",[],"O:\\Documents\\bp-kliks\\client\\src\\components\\SurveyManagement\\AnswerTypes\\FileUpload.js",["488","489"],"O:\\Documents\\bp-kliks\\client\\src\\components\\SurveyManagement\\AnswerTypes\\MultipleChoice.js",[],"O:\\Desktop\\bp-kliks\\client\\src\\index.js",[],["490","491"],"O:\\Desktop\\bp-kliks\\client\\src\\components\\App.js",["492","493"],"import React from 'react';\r\nimport NavBar from './NavBar.js';\r\nimport SideMenu from './SideMenu.js';\r\nimport ModeBar from './ModeBar.js';\r\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js'\r\nimport LoginPage from './LoginPage.js';\r\nimport AppMode from \"./../AppMode.js\"\r\nimport SurveyManagementPage from './SurveyManagementPage.js';\r\nimport Rounds from './Rounds.js';\r\nimport CoursesPage from './CourseManagement/CoursesPage.js';\r\nimport AboutBox from './AboutBox.js';\r\n\r\nconst modeTitle = {};\r\nmodeTitle[AppMode.LOGIN] = \"Welcome to Kliks\";\r\nmodeTitle[AppMode.SURVEY_MANAGEMENT] = \"Survey Management\";\r\nmodeTitle[AppMode.ROUNDS] = \"My Rounds\";\r\nmodeTitle[AppMode.ROUNDS_LOGROUND] = \"Log New Round\";\r\nmodeTitle[AppMode.ROUNDS_EDITROUND] = \"Edit Round\";\r\nmodeTitle[AppMode.COURSES] = \"Courses\";\r\nmodeTitle[AppMode.COURSES_CREATE] = \"Add Course\";\r\nmodeTitle[AppMode.COURSES_DELETE] = \"Delete Course\";\r\nmodeTitle[AppMode.COURSES_EDIT] = \"Edit Course\";\r\nmodeTitle[AppMode.STUDENTS] = \"Students\";\r\nmodeTitle[AppMode.STUDENTS_CREATE] = \"Add a Student\";\r\nmodeTitle[AppMode.STUDENTS_UPLOAD] = \"Students\";\r\nmodeTitle[AppMode.STUDENTS_EDIT] = \"Edit Student\";\r\nmodeTitle[AppMode.STUDENTS_DELETE] = \"Delete Student\";\r\n\r\nconst modeToPage = {};\r\n\r\n/*  Login/Register Pages */\r\nmodeToPage[AppMode.LOGIN] = LoginPage;\r\n\r\n/*  Survey/Responses/Questions Pages */\r\nmodeToPage[AppMode.SURVEY_MANAGEMENT] = SurveyManagementPage;\r\nmodeToPage[AppMode.SURVEY_MANAGEMENT_RESPONSES] = SurveyManagementPage;\r\nmodeToPage[AppMode.SURVEY_MANAGEMENT_CREATE] = SurveyManagementPage;\r\nmodeToPage[AppMode.SURVEY_MANAGEMENT_EDIT] = SurveyManagementPage;\r\nmodeToPage[AppMode.SURVEY_MANAGEMENT_CREATE_SURVEY] = SurveyManagementPage;\r\nmodeToPage[AppMode.SURVEY_MANAGEMENT_SEARCH] = SurveyManagementPage;\r\nmodeToPage[AppMode.SURVEY_MANAGEMENT_SEARCH_SURVEYS] = SurveyManagementPage;\r\n\r\n/*  Dashboard Pages */\r\nmodeToPage[AppMode.ROUNDS] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_LOGROUND] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_EDITROUND] = Rounds;\r\n\r\n/*  Course Pages */\r\nmodeToPage[AppMode.COURSES] = CoursesPage;\r\nmodeToPage[AppMode.COURSES_CREATE] = CoursesPage;\r\nmodeToPage[AppMode.COURSES_DELETE] = CoursesPage;\r\nmodeToPage[AppMode.COURSES_EDIT] = CoursesPage;\r\n\r\n/* Students Pages, students are tied to courses */\r\nmodeToPage[AppMode.STUDENTS] = CoursesPage;\r\nmodeToPage[AppMode.STUDENTS_CREATE] = CoursesPage;\r\nmodeToPage[AppMode.STUDENTS_UPLOAD] = CoursesPage;\r\nmodeToPage[AppMode.STUDENTS_EDIT] = CoursesPage;\r\nmodeToPage[AppMode.STUDENTS_DELETE] = CoursesPage;\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {mode: AppMode.LOGIN,\r\n                  menuOpen: false,\r\n                  authenticated: false,\r\n                  userObj: {displayName: \"\", profilePicURL: \"\"},\r\n                  editAccount: false,\r\n                  showEditAccountDialog: false,\r\n                  statusMsg: \"\",\r\n                  showAboutDialog: false\r\n                 };\r\n  }\r\n\r\n  //componentDidMount\r\n  componentDidMount() {\r\n    if (!this.state.authenticated) { \r\n      //Use /auth/test route to (re)-test authentication and obtain user data\r\n      fetch(\"/auth/test\")\r\n        .then((response) => response.json())\r\n        .then((obj) => {\r\n          if (obj.isAuthenticated) {\r\n            this.setState({\r\n              userObj: obj.user,\r\n              authenticated: true,\r\n              mode: AppMode.SURVEY_MANAGEMENT //We're authenticated so can get into the app.\r\n            });\r\n          }\r\n        }\r\n      )\r\n    } \r\n  }\r\n\r\n  //refreshOnUpdate(newMode) -- Called by child components when user data changes in \r\n  //the database. The function calls the users/:userid (GET) route to update \r\n  //the userObj state var based on the latest database changes, and sets the \r\n  //mode state var is set to newMode. After this method is called, the\r\n  //App will re-render itself, forcing the new data to \r\n  //propagate to the child components when they are re-rendered.\r\n  refreshOnUpdate = async(newMode) => {\r\n    let response = await fetch(\"/users/\" + this.state.userObj.id);\r\n    response = await response.json();\r\n    const obj = JSON.parse(response);\r\n    this.setState({\r\n      userObj: obj,\r\n      mode: newMode\r\n    });\r\n  }\r\n\r\n\r\n  handleChangeMode = (newMode) => {\r\n    this.setState({mode: newMode});\r\n  }\r\n\r\n  openMenu = () => {\r\n    this.setState({menuOpen : true});\r\n  }\r\n  \r\n  closeMenu = () => {\r\n    this.setState({menuOpen : false});\r\n  }\r\n\r\n  toggleMenuOpen = () => {\r\n    this.setState(prevState => ({menuOpen: !prevState.menuOpen}));\r\n  }\r\n\r\n  setUserId = (Id) => {\r\n    this.setState({userId: Id,\r\n                   authenticated: true});\r\n  }\r\n\r\n  showEditAccount = () => {\r\n    this.setState({showEditAccountDialog: true});\r\n\r\n  }\r\n\r\n  cancelEditAccount = () => {\r\n    this.setState({showEditAccountDialog: false});\r\n  }\r\n\r\n  updateUser = async () => {\r\n    // Get the current user\r\n    let url = \"/users/\" + this.state.userObj.id;\r\n    let res = await fetch(url, {method: 'GET'});\r\n    if (res.status != 200) {\r\n        let msg = await res.text();\r\n        console.log(\"There was an error refreshing the user: \" + msg);\r\n        return;\r\n    } \r\n    let body = await res.json();\r\n    body = JSON.parse(body);\r\n    console.log(\"refreshed User: \" + body);\r\n    this.setState({userObj: body});\r\n  }\r\n\r\n  //editAccountDone -- called after successful edit or\r\n  //deletion of user account. msg contains the status\r\n  //message and deleted indicates whether an account was\r\n  //edited (deleted == false) or deleted (deleted == true)\r\n  editAccountDone = (msg, deleted) => {\r\n    if (deleted) {\r\n      this.setState({showEditAccountDialog: false,\r\n                     statusMsg: msg,\r\n                     mode: AppMode.LOGIN});\r\n      } else {\r\n        this.setState({showEditAccountDialog: false,\r\n          statusMsg: msg});\r\n      }\r\n  }\r\n\r\n  closeStatusMsg = () => {\r\n    this.setState({statusMsg: \"\"});\r\n  }\r\n\r\n  render() {\r\n    const ModePage = modeToPage[this.state.mode];\r\n    return (\r\n      <div className=\"padded-page\">\r\n        {this.state.showAboutDialog ? \r\n          <AboutBox close={() => this.setState({showAboutDialog: false})}/> : null}\r\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\">\r\n              <span>{this.state.statusMsg}</span>\r\n              <button className=\"modal-close\" onClick={this.closeStatusMsg}>\r\n                  <span className=\"fa fa-times\"></span></button></div> : null}\r\n        {this.state.showEditAccountDialog ? \r\n            <CreateEditAccountDialog \r\n              create={false} \r\n              userId={this.state.userObj.id} \r\n              done={this.editAccountDone} \r\n              cancel={this.cancelEditAccount}/> : null}\r\n        <NavBar \r\n          title={modeTitle[this.state.mode]} \r\n          mode={this.state.mode}\r\n          changeMode={this.handleChangeMode}\r\n          menuOpen={this.state.menuOpen}\r\n          toggleMenuOpen={this.toggleMenuOpen}/>\r\n          <SideMenu \r\n            menuOpen = {this.state.menuOpen}\r\n            mode={this.state.mode}\r\n            toggleMenuOpen={this.toggleMenuOpen}\r\n            displayName={this.state.userObj.displayName}\r\n            profilePicURL={this.state.userObj.profilePicURL}\r\n            localAccount={this.state.userObj.authStrategy === \"local\"}\r\n            editAccount={this.showEditAccount}\r\n            logOut={() => this.handleChangeMode(AppMode.LOGIN)}\r\n            changeMode={this.handleChangeMode}\r\n            showAbout={() => {this.setState({showAboutDialog: true})}}\r\n            userType={this.state.userObj.userType}/>\r\n          <ModeBar \r\n            mode={this.state.mode} \r\n            changeMode={this.handleChangeMode}\r\n            menuOpen={this.state.menuOpen}/>\r\n          <ModePage \r\n            menuOpen={this.state.menuOpen}\r\n            mode={this.state.mode}\r\n            changeMode={this.handleChangeMode}\r\n            userObj={this.state.userObj}\r\n            updateUser={this.updateUser}\r\n            refreshOnUpdate={this.refreshOnUpdate}/>\r\n      </div>\r\n    );  \r\n  }\r\n}\r\n\r\nexport default App;","O:\\Desktop\\bp-kliks\\client\\src\\serviceWorker.js",[],"O:\\Desktop\\bp-kliks\\client\\src\\components\\SideMenu.js",["494","495","496","497","498","499","500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515","516","517"],"import React from 'react';\r\nimport AppMode from './../AppMode.js'\r\nimport App from './App.js';\r\n\r\nclass SideMenu extends React.Component {\r\n\r\n  setGeneralMode = (mode) => {\r\n    if(AppMode.SURVEY_MANAGEMENT === mode|| \r\n      AppMode.SURVEY_MANAGEMENT_CREATE === mode || \r\n      AppMode.SURVEY_MANAGEMENT_CREATE_SURVEY  === mode||\r\n      AppMode.SURVEY_MANAGEMENT_RESPONSES === mode \r\n      || AppMode.SURVEY_MANAGEMENT_SEARCH === mode\r\n      || AppMode.SURVEY_MANAGEMENT_SEARCH_SURVEYS === mode){\r\n      return AppMode.SURVEY_MANAGEMENT;\r\n    } else {\r\n      return mode;\r\n    }\r\n  }\r\n  \r\n//renderModeItems -- Renders correct subset of mode menu items based on\r\n//current mode, which is stored in this.prop.mode. Uses switch statement to\r\n//determine mode.\r\nrenderModeMenuItems = () => {\r\n  const mode = this.setGeneralMode(this.props.mode);\r\n  switch (mode) {\r\n    case AppMode.SURVEY_MANAGEMENT || AppMode.SURVEY_MANAGEMENT_CREATE || \r\n          AppMode.SURVEY_MANAGEMENT_RESPONSES  || AppMode.SURVEY_MANAGEMENT_SEARCH ||\r\n          AppMode.SURVEY_MANAGEMENT_CREATE_SURVEY || AppMode.SURVEY_MANAGEMENT_SEARCH_SURVEYS:\r\n      return(\r\n        <div>\r\n        <a className=\"sidemenu-item\" id=\"surveyManagement-MainPage\" onClick={(e) => { \r\n          e.preventDefault();\r\n          this.props.changeMode(AppMode.SURVEY_MANAGEMENT);\r\n          }}>\r\n            <span className=\"fa fa-bolt\"></span>&nbsp;Active Questions</a>\r\n        <a className=\"sidemenu-item \" id=\"surveyManagement-search\" onClick={(e) => { \r\n          e.preventDefault();\r\n          this.props.changeMode(AppMode.SURVEY_MANAGEMENT_SEARCH);\r\n          }}>\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Questions</a>\r\n          <a className=\"sidemenu-item \" id=\"surveyManagement-searchSurvey\" onClick={(e) => { \r\n          e.preventDefault();\r\n          this.props.changeMode(AppMode.SURVEY_MANAGEMENT_SEARCH_SURVEYS);\r\n          }}>\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Surveys</a>\r\n        <a className=\"sidemenu-item \" id=\"surveyManagement-create\" onClick={(e) => { \r\n          e.preventDefault();\r\n          this.props.changeMode(AppMode.SURVEY_MANAGEMENT_CREATE);\r\n          }}>\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Create Questions</a>\r\n            <a className=\"sidemenu-item \" id=\"surveyManagement-createSurvey\" onClick={(e) => { \r\n          e.preventDefault();\r\n          this.props.changeMode(AppMode.SURVEY_MANAGEMENT_CREATE_SURVEY);\r\n          }}>\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Create Survey</a>\r\n        <a className=\"sidemenu-item \" id=\"surveyManagement-responses\" onClick={(e) => { \r\n          e.preventDefault();\r\n          this.props.changeMode(AppMode.SURVEY_MANAGEMENT_RESPONSES);\r\n          }}>\r\n            <span className=\"fa fa-folder-open\"></span>&nbsp;Responses</a>           \r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.ROUNDS:\r\n      return(\r\n        <div>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Log New Round</a>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Rounds</a>\r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.COURSES:\r\n    case AppMode.COURSES_CREATE:\r\n      if (this.props.userType === \"Instructor\"){\r\n        return(\r\n          <div>\r\n          <a className=\"sidemenu-item\" onClick={(e) => { \r\n          e.preventDefault();\r\n          this.props.changeMode(AppMode.COURSES);\r\n          }}>\r\n              <span className=\"fa fa-folder-open\" id=\"viewCoursesLink\"></span>&nbsp;View Courses</a>\r\n          <a className=\"sidemenu-item\" onClick={(e) => { \r\n          e.preventDefault();\r\n          this.props.changeMode(AppMode.COURSES_CREATE);\r\n          }}>\r\n              <span className=\"fa fa-plus\" id=\"addCourseLink\"></span>&nbsp;Add a Course</a>\r\n          </div>\r\n        );\r\n      } else {\r\n        return(\r\n          <div>\r\n          <a className=\"sidemenu-item\" onClick={(e) => { \r\n          e.preventDefault();\r\n          this.props.changeMode(AppMode.COURSES);\r\n          }}>\r\n              <span className=\"fa fa-folder-open\" id=\"viewCoursesLink\"></span>&nbsp;View Courses</a>\r\n          </div>\r\n        );\r\n      }\r\n      break;\r\n      case AppMode.STUDENTS:\r\n      case AppMode.STUDENTS_CREATE:\r\n      case AppMode.STUDENTS_UPLOAD:\r\n        if (this.props.userType === \"Instructor\"){\r\n          return(\r\n            <div>\r\n            <a className=\"sidemenu-item\" onClick={(e) => { \r\n            e.preventDefault();\r\n            this.props.changeMode(AppMode.COURSES);\r\n            }}>\r\n                <span className=\"fa fa-folder-open\" id=\"viewCoursesLink\"></span>&nbsp;View Courses</a>\r\n            <a className=\"sidemenu-item\" onClick={(e) => { \r\n            e.preventDefault();\r\n            this.props.changeMode(AppMode.STUDENTS_CREATE);\r\n            }}>\r\n                <span className=\"fa fa-plus\" id=\"addStudentLink\"></span>&nbsp;Add a Student</a>\r\n            <a className=\"sidemenu-item\" onClick={(e) => { \r\n            e.preventDefault();\r\n            this.props.changeMode(AppMode.STUDENTS_UPLOAD);\r\n            }}>\r\n                <span className=\"fa fa-upload\" id=\"uploadStudentsLink\"></span>&nbsp;Upload Students</a>\r\n            </div>\r\n          );\r\n        } else {\r\n          return(\r\n            <div>\r\n            <a className=\"sidemenu-item\" onClick={(e) => { \r\n            e.preventDefault();\r\n            this.props.changeMode(AppMode.COURSES);\r\n            }}>\r\n                <span className=\"fa fa-folder-open\" id=\"viewCoursesLink\"></span>&nbsp;View Courses</a>\r\n            </div>\r\n          );\r\n        }\r\n      break;\r\n    default:\r\n        return null;\r\n    }\r\n}\r\n\r\n    render() {\r\n       return (\r\n        <div id=\"sidemenu\" className={\"sidemenu \" + (this.props.menuOpen ? \"sidemenu-open\" : \"sidemenu-closed\")}\r\n             onClick={this.props.toggleMenuOpen}>\r\n          {/* SIDE MENU TITLE */}\r\n          <div className=\"sidemenu-title\">\r\n            <img src={this.props.profilePicURL} height='60' width='60' />\r\n            <span id=\"userID\" className=\"sidemenu-userID\">&nbsp;{this.props.displayName}</span>\r\n        </div>\r\n          {/* MENU CONTENT */}\r\n          {this.renderModeMenuItems()}\r\n          {/* The following menu items are present regardless of mode */}\r\n          {this.props.localAccount ? \r\n            <a id=\"accountBtn\" className=\"sidemenu-item\" onClick={this.props.editAccount}>\r\n              <span className=\"fa fa-user\"></span>&nbsp;Account</a> : null}\r\n          <a id=\"aboutBtn\" className=\"sidemenu-item\" onClick={this.props.showAbout}>\r\n            <span className=\"fa fa-info-circle\"></span>&nbsp;About</a>\r\n          <a id=\"logOutBtn\" className=\"sidemenu-item\" onClick={this.props.logOut}>\r\n            <span className=\"fa fa-sign-out-alt\"></span>&nbsp;Log Out</a>\r\n        </div>\r\n       );\r\n    }\r\n}\r\n\r\nexport default SideMenu;\r\n","O:\\Desktop\\bp-kliks\\client\\src\\AppMode.js",[],"O:\\Desktop\\bp-kliks\\client\\src\\components\\NavBar.js",["518"],"import React from 'react';\r\nimport AppMode from '../AppMode';\r\nimport logo from '../favicon.png'; //Importing the logo from the src directory\r\n\r\nclass NavBar extends React.Component {\r\n\r\n  getMenuBtnIcon = () => {\r\n      if (this.props.mode === AppMode.ROUNDS_LOGROUND || \r\n          this.props.mode === AppMode.ROUNDS_EDITROUND)\r\n          return \"fa fa-arrow-left\";\r\n      if (this.props.menuOpen)\r\n        return \"fa fa-times\";\r\n      return \"fa fa-bars\";\r\n  }\r\n\r\n  handleMenuBtnClick = () => {\r\n    if (this.props.mode === AppMode.ROUNDS_LOGROUND ||\r\n        this.props.mode === AppMode.ROUNDS_EDITROUND) {\r\n      this.props.changeMode(AppMode.ROUNDS);\r\n    } else if (this.props.mode != AppMode.LOGIN) {\r\n      this.props.toggleMenuOpen();\r\n    }\r\n  }\r\n\r\n  // Directly added the logo from the src directory since importing it from onedrive was causing complications\r\n  // where the image would not load correctly\r\n  render() {\r\n    return (\r\n    <div id=\"navBarMenu\" className=\"navbar\">  \r\n    <span className=\"navbar-items\">\r\n      <button id=\"menuBtn\" className=\"sidemenu-btn\" onClick={this.handleMenuBtnClick}>\r\n        <span id=\"menuBtnIcon\" className={\"sidemenu-btn-icon \" + this.getMenuBtnIcon()}>\r\n        </span>\r\n      </button>\r\n      <img src={logo} alt=\"Kliks Logo\" height=\"38px\"\r\n      width=\"38px\" />\r\n      <span className=\"navbar-title\">\r\n        &nbsp;{this.props.title}\r\n      </span>\r\n    </span>\r\n  </div>\r\n); \r\n}\r\n}\r\n\r\nexport default NavBar;\r\n","O:\\Desktop\\bp-kliks\\client\\src\\components\\SurveyManagementPage.js",["519","520","521","522","523","524","525","526","527","528"],"// Main manage surveyManagement page\r\n// From here an instructor can CreateQuestions, CreateSurveys, SearchSurveys, View Active questions, search for questions, and view all\r\n// of the responses that students made.\r\n\r\nimport React from 'react';\r\nimport CreateSurvey from './SurveyManagement/CreateSurvey.js';\r\nimport ActiveQuestions from './SurveyManagement/ActiveQuestions.js'\r\nimport SubmittedResponse from './SurveyManagement/SubmittedResponse.js'\r\nimport AppMode from './../AppMode.js'\r\nimport SearchQestions from './SurveyManagement/SearchQuestions.js'\r\nimport CreateQuestion from './SurveyManagement/CreateQuestion.js';\r\nimport SearchSurveys from './SurveyManagement/SearchSurveys.js';\r\n\r\nclass SurveyManagementPage extends React.Component {\r\n\r\n    // Constructor for the component that takes in the props and sets the state of the component.\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            questions: [],\r\n            responses: [],\r\n            surveys : [],\r\n            errorMsg : \"\",\r\n            deleteId: \"\",\r\n            editId: {},\r\n            surveyToDelete : {}\r\n        };\r\n    }\r\n\r\n    //componentDidMount\r\n    componentDidMount() {\r\n        this.updateSurveys();\r\n    }\r\n\r\n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\r\n    //the user is considering deleting.\r\n    setDeleteId = (val) => {\r\n        this.setState({deleteId: val});\r\n    }\r\n\r\n    //setEditId -- Capture in this.state.editId the unique id of the item\r\n    //the user is considering editing.\r\n    setEditId = (val) => {\r\n        this.setState({editId: val}, () => {\r\n            this.props.changeMode(AppMode.SURVEY_MANAGEMENT_EDIT);\r\n        });\r\n    }\r\n\r\n    /*\r\n        Save a question to the mongoDB by calling the POST route for questions\r\n    */\r\n    saveQuestion = async (surveyId, newQuestion) => {\r\n        const url = '/questions/' + surveyId;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'POST',\r\n            body: JSON.stringify(newQuestion)});\r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.SURVEY_MANAGEMENT_SEARCH);\r\n        } else {\r\n            this.setState({errorMsg: \"\"});\r\n            await this.updateSurveys();\r\n            this.props.refreshOnUpdate(AppMode.SURVEY_MANAGEMENT_SEARCH);\r\n        }\r\n    }\r\n\r\n    /*\r\n        Edit a question to the mongoDB by calling the PUT route for questions\r\n    */\r\n    editQuestion = async (surveyId, updatedQuestion) => {\r\n        const url = '/questions/' + surveyId + '/' + \r\n            this.state.editId.questionID;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'PUT',\r\n            body: JSON.stringify(updatedQuestion)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            alert(\"An error occurred when attempting to update the question to database: \" \r\n            + msg);\r\n            this.props.changeMode(AppMode.SURVEY_MANAGEMENT_SEARCH);\r\n        } else {\r\n            console.log(\"Question Updated!\");\r\n            await this.updateSurveys();\r\n            this.props.refreshOnUpdate(AppMode.SURVEY_MANAGEMENT_SEARCH);\r\n        }\r\n    }\r\n\r\n    //deleteQuestion -- Delete the current user's question uniquely identified by\r\n    //this.state.deleteId, delete from the database, and reset deleteId to empty.\r\n    deleteQuestion = async () => {\r\n        // Make a request to the questions DELETE route to remove the question.\r\n        const url = '/questions/' + this.props.userObj.id + '/' + \r\n            this.questions[this.state.deleteId].questionID;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'DELETE'\r\n        }); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            alert(\"An error occurred when attempting to delete question in database: \" \r\n            + msg);\r\n            this.props.changeMode(AppMode.SURVEY_MANAGEMENT_SEARCH);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.SURVEY_MANAGEMENT_SEARCH);\r\n        }\r\n    }\r\n\r\n    /*\r\n        Save a survey to the mongoDB \r\n    */\r\n    saveSurvey = async (surveyID, newSurvey) => {\r\n        // Make a request to the surveys POST route to add the survey.        \r\n        const url = '/surveys/' + surveyID;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'POST',\r\n            body: JSON.stringify(newSurvey)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.SURVEY_MANAGEMENT_SEARCH_SURVEYS);\r\n        } else {\r\n            this.setState({errorMsg: \"\"});\r\n            await this.updateSurveys(); //call update to update the array state variables.\r\n            this.props.refreshOnUpdate(AppMode.SURVEY_MANAGEMENT_SEARCH_SURVEYS);\r\n        }\r\n    }\r\n\r\n    // Updates surveys like the updateUser except for Surveys\r\n    updateSurveys = async () => {\r\n        var courses = [];\r\n        courses = this.props.userObj.courses.map((course) => {\r\n            return course.courseID;\r\n        });\r\n    \r\n        // Checks if there are courses, if there are no courses send we just send an array with an empty string.\r\n        if(courses.length == 0){\r\n            courses = [\"\"]\r\n        }\r\n        \r\n        // Make a request to get the surveys\r\n        let response = await fetch(\"/all/surveys/\" + JSON.stringify(courses), {method: 'GET'});\r\n        if (response.status != 200) {\r\n          let msg = await response.text();\r\n          console.log(\"There was an error refreshing the user: \" + msg);\r\n          return;\r\n        } \r\n        let surveys = await response.json();\r\n        surveys = JSON.parse(surveys);\r\n\r\n        // If we get back nothing then we can set the state to empty arrays\r\n        if(surveys.length == 0){\r\n            this.setState({\r\n                surveys: [],\r\n                questions: [],\r\n                responses: []\r\n            });\r\n            return;\r\n        }\r\n\r\n        var questions = this.seperateQuestions(surveys); // Get all of the questions.\r\n        var responses = this.seperateResponses(surveys); // Get all of the responses.\r\n\r\n        // Udpate the surveys, questions, and responses.\r\n        this.setState({\r\n            surveys: surveys,\r\n            questions: questions,\r\n            responses : responses\r\n        });\r\n    }\r\n\r\n    // Gets the questions from the surveys that were just retrieved \r\n    seperateQuestions = (surveys) => {\r\n        var questions = [];\r\n        surveys.forEach((survey)=>{\r\n            survey.questions.forEach((question)=> {\r\n                questions.push(\r\n                    {\r\n                        questionID: question.questionID,\r\n                        surveyID: survey.surveyID,\r\n                        responses: question.responses,\r\n                        survey: survey,\r\n                        question: question,\r\n                    });\r\n            });\r\n        });\r\n\r\n        return questions;\r\n    }\r\n\r\n    // Gets the responses from the surveys that were just retrieved \r\n    seperateResponses = (surveys) => {\r\n        var responses = [];\r\n        // Run through all of the surveys and questions then the responses and begin to push them into the responses object.\r\n        surveys.forEach((survey)=>{\r\n            survey.questions.forEach((question)=> {\r\n                question.responses.forEach((response) => {\r\n                    responses.push({\r\n                            questionID: question.questionID,\r\n                            surveyID: survey.surveyID,\r\n                            response: response,\r\n                            survey: survey,\r\n                            question: question,\r\n                            responseType: response.students.length > 1 ? \"Group\" : \"Individual\"\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        return responses;        \r\n    }\r\n\r\n    // Sets the survey that is going to be delete.\r\n    setSurveyDelete = (survey) => {\r\n        // Setting the unique identifier that will be delete [The survey itself.]\r\n        this.setState({\r\n            surveyToDelete : survey\r\n        });\r\n    }\r\n\r\n    // Delete Surveys by calling the DELETE route for SURVEYS\r\n    deleteSurvey = async () => {\r\n        if(this.state.surveyToDelete == {}){\r\n            return;\r\n        }\r\n\r\n        const url = '/surveys/' + this.state.surveyToDelete.surveyID;\r\n        const res = await fetch(url, {method: 'DELETE'}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: \"An error occurred when attempting to delete survey from MongoDB: \" \r\n            + msg});\r\n            this.props.changeMode(AppMode.SURVEY_MANAGEMENT_SEARCH_SURVEYS);\r\n        } else {\r\n            await this.updateSurveys(); // here, we want to update the surveys after this call.\r\n            this.props.refreshOnUpdate(AppMode.SURVEY_MANAGEMENT_SEARCH_SURVEYS);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        switch(this.props.mode) {\r\n            case AppMode.SURVEY_MANAGEMENT:\r\n                return (\r\n                    <>\r\n                    <ActiveQuestions>\r\n                    </ActiveQuestions>\r\n                    </>\r\n                );\r\n            case AppMode.SURVEY_MANAGEMENT_CREATE:\r\n                return (\r\n                    <CreateQuestion\r\n                    userObj={this.props.userObj}\r\n                    surveys={this.state.surveys}\r\n                    mode={this.props.mode}\r\n                    changeMode={this.props.changeMode}\r\n                    saveQuestion={this.saveQuestion}\r\n                    >\r\n                    </CreateQuestion>\r\n                );\r\n            case AppMode.SURVEY_MANAGEMENT_EDIT:\r\n                // console.log(this.state.editId);\r\n                // let thisEntry = {...this.state.editId}\r\n                // thisEntry.date = thisEntry.question.date.substr(0,10);\r\n                return (\r\n                    <CreateQuestion\r\n                    // startData={thisEntry}\r\n                    surveys={this.state.surveys}\r\n                    question={this.state.editId}\r\n                    mode={this.props.mode}\r\n                    changeMode={this.props.changeMode}\r\n                    saveQuestion={this.saveQuestion}\r\n                    editQuestion={this.editQuestion}\r\n                    >\r\n                    </CreateQuestion>\r\n                );\r\n            case AppMode.SURVEY_MANAGEMENT_CREATE_SURVEY:\r\n                return (\r\n                    <CreateSurvey \r\n                    userObj={this.props.userObj}\r\n                    surveys={this.state.surveys}\r\n                    changeMode={this.props.changeMode}\r\n                    saveSurvey={this.saveSurvey}\r\n                    >\r\n                    </CreateSurvey>\r\n                );\r\n            case AppMode.SURVEY_MANAGEMENT_SEARCH:\r\n                return (\r\n                    <SearchQestions\r\n                    menuOpen={this.props.menuOpen}\r\n                    setEditId={this.setEditId}\r\n                    setDeleteId={this.setDeleteId}\r\n                    updateQuestions={this.updateSurveys}\r\n                    deleteQuestion={this.deleteQuestion}\r\n                    questions={this.state.questions}\r\n                    changeMode={this.props.changeMode}\r\n                    >\r\n                    </SearchQestions>\r\n                );\r\n            case AppMode.SURVEY_MANAGEMENT_SEARCH_SURVEYS:\r\n                return (\r\n                    <SearchSurveys\r\n                    surveys={this.state.surveys}\r\n                    userObj={this.props.userObj}\r\n                    updateSurveys={this.updateSurveys}\r\n                    menuOpen={this.props.menuOpen}\r\n                    setSurveyDelete={this.setSurveyDelete}\r\n                    deleteSurvey={this.deleteSurvey}\r\n                    >\r\n                    </SearchSurveys>\r\n                );\r\n            case AppMode.SURVEY_MANAGEMENT_RESPONSES:\r\n                return (\r\n                    <SubmittedResponse\r\n                    userObj={this.props.userObj}\r\n                    updateResponses={this.updateSurveys}\r\n                    questions={this.state.questions}\r\n                    responses={this.state.responses}\r\n                    menuOpen={this.props.menuOpen}\r\n                    >\r\n                    </SubmittedResponse>\r\n                );\r\n        }\r\n    }   \r\n}\r\n\r\nexport default SurveyManagementPage;","O:\\Desktop\\bp-kliks\\client\\src\\components\\ModeBar.js",["529","530","531"],"import React from 'react';\r\nimport AppMode from '../AppMode.js';\r\n\r\n\r\nclass ModeBar extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className={\"modebar\" + (this.props.mode === AppMode.LOGIN ? \r\n          \" invisible\" : (this.props.menuOpen ? \" ignore-click visible\" : \" visible\"))}>\r\n        <a className={(this.props.mode === AppMode.SURVEY_MANAGEMENT ? \" item-selected\" : null)}\r\n            onClick={()=>this.props.changeMode(AppMode.SURVEY_MANAGEMENT)}>\r\n          <span className=\"modebaricon fa fa-th-list\"></span>\r\n          <span className=\"modebar-text\">Survey Management</span>\r\n        </a>\r\n        <a className={(this.props.mode === AppMode.ROUNDS || \r\n               this.props.mode === AppMode.ROUNDS_EDITROUND || \r\n               this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                  \" item-selected\" : null)}\r\n           onClick={()=>this.props.changeMode(AppMode.ROUNDS)}>\r\n          <span className=\"modebar-icon  fa fa-history\"></span>\r\n          <span className=\"modebar-text\">Dashboard</span>\r\n        </a>\r\n        <a id=\"CoursesMode\" className={(this.props.mode === AppMode.COURSES ? \" item-selected\" : null)}\r\n          onClick={()=>this.props.changeMode(AppMode.COURSES)}>\r\n          <span className=\"modebar-icon  fa fa-flag\"></span>\r\n          <span className=\"modebar-text\">Courses</span>\r\n        </a> \r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default ModeBar;\r\n","O:\\Desktop\\bp-kliks\\client\\src\\components\\CreateEditAccountDialog.js",["532","533","534","535","536","537","538","539","540","541","542","543","544","545","546","547","548","549","550","551"],"import React from 'react';\r\nimport ConfirmDeleteAccount from './ConfirmDeleteAccount.js';\r\nimport confirmDeleteAccount from './ConfirmDeleteAccount.js';\r\n\r\nclass CreateEditAccountDialog extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.origAccountInfo = null;\r\n        //Create a ref for the email input DOM element\r\n        this.newUserRef = React.createRef();\r\n        this.repeatPassRef = React.createRef();\r\n        this.profilePicRef = React.createRef();\r\n        this.state = {accountName: \"\",\r\n                      displayName: \"\",\r\n                      userType: \"\",\r\n                      profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                      password: \"\",\r\n                      passwordRepeat: \"\",\r\n                      securityQuestion: \"\",\r\n                      securityAnswer: \"\",\r\n                      formUpdated: false,\r\n                      confirmDelete: false};\r\n    } \r\n\r\n    //componentDidMount -- If we are editing an existing user acccount, we need to grab the data from\r\n    //the database and push them into the state.\r\n    async componentDidMount() {\r\n        if (!this.props.create) {\r\n            //obtain current user data from database and push into state\r\n            const url = \"/users/\" + this.props.userId;\r\n            const res = await fetch(url);\r\n            const json = await res.json();\r\n            const userData = JSON.parse(json);\r\n            this.origAccountInfo = userData; //This determines whether update can occur\r\n            this.origAccountInfo.passwordRepeat = userData.password;\r\n            this.setState({accountName: this.props.userId,\r\n                           displayName: userData.displayName,\r\n                           userType: userData.userType,\r\n                           profilePicURL: userData.profilePicURL,\r\n                           password: userData.password,\r\n                           passwordRepeat: userData.password,\r\n                           securityQuestion: userData.securityQuestion,\r\n                           securityAnswer: userData.securityAnswer});\r\n        }\r\n    }\r\n\r\n    //checkDataValidity -- Callback function invoked after a form element in\r\n    //the 'Create Account' dialog box changes and component state has been\r\n    //updated. We first check whether the passwords match. If they do not, \r\n    //we set a custom validity message to be displayed when the user clicks the\r\n    //'Create Account' button. Otherwise, we reset the custom validity message\r\n    //to empty so that it will NOT fire when the user clicks 'Create Account'.\r\n    //Second, we check whether anything in the form changed from the original.\r\n    //If so, we update the 'formUpdated' state var, so that the form's submit\r\n    //button is enabled.\r\n    checkDataValidity = () => {\r\n        if(!this.state.accountName.endsWith(\"@wsu.edu\")){\r\n            this.newUserRef.current.setCustomValidity(\"Email needs to be a wsu email: @wsu.edu\");\r\n        }\r\n        else{\r\n            this.newUserRef.current.setCustomValidity(\"\");\r\n        }\r\n\r\n        if (this.state.password != this.state.passwordRepeat) {\r\n            //Passwords don't match\r\n            this.repeatPassRef.current.setCustomValidity(\r\n            \"This password must match password entered in previous field.\");\r\n        } else {\r\n            this.repeatPassRef.current.setCustomValidity(\"\");\r\n        }\r\n    }\r\n\r\n    //handleChange--Called when a field in a dialog box form changes.\r\n    handleChange = (event) => {\r\n        const formUpdated = (this.origAccountInfo == null ? true : this.formIsUpdated(event.target.name,event.target.value));\r\n        if (event.target.name === \"profilePic\") {\r\n            if (event.target.value.length == 0) { //The user canceled the file selection -- set back to default\r\n                this.setState({profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                               formUpdated: formUpdated},\r\n                               this.checkDataValidity);\r\n            } else { //The user selected a file\r\n                const self = this;\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(this.profilePicRef.current.files[0]);\r\n                reader.addEventListener(\"load\",function() {\r\n                    self.setState({profilePicURL:  this.result,\r\n                                   formUpdated: formUpdated},this.checkDataValidity);\r\n                });\r\n                console.log(this.state.profilePicURL);\r\n            }\r\n        } else {\r\n            this.setState({[event.target.name]: event.target.value,\r\n                           formUpdated: formUpdated},this.checkDataValidity);\r\n        }\r\n    } \r\n\r\n    //formisUpdated-- Checks whether any form data element has changed from the original. If so, \r\n    //returns true. Returns false otherwise. Note that in case of editing new account, always returns\r\n    //true since this.origAccountInfo is set to null.\r\n    //Should be called whenever the user makes a change to form data.\r\n    formIsUpdated = (updateField,updateVal) => {\r\n        if (this.origAccountInfo[updateField] != updateVal) {return true;}\r\n        if (updateField != \"displayName\" && \r\n             this.state.displayName != this.origAccountInfo.displayName) \r\n             {return true;}\r\n        if (updateField != \"userType\" && \r\n             this.state.userType != this.origAccountInfo.userType) \r\n             {return true;}\r\n        if (updateField != \"profilePicURL\" && \r\n             this.state.profilePicURL != this.origAccountInfo.profilePicURL) \r\n             {return true;}\r\n        if (updateField != \"password\" &&\r\n            this.state.password !== this.origAccountInfo.password)\r\n            {return true;}\r\n        if (updateField != \"passwordRepeat\" &&\r\n            this.state.passwordRepeat !== this.origAccountInfo.passwordRepeat)\r\n            {return true;}\r\n        if (updateField != \"securityQuestion\" &&\r\n            this.state.securityQuestion !== this.origAccountInfo.securityQuestion)\r\n            {return true;}\r\n        if (updateField != \"securityAnswer\" &&\r\n            this.state.securityAnswer !== this.origAccountInfo.securityAnswer)\r\n            {return true;}\r\n        return false;\r\n    }\r\n\r\n    //setDefaultuserType -- Triggered by onBlur() event of Email field.\r\n    //Sets default value of display name to value entered into Email field \r\n    //as a courtesy.\r\n    setDefaultuserType = (event) => {\r\n        this.setState({userType: event.target.value});\r\n        this.setState({displayName: event.target.value});\r\n    }\r\n\r\n    //handleSubmit -- Triggered when user clicks on submit button to\r\n    //either create or edit account.\r\n    //Custom data checking ensures user account under this email does not \r\n    //already exist and that the rest of the info is valid. We create a new  \r\n    // object for user, save it to localStorage and take user to app's \r\n    //landing page. \r\n    handleSubmit = async(event) => {\r\n        event.preventDefault();\r\n        //Initialize user account\r\n        let userData = {\r\n            displayName: this.state.displayName,\r\n            userType: this.state.userType,\r\n            password: this.state.password,\r\n            profilePicURL: this.state.profilePicURL,\r\n            securityQuestion: this.state.securityQuestion,\r\n            securityAnswer: this.state.securityAnswer\r\n        };\r\n        const url = '/users/' + this.state.accountName;\r\n        let res;\r\n        if (this.props.create) { //use POST route to create new user account\r\n            res = await fetch(url, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                    },\r\n                method: 'POST',\r\n                body: JSON.stringify(userData)}); \r\n            if (res.status == 200) { //successful account creation!\r\n                this.props.done(\"New account created! Enter credentials to log in.\",false);\r\n            } else { //Unsuccessful account creation\r\n                //Grab textual error message\r\n                const resText = await res.text();\r\n                this.props.done(resText,false);\r\n            }\r\n        } else { //use PUT route to update existing user account\r\n            res = await fetch(url, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                    },\r\n                method: 'PUT',\r\n                body: JSON.stringify(userData)}); \r\n            if (res.status == 200) { //successful account creation!\r\n                this.props.done(\"User Account Updated!\",false);\r\n            } else { //Unsuccessful account update\r\n                //Grab textual error message\r\n                const resText = await res.text();\r\n                this.props.done(resText,false);\r\n            }\r\n        }\r\n    }\r\n\r\n    //deleteAccount -- Called after confirms account deletion. \r\n    //Uses DELETE server route to perform server deletion. \r\n    //Calls on done with status message and\r\n    //true if delete was succesful, false otherwise.\r\n    deleteAccount = async() => {\r\n       const url = '/users/' + this.state.accountName;\r\n       const res = await fetch(url, \r\n                    {method: 'DELETE'}); \r\n        if (res.status == 200) { //successful account deletion!\r\n            this.props.done(\"Account '\" + this.state.accountName + \"' has been deleted.\",true);\r\n        } else { //Unsuccessful account deletion\r\n            //Grab textual error message\r\n            const resText = await res.text();\r\n            this.props.done(resText,false);\r\n        }\r\n        this.setState({confirmDelete: false});\r\n    }\r\n\r\n    //confirmDeleteAccount -- Called when user clicks on \"Delete Account...\"\r\n    //button to indicate intention to delete account. Presents the Confirm\r\n    //Delete dialog box.\r\n    confirmDeleteAccount = (e) => {\r\n        e.preventDefault();\r\n        this.setState({confirmDelete: true});\r\n    }\r\n\r\n    render() {\r\n    return (  \r\n    <div className=\"modal\" role=\"dialog\">\r\n    <div className=\"modal-dialog modal-lg\"></div>\r\n        <div className=\"modal-content form-center\">\r\n            <div className=\"modal-header\">\r\n              <h3><b>{this.props.create ? \"Create New Account\" : \"Edit Account\"}</b></h3>\r\n              <button className=\"modal-close\" \r\n                       onClick={this.props.cancel}>\r\n                &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n            <form onSubmit={this.handleSubmit}>\r\n            <label>\r\n                Email: \r\n                <input  \r\n                autocomplete=\"off\"\r\n                disabled={!this.props.create}\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountName\"\r\n                type=\"email\"\r\n                size=\"35\"\r\n                placeholder=\"Enter Email Address\"\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                required={true}\r\n                ref={this.newUserRef}\r\n                value={this.state.accountName}\r\n                onChange={this.handleChange}\r\n                onBlur={this.setDefaultuserType}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Password:\r\n                <input\r\n                autocomplete=\"off\"\r\n                className=\"form-control form-text form-center\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                size=\"35\"\r\n                placeholder=\"Enter Password\"\r\n                pattern=\r\n                \"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                required={true}\r\n                value={this.state.password}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Repeat Password:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"passwordRepeat\"\r\n                type=\"password\"\r\n                size=\"35\"\r\n                placeholder=\"Repeat Password\"\r\n                required={true}\r\n                ref={this.repeatPassRef}\r\n                value={this.state.passwordRepeat}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Display Name:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"displayName\"\r\n                type=\"text\"\r\n                size=\"30\"\r\n                placeholder=\"Display Name\"\r\n                required={true}\r\n                value={this.state.displayName}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Account Type:\r\n                <select name=\"userType\" value={this.state.userType} \r\n                className=\"form-control form-center\" onChange={this.handleChange}>\r\n                <option value=\"SelectOne\">Select One</option>\r\n                <option value=\"Student\">Student</option>\r\n                <option value=\"Instructor\">Instructor</option>\r\n                </select> \r\n                </label>\r\n            <br/>\r\n            <label>\r\n                Profile Picture:<br/>\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"profilePic\"\r\n                type=\"file\"\r\n                accept=\"image/x-png,image/gif,image/jpeg\" \r\n                ref={this.profilePicRef}\r\n                value={this.state.profilePic}\r\n                onChange={this.handleChange}\r\n                />\r\n                <img src={this.state.profilePicURL != \"\" ? \r\n                            this.state.profilePicURL :\r\n                            this.state.profilePicDataURL} \r\n                        height=\"60\" width=\"60\" \r\n                 />\r\n            </label> \r\n            <br/>\r\n            <label>\r\n                Security Question:\r\n                <textarea\r\n                className=\"form-control form-text form-center\"\r\n                name=\"securityQuestion\"\r\n                size=\"35\"\r\n                placeholder=\"Security Question\"\r\n                rows=\"2\"\r\n                cols=\"35\"\r\n                maxLength=\"100\"\r\n                required={true}\r\n                value={this.state.securityQuestion}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Answer to Security Question:\r\n                <textarea\r\n                className=\"form-control form-text form-center\"\r\n                name=\"securityAnswer\"\r\n                type=\"text\"\r\n                placeholder=\"Answer\"\r\n                rows=\"2\"\r\n                cols=\"35\"\r\n                maxLength=\"100\"\r\n                required={true}\r\n                value={this.state.securityAnswer}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            {!this.props.create ?  \r\n            <button className=\"btn btn-small btn-danger\" onClick={this.confirmDeleteAccount}>\r\n                Delete Account...\r\n            </button> : null}\r\n            <br/><br/>\r\n            <button role=\"submit\" \r\n                disabled={!this.state.formUpdated}\r\n                className=\"btn btn-primary btn-color-theme modal-submit-btn\">\r\n                <span className={this.props.create ? \"fa fa-user-plus\" : \"fa fa-user\"}></span>\r\n                &nbsp;{this.props.create ? \"Create Account\" : \"Update Account\"}\r\n            </button>\r\n            </form>\r\n            </div>\r\n        </div>\r\n        {this.state.confirmDelete ? \r\n          <ConfirmDeleteAccount email={this.state.accountName}\r\n                                deleteAccount={this.deleteAccount}\r\n                                close={() => (this.setState({confirmDelete: false}))}\r\n         /> : null}\r\n    </div>\r\n    );\r\n}\r\n}\r\n\r\nexport default CreateEditAccountDialog;","O:\\Desktop\\bp-kliks\\client\\src\\components\\LoginPage.js",["552","553","554","555","556"],"import React from 'react';\r\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js';\r\nimport ResetPasswordDialog from './ResetPasswordDialog.js';\r\nimport LookUpAccountDialog from './LookUpAccountDialog.js';\r\nimport SecurityQuestionDialog from './SecurityQuestionDialog.js';\r\nimport AppMode from '../AppMode.js';\r\n\r\nclass LoginPage extends React.Component {\r\n\r\nconstructor() {\r\n    super();\r\n    //Create a ref for the email input DOM element\r\n    this.emailInputRef = React.createRef();\r\n    this.resetUserId = \"\";\r\n    this.resetQ = \"\";\r\n    this.resetA = \"\";\r\n    this.passwordInputRef = React.createRef();\r\n    this.state = {statusMsg: \"\",\r\n                  loginBtnIcon: \"fa fa-sign-in\",\r\n                  loginBtnLabel: \"Log In\",\r\n                  showLookUpAccountDialog: false,\r\n                  showSecurityQuestionDialog: false,\r\n                  showResetPaswordDialog: false,\r\n                  githubIcon: \"fa fa-github\",\r\n                  githubLabel: \"Sign in with GitHub\",\r\n                  loginMsg: \"\",\r\n                  newAccountCreated: false\r\n                  };\r\n} \r\n    \r\n//Focus cursor in email input field when mounted\r\ncomponentDidMount() {\r\n    this.emailInputRef.current.focus();\r\n}  \r\n\r\n//handleLoginSubmit -- Called when user clicks on login button.\r\nhandleLoginSubmit = async (event) => {\r\n    event.preventDefault();\r\n    this.setState({loginBtnIcon: \"fa fa-spin fa-spinner\",\r\n                   loginBtnLabel: \"Logging In...\"});\r\n    const url = \"auth/login?username=\" + this.emailInputRef.current.value +\r\n                \"&password=\" + this.passwordInputRef.current.value;\r\n    const res = await fetch(url, {method: 'POST'}); \r\n    if (res.status == 200) { //successful login!\r\n        window.open(\"/\",\"_self\");\r\n    } else { //Unsuccessful login\r\n      const resText = await res.text();\r\n      this.setState({loginBtnIcon: \"fa fa-sign-in\",\r\n                     loginBtnLabel: \"Log In\",\r\n                     statusMsg: resText});\r\n    }\r\n}\r\n\r\n  //accountCreateDone -- Called by child CreateAccountDialog component when \r\n  //user attempted to create new account. Hide the dialog and display \r\n  //a message indicating result of the attempt.\r\n  accountCreateDone = (msg) => {\r\n      this.setState({statusMsg: msg,\r\n                     showCreateAccountDialog: false});\r\n  }\r\n\r\n  //cancelCreateAccount -- Called by child CreateAccountDialog componenet when user decides\r\n  //to cancel creation of new account by clicking the \"X\" in top-right of dialog.\r\n  cancelCreateAccount = () => {\r\n      this.setState({showCreateAccountDialog: false});\r\n  }\r\n\r\n//cancelResetPassword -- Called by one of the child three child dialog box components when\r\n//the user decides to cancel resetting their password. Toggles state so that all three\r\n//of the dialog boxes are hidden\r\ncancelResetPassword = () => {\r\n    this.resetUserId = \"\";\r\n    this.resetQ = \"\";\r\n    this.resetA = \"\";\r\n    this.setState({showLookUpAccountDialog: false,\r\n                   showSecurityQuestionDialog: false,\r\n                   showResetPaswordDialog: false});             \r\n}\r\n\r\n//handleOAuthLogin -- Callback function that initiates contact with OAuth\r\n//provider\r\nhandleOAuthLogin = (provider) => {\r\n    window.open(`/auth/${provider}`,\"_self\");\r\n}\r\n\r\n//handleOAuthLoginClick -- Called whent the user clicks on button to\r\n//authenticate via a third-party OAuth service. The name of the provider is\r\n//passed in as a parameter.\r\nhandleOAuthLoginClick = (provider) => {\r\n   this.setState({[provider + \"Icon\"] : \"fa fa-spin fa-spinner\",\r\n                  [provider + \"Label\"] : \"Connecting...\"});\r\n   setTimeout(() => this.handleOAuthLogin(provider),1000);\r\n}\r\n\r\n//getSecurityAnswer: Given the id, security question, and security answer obtained\r\n//from the LookUpAccountDialog component, update state such that the user will\r\n//next be prompted to enter security question and answer for verification\r\ngetSecurityAnswer = (userId, question, answer) => {\r\n    this.resetUserId = userId;\r\n    this.resetQ = question;\r\n    this.resetA = answer;\r\n    this.setState({showLookUpAccountDialog: false,\r\n                   showSecurityQuestionDialog: true\r\n                });\r\n}\r\n\r\n//getNewPassword-- Called after user successfully provides correct answer\r\n//to security question. Presents the \"Reset Password\" dialog box.\r\ngetNewPassword = () => {\r\n    this.setState({showSecurityQuestionDialog: false,\r\n                    showResetPaswordDialog: true});\r\n}\r\n\r\n//resetPassword--Called after the user successfully enters a new (acceptable)\r\n//password. pw contains the new password. Call on the Update (PUT) server\r\n//route to update the user's password in the database.\r\nresetPassword = async(pw) => {\r\n    const url = \"/users/\" + this.resetUserId;\r\n    const res = await fetch(url, {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n            },\r\n        method: 'PUT',\r\n        body: JSON.stringify({password: pw})}); \r\n    if (res.status == 200) { //successful update creation!\r\n        this.setState({showResetPaswordDialog: false,\r\n                       statusMsg: \"Password successfully reset!\"});\r\n    } else { //Unsuccessful account creation\r\n        //Grab textual error message\r\n        const resText = await res.text();\r\n        this.setState({showResetPasswordDialog: false,\r\n                      statusMsg: resText});\r\n    }\r\n    \r\n}\r\n\r\n//newAccountCreated -- Called after successful creation of a new account\r\naccountCreateDone = (msg,deleted) => {\r\n    this.setState({statusMsg: msg,\r\n                   showCreateAccountDialog: false});\r\n}\r\n\r\n//closeStatusMsg -- Called when user clicks on \"x\" to dismiss status message\r\ncloseStatusMsg = () => {\r\n    this.setState({statusMsg: \"\"});\r\n}\r\n\r\n//cancelCreateAccount -- called to hide Create Account dialog without creating acct\r\ncancelCreateAccount = () => {\r\n    this.setState({showCreateAccountDialog: false});\r\n}\r\n\r\n  render() {\r\n    return(\r\n        <div id={\"LoginMode\"}>\r\n        <center>\r\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.statusMsg}</span>\r\n                       <button className=\"modal-close\" onClick={this.closeStatusMsg}>\r\n                          <span className=\"fa fa-times\"></span>\r\n                        </button></div>: null}\r\n            {this.state.showLookUpAccountDialog ? \r\n              <LookUpAccountDialog cancelResetPassword={this.cancelResetPassword}\r\n                                   getSecurityAnswer={this.getSecurityAnswer}/> : null}\r\n            {this.state.showSecurityQuestionDialog ? \r\n               <SecurityQuestionDialog cancelResetPassword={this.cancelResetPassword}\r\n                                       question={this.resetQ}\r\n                                       answer={this.resetA}\r\n                                       getNewPassword={this.getNewPassword}/> : null}\r\n            {this.state.showResetPaswordDialog ? \r\n              <ResetPasswordDialog cancelResetPassword={this.cancelResetPassword}\r\n                                   resetPassword={this.resetPassword} /> : null}\r\n            <form id=\"loginInterface\" onSubmit={this.handleLoginSubmit}>\r\n            <label htmlFor=\"emailInput\" style={{ padding: 0, fontSize: 24 }}>\r\n                Email:\r\n                <input\r\n                ref={this.emailInputRef}\r\n                className=\"form-control login-text\"\r\n                type=\"email\"\r\n                placeholder=\"Enter Email Address\"\r\n                id=\"emailInput\"\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                required={true}\r\n                />\r\n            </label>\r\n            <p />\r\n            <label htmlFor=\"passwordInput\" style={{ padding: 0, fontSize: 24 }}>\r\n                Password:\r\n                <input\r\n                ref={this.passwordInputRef}\r\n                id=\"passwordInput\"\r\n                className=\"form-control login-text\"\r\n                type=\"password\"\r\n                placeholder=\"Enter Password\"\r\n                pattern=\"[A-Za-z0-9!@#$%^&*()_+\\-]+\"\r\n                required={true}\r\n                />\r\n            </label>\r\n            <p className=\"bg-danger\" id=\"feedback\" style={{ fontSize: 16 }} />\r\n            <button\r\n                id=\"loginButton\"\r\n                type=\"submit\"\r\n                className=\"btn-color-theme btn btn-primary btn-block login-btn\">\r\n                <span id=\"login-btn-icon\" className={this.state.loginBtnIcon}/>\r\n                &nbsp;{this.state.loginBtnLabel}\r\n            </button>\r\n            <p>\r\n            <button type=\"button\" className=\"btn btn-link login-link\" \r\n                    onClick={() => {this.setState({showCreateAccountDialog: true});}}>\r\n                Create an account</button> | \r\n                <button id=\"ResetPassword\" type=\"button\" id=\"ResetPassword\" className=\"btn btn-link login-link\"\r\n                        onClick={() => {this.setState({showLookUpAccountDialog: true});}}>\r\n                Reset your password</button>\r\n            </p>  \r\n            {/* <button type=\"button\" className=\"btn btn-github\"\r\n               onClick={() => this.handleOAuthLoginClick(\"github\")}>\r\n              <span className={this.state.githubIcon}></span>&nbsp;\r\n                {this.state.githubLabel}\r\n            </button> */}\r\n            <p>\r\n                <i>Version CptS 489</i>\r\n            </p>\r\n            </form>\r\n            {this.state.showCreateAccountDialog ? \r\n              <CreateEditAccountDialog\r\n                create={true} \r\n                done={this.accountCreateDone}\r\n                cancel={this.cancelCreateAccount} /> : null}\r\n            {this.state.showResetPasswordDialog ? <ResetPasswordDialog /> : null}\r\n        </center>\r\n        </div>\r\n        )\r\n    }\r\n} \r\n\r\nexport default LoginPage;\r\n","O:\\Desktop\\bp-kliks\\client\\src\\components\\Rounds.js",["557","558","559","560","561"],"//Rounds -- A parent component for the app's \"rounds\" mode.\r\n//Manages the rounds data for the current user and conditionally renders the\r\n//appropriate rounds mode page based on App's mode, which is passed in as a prop.\r\n\r\nimport React from 'react';\r\nimport AppMode from './../AppMode.js';\r\nimport RoundsTable from './RoundsTable.js';\r\nimport RoundForm from './RoundForm.js';\r\nimport FloatingButton from './FloatingButton.js';\r\n\r\nclass Rounds extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor() {\r\n        super();\r\n        this.deleteId = \"\";\r\n        this.editId = \"\";\r\n        this.state = {errorMsg: \"\"};           \r\n    }\r\n\r\n    //addRound -- Given an object newData containing a new round, use the \r\n    //server POST route to add the new round to the database. If the add is\r\n    //successful, call on the refreshOnUpdate() method to force the parent\r\n    //App component to refresh its state from the database and re-render itself,\r\n    //allowing the change to be propagated to the Rounds table. Then switch\r\n    //the mode back to AppMode.ROUNDS since the user is done adding a round.\r\n    addRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'POST',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.setState({errorMsg: \"\"});\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n    //editRound -- Given an object newData containing updated data on an\r\n    //existing round, update the current user's round in the database. \r\n    //toggle the mode back to AppMode.ROUNDS since the user is done editing the\r\n    //round. \r\n    editRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.editId]._id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'PUT',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n\r\n    //deleteRound -- Delete the current user's round uniquely identified by\r\n    //this.state.deleteId, delete from the database, and reset deleteId to empty.\r\n    deleteRound = async () => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.deleteId]._id;\r\n        const res = await fetch(url, {method: 'DELETE'}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: \"An error occurred when attempting to delete round from database: \" \r\n            + msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }  \r\n    }\r\n \r\n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\r\n    //the user is considering deleting.\r\n    setDeleteId = (val) => {\r\n        this.deleteId = val;\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n\r\n    //setEditId -- Capture in this.state.editId the unique id of the item\r\n    //the user is considering editing.\r\n    setEditId = (val) => {\r\n        this.editId = val;\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n\r\n    closeErrorMsg = () => {\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n    \r\n    //render -- Conditionally render the Rounds mode page as either the rounds\r\n    //table, the rounds form set to obtain a new round, or the rounds form set\r\n    //to edit an existing round.\r\n    render() {\r\n        switch(this.props.mode) {\r\n            case AppMode.ROUNDS:\r\n                return (\r\n                    <>\r\n                    {this.state.errorMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.errorMsg}</span>\r\n                       <button className=\"modal-close\" onClick={this.closeErrorMsg}>\r\n                          <span className=\"fa fa-times\"></span>\r\n                        </button></div>: null}\r\n                    <RoundsTable \r\n                        rounds={this.props.userObj.rounds}\r\n                        setEditId={this.setEditId}\r\n                        setDeleteId={this.setDeleteId}\r\n                        deleteRound={this.deleteRound}\r\n                        changeMode={this.props.changeMode}\r\n                        menuOpen={this.props.menuOpen} /> \r\n                    <FloatingButton\r\n                        handleClick={() => \r\n                        this.props.changeMode(AppMode.ROUNDS_LOGROUND)}\r\n                        menuOpen={this.props.menuOpen}\r\n                        icon={\"fa fa-plus\"} />\r\n                    </>\r\n                );\r\n            case AppMode.ROUNDS_LOGROUND:\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={\"\"} \r\n                        saveRound={this.addRound} />\r\n                );\r\n            case AppMode.ROUNDS_EDITROUND:\r\n                let thisRound = {...this.props.userObj.rounds[this.editId]};\r\n                thisRound.date = thisRound.date.substr(0,10);\r\n                if (thisRound.seconds < 10) {\r\n                    thisRound.seconds = \"0\" + thisRound.seconds;\r\n                } \r\n                delete thisRound.SGS;\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={thisRound} \r\n                        saveRound={this.editRound} />\r\n                );\r\n        }\r\n    }\r\n\r\n}   \r\n\r\nexport default Rounds;\r\n","O:\\Desktop\\bp-kliks\\client\\src\\components\\AboutBox.js",["562","563","564","565"],"import React from 'react';\r\n\r\nclass AboutBox extends React.Component {\r\n\r\nrender() {\r\n    return (\r\n        <div className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-dialog modal-lg\">\r\n            <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n                <h3>About SpeedScore</h3>\r\n                <button className=\"modal-close\" onClick={this.props.close}>\r\n                    &times;\r\n                </button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n                <img\r\n                src=\"https://dl.dropboxusercontent.com/s/awuwr1vpuw1lkyl/SpeedScore4SplashLogo.png\"\r\n                height=\"200\" width=\"200\"/>\r\n                <h3>The World's First and Only Suite of Apps for\r\n                Speedgolf</h3>\r\n                <p>Version CptS 489 Fa20 Complete (MERN)<br/>\r\n                &copy; 2017-20 The Professor of Speedgolf. All rights\r\n                reserved.\r\n                </p>\r\n                <div style={{textAlign: \"left\"}}>\r\n                <p>SpeedScore apps support</p>\r\n                <ul>\r\n                <li>live touranment scoring (<i>SpeedScore Live&reg;</i>)</li>\r\n                <li>tracking personal speedgolf rounds and sharing results\r\n                (<i>SpeedScore Track&reg;</i>)</li>\r\n                <li>finding speedgolf-friendly courses, booking tee times, and\r\n                paying to play speedgolf by the minute (<i>SpeedScore\r\n                Play&reg;</i>)</li>\r\n                </ul>\r\n                <p>SpeedScore was first developed by Dr. Chris Hundhausen,\r\n                associate professor of computer science at Washington State\r\n                University and the <i>Professor of Speedgolf</i>, with support\r\n                from Scott Dawley, CEO of Speedgolf USA, LLC.</p>\r\n                <p>For more information on SpeedScore, visit <a\r\n                href=\"http://speedscore.live\" target=\"_blank\">SpeedScore's web\r\n                site</a>. For more information on speedgolf, visit <a\r\n                href=\"http://playspeedgolf.com\"\r\n                target=\"_blank\">playspeedgolf.com</a> and <a\r\n                href=\"http://usaspeedgolf.com\" target=\"_blank\">Speedgolf\r\n                USA</a>.</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                <button className=\"btn btn-primary btn-color-theme\"\r\n                onClick={this.props.close}>OK</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default AboutBox;","O:\\Desktop\\bp-kliks\\client\\src\\components\\CourseManagement\\CoursesPage.js",["566","567","568","569","570","571","572","573","574","575","576"],"// Main manage courses page\r\n// From here a student can view courses they are in and see the students that are in their courses\r\n// An intructor is able to add courses, delete courses, add students, upload a roster of students\r\n// and add an individual student\r\n\r\nimport React from 'react';\r\nimport AppMode from '../../AppMode';\r\nimport StudentsTable from './StudentsTable.js';\r\nimport CoursesTable from './CoursesTable';\r\nimport FloatingButton from './../FloatingButton.js';\r\nimport UploadStudents from './UploadStudents.js';\r\nimport AddCourse from './AddCourse.js';\r\nimport AddStudent from './AddStudent';\r\n\r\nclass CoursesPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            courseId: \"\",\r\n            courseName: \"\",\r\n            students: [],\r\n        };\r\n    }\r\n\r\n    // changes the courses page mode to display different componeents based on state\r\n    handleChangeMode = (newMode) => {\r\n        this.setState({mode: newMode});\r\n\r\n        // if state changed to courses, possibly reset the forms to remove old text\r\n    }\r\n\r\n    // fetches the students for the selected course\r\n    handleChangeCourse = async (courseId, courseName) => {\r\n        this.setState({\r\n            courseId: courseId,\r\n            courseName: courseName,\r\n        });\r\n\r\n        // Get the courses students\r\n        let url = \"/students/\" + courseId;\r\n        let res = await fetch(url, {method: 'GET'});\r\n        if (res.status != 200) {\r\n            let msg = await res.text();\r\n            console.log(\"There was an error obtaining students in this course: \" + msg);\r\n            return;\r\n        } \r\n        let body = await res.json();\r\n        body = JSON.parse(body);\r\n        console.log(\"in componentDidMount with GET results: \" + body);\r\n        this.setState({students: body});\r\n    }\r\n\r\n    // handle click on the add course button\r\n    handleAddCourse = async () => {\r\n        this.props.changeMode(AppMode.COURSES_CREATE);\r\n    }\r\n\r\n    // handle click on the add students button\r\n    handleAddStudent = () => {\r\n        \r\n        this.props.changeMode(AppMode.STUDENTS_CREATE);\r\n    }\r\n\r\n    // handle click on upload students button\r\n    handleUploadStudents = () => {\r\n        //this.handleChangeMode(AppMode.STUDENTS_UPLOAD);\r\n        this.props.changeMode(AppMode.STUDENTS_UPLOAD);\r\n    }\r\n\r\n    // upload the list of students extracted from csv file\r\n    uploadStudents = async (students) => {\r\n\r\n        // make a post request for each student\r\n        for(const student of students) {\r\n            var newData = {\r\n                \"userID\" : student[0],\r\n                \"studentDisplayName\": student[1],\r\n                };\r\n            \r\n            const url = '/students/' + this.state.courseId;\r\n            const res = await fetch(url, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                    },\r\n                method: 'POST',\r\n                body: JSON.stringify(newData)}); \r\n            const msg = await res.text();\r\n            if (res.status != 200) {\r\n                console.log(\"Successfully added students\");\r\n            } else {\r\n                console.log(\"Error adding students\");\r\n            }\r\n        }\r\n\r\n        // refetch the students list\r\n        this.handleChangeCourse(this.state.courseId, this.state.courseName);\r\n    }\r\n\r\n    // handle adding a student to the currently selected course\r\n    addStudent = async (newStudent) => {\r\n\r\n        let url = '/students/' + this.state.courseId;\r\n        let res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'POST',\r\n            body: JSON.stringify(newStudent)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            console.log(\"Successfully added student\");\r\n        } else {\r\n            console.log(\"Error adding student\");\r\n        }\r\n\r\n        // refetch the students list\r\n        this.handleChangeCourse(this.state.courseId, this.state.courseName);\r\n\r\n        // fetch the course in question so it can be added to the student's account\r\n        url = \"/courses/\" + this.props.userObj.id;\r\n        res = await fetch(url, {method: 'GET'});\r\n        if (res.status != 200) {\r\n            let msg = await res.text();\r\n            console.log(\"There was an error obtaining students for instructor \" + msg);\r\n            return;\r\n        } \r\n        let body = await res.json();\r\n        body = JSON.parse(body);\r\n\r\n        body = body.filter(function (response) {\r\n            return response.courseID === this.state.courseId;\r\n        }.bind(this));\r\n        body = body[0];\r\n\r\n        // add course to atudent's account\r\n        this.addCourse(body, newStudent.userID);\r\n    }\r\n\r\n    editStudent = async (studentInfo, originalId) => {\r\n\r\n        // update course using route\r\n        const url = '/students/' + this.state.courseId + '/' + originalId;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'PUT',\r\n            body: JSON.stringify(studentInfo)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            console.log(\"Student successfully updated\");\r\n        } else {\r\n            console.log(\"Error occurred while updating student\");\r\n        }\r\n        // refetch the students list\r\n        this.handleChangeCourse(this.state.courseId, this.state.courseName);\r\n    }\r\n\r\n    deleteStudent = async (studentId) => {\r\n\r\n       // delete using route\r\n       const url = '/students/' + this.state.courseId + '/' + studentId;\r\n       const res = await fetch(url, \r\n                    {method: 'DELETE'}); \r\n        if (res.status == 200) {\r\n            console.log(\"Successfully deleted student\")\r\n        } else {\r\n            const resText = await res.text();\r\n            console.log(\"Student deletion failed with error: \" + resText);\r\n        }\r\n\r\n        // refetch the students list\r\n        this.handleChangeCourse(this.state.courseId, this.state.courseName);\r\n    }\r\n\r\n    addCourse = async (courseData, userId = this.props.userObj.id) => {\r\n\r\n        const url = '/courses/' + userId;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'POST',\r\n            body: JSON.stringify(courseData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            console.log(\"Successfully added course\");\r\n        } else {\r\n            console.log(\"Error adding course\");\r\n        }\r\n\r\n        this.props.updateUser();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"padded-page\">\r\n                <center>\r\n                <h1>{this.props.mode === AppMode.COURSES || this.props.mode === AppMode.COURSES_DELETE || this.props.mode === AppMode.COURSES_EDIT || this.props.mode === AppMode.COURSES_CREATE ? \"Courses\" : \"Students in \" + this.state.courseName}</h1>\r\n\r\n                {this.props.mode === AppMode.COURSES || this.props.mode === AppMode.COURSES_DELETE || this.props.mode === AppMode.COURSES_EDIT || this.props.mode === AppMode.COURSES_CREATE ?\r\n                    <CoursesTable \r\n                    courses={this.props.userObj.courses}\r\n                    userType={this.props.userObj.userType}\r\n                    menuOpen={this.props.menuOpen}\r\n                    changeMode={this.props.changeMode}\r\n                    mode={this.props.mode}\r\n                    userId={this.props.userObj.id}\r\n                    changeCourse={this.handleChangeCourse}\r\n                    updateUser={this.props.updateUser}/> :\r\n                    <StudentsTable \r\n                    students={this.state.students}\r\n                    userType={this.props.userObj.userType}\r\n                    menuOpen={this.props.menuOpen}\r\n                    changeMode={this.props.changeMode}\r\n                    courseId={this.state.courseId}\r\n                    mode={this.props.mode}\r\n                    editStudent={this.editStudent}\r\n                    deleteStudent={this.deleteStudent}/>\r\n                }\r\n                </center>\r\n\r\n                {this.props.userObj.userType === \"Instructor\" &&  (this.props.mode === AppMode.STUDENTS || this.props.mode === AppMode.STUDENTS_CREATE) ?\r\n                <div className=\"floatingbtn-container\">\r\n                <FloatingButton\r\n                id={\"AddStudentBtn\"}\r\n                handleClick={this.handleAddStudent}/>\r\n                <FloatingButton\r\n                id=\"UploadStudentsBtn\"\r\n                handleClick={this.handleUploadStudents}\r\n                upload={true}/>\r\n                </div> : null}\r\n\r\n                {this.props.userObj.userType === \"Instructor\" && this.props.mode === AppMode.COURSES ?\r\n                <FloatingButton\r\n                id=\"AddCourseBtn\"\r\n                handleClick={this.handleAddCourse}/>\r\n                : null}\r\n\r\n                {this.props.mode === AppMode.STUDENTS_UPLOAD ? \r\n                <UploadStudents\r\n                uploadStudents={this.uploadStudents}\r\n                changeMode={this.props.changeMode} /> : null}\r\n\r\n                {this.props.mode === AppMode.COURSES_CREATE ?\r\n                <AddCourse\r\n                changeMode={this.props.changeMode}\r\n                addCourse={this.addCourse}\r\n                instructorId={this.props.userObj.id} />\r\n                : null}\r\n\r\n                {this.props.mode === AppMode.STUDENTS_CREATE ?\r\n                <AddStudent\r\n                changeMode={this.props.changeMode}\r\n                addStudent={this.addStudent}\r\n                courseName={this.state.courseName} />\r\n                : null}\r\n\r\n            </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default CoursesPage;","O:\\Desktop\\bp-kliks\\client\\src\\components\\ConfirmDeleteAccount.js",["577"],"import React from 'react';\r\n\r\nclass ConfirmDeleteAccount extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.emailRef = React.createRef();\r\n        this.state = {emailMatches: false};\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.emailRef.current.focus();\r\n    }\r\n\r\n    handleChange = () => {\r\n        const match = (this.emailRef.current.value === this.props.email);\r\n        if (match != this.state.emailMatches) {\r\n            this.setState({emailMatches: match});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <center>\r\n                <h3 className=\"modal-title\"><b>Confirm Account Deletion</b></h3>\r\n              </center>\r\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\r\n                 &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p>Do you really want to delete your account? <br />\r\n                 <i>This action cannot be undone.</i></p>\r\n              <label>\r\n                Confirm Email ({this.props.email}):\r\n                <br/>\r\n                <input \r\n                    className=\"form-center\"\r\n                    type=\"text\"\r\n                    ref={this.emailRef}\r\n                    onChange={this.handleChange} />\r\n                </label>\r\n                <br />\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteAccount} disabled={!this.state.emailMatches}>\r\n                  Yes, Delete My Account</button>\r\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\r\n                  No, Cancel</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmDeleteAccount;","O:\\Desktop\\bp-kliks\\client\\src\\components\\ResetPasswordDialog.js",["578","579"],"import React from 'react'\r\n\r\nclass ResetPasswordDialog extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.resetPasswordRef = React.createRef();\r\n        this.resetPasswordRepeatRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //handleSubmit -- When the user submits the form, ensure that the passwords match.\r\n    //If so, call on resetPassword in parent component to actually reset the password.\r\n    //Otherwise, display an error message prompting the user to try again.\r\n    handleSubmit= (event) => {\r\n        event.preventDefault();\r\n        if (this.resetPasswordRef.current.value === this.resetPasswordRepeatRef.current.value) {\r\n            this.props.resetPassword(this.resetPasswordRef.current.value);\r\n        } else {\r\n            this.resetPasswordRepeatRef.current.focus();\r\n            this.setState({errorMsg: \"The passwords you entered do not match. Please try again.\"});\r\n        }\r\n    }\r\n\r\n    checkForSubmit = (e) => {\r\n        if (e.code === \"Enter\") {\r\n            e.preventDefault();\r\n            this.handleSubmit();\r\n        }\r\n    }\r\n\r\n    // modified the modal-title inside the header so that the text can be centered in the modal\r\n    // this required using col-12 and text-center since messing with the CSS was not working\r\n    // I also included new paragraph tags between the labels and buttons to create a cleaner layout\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"col-12 modal-title text-center\"><b>Reset Password</b>\r\n                    </h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={this.props.cancelResetPassword}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \r\n                    <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        New Password: \r\n                        <input\r\n                        type=\"password\"\r\n                        id=\"NewPassword\"\r\n                        placeholder=\"Enter new password\"\r\n                pattern=\"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                        className=\"form-control form-text\"\r\n                        ref={this.resetPasswordRef}\r\n                        />\r\n                    </label>\r\n                    <p></p>\r\n                    <label>\r\n                        Repeat New Password: \r\n                        <input\r\n                        type=\"password\"\r\n                        id=\"RepeatPassword\"\r\n                        placeholder=\"Repeat new password\"\r\n                        className=\"form-control form-text\"\r\n                        onKeyUp={this.checkForSubmit}\r\n                        ref={this.resetPasswordRepeatRef}\r\n                        />\r\n                    </label>\r\n                    <p></p>\r\n                    <button role=\"submit\" id=\"PasswordButton\"\r\n                     className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-key\"></span>&nbsp;Reset Password\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          );\r\n        \r\n    }\r\n}\r\n\r\nexport default ResetPasswordDialog;","O:\\Desktop\\bp-kliks\\client\\src\\components\\SecurityQuestionDialog.js",["580","581"],"import React from 'react';\r\n\r\nclass SecurityQuestionDialog extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.securityAnswerRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //Focus cursor in email secrity answer field when mounted\r\n    componentDidMount() {\r\n        this.securityAnswerRef.current.focus();\r\n    }  \r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (this.securityAnswerRef.current.value === this.props.answer) {\r\n            this.props.getNewPassword();\r\n        } else {\r\n            this.securityAnswerRef.current.focus();\r\n            this.setState({errorMsg: \"Sorry, that is not the correct answer to the security question. Try again.\"});\r\n        }\r\n    }\r\n\r\n    // modified the modal-title inside the header so that the text can be centered in the modal\r\n    // this required using col-12 and text-center since messing with the CSS was not working\r\n    // I also included new paragraph tags between the labels and buttons to create a cleaner layout\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"col-12 modal-title text-center\"><b>Answer Security Question</b>\r\n                    </h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={this.props.cancelResetPassword}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \r\n                    <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Security Question: \r\n                        <textarea\r\n                        readOnly={true}\r\n                        value={this.props.question}\r\n                        className=\"form-control form-text\"\r\n                        rows=\"3\"\r\n                        cols=\"35\"\r\n                        />\r\n                    </label>\r\n                    <p></p>\r\n                    <label>\r\n                        Security Answer: \r\n                        <textarea\r\n                        className=\"form-control form-text\"\r\n                        id=\"SecurityAnswer\"\r\n                        placeholder=\"Enter Security Question Answer\"\r\n                        ref={this.securityAnswerRef}\r\n                        rows=\"3\"\r\n                        cols=\"35\"\r\n                        />\r\n                    </label>\r\n                    <p></p>\r\n                    <button role=\"submit\" id=\"SecurityButton\"\r\n                      className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-check\"></span>&nbsp;Verify Answer\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          );        \r\n    }\r\n}\r\n export default SecurityQuestionDialog;","O:\\Desktop\\bp-kliks\\client\\src\\components\\FloatingButton.js",[],"O:\\Desktop\\bp-kliks\\client\\src\\components\\RoundsTable.js",["582"],"import React from 'react';\r\nimport ConfirmDeleteRound from './ConfirmDeleteRound.js';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass RoundsTable extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {showConfirmDelete: false};\r\n  }\r\n\r\n  //editRound -- Triggered when the user clicks the edit button for a given\r\n  //round. The id param is the unique property that identifies the round.\r\n  //Set the state variable representing the id of the round to be edited and\r\n  //then switch to the ROUNDS_EDITROUND mode to allow the user to edit the\r\n  //chosen round.\r\n  editRound = (id) => {\r\n    this.props.setEditId(id);\r\n    this.props.changeMode(AppMode.ROUNDS_EDITROUND);\r\n  }\r\n\r\n  //deleteRound -- Triggered when the user clicks on the \"Yes, Delete\"\r\n  //button in the Confirm Delete dialog box. It executes the deletion and\r\n  //closes the dialog box.\r\n  deleteRound = () => {\r\n    this.props.deleteRound();\r\n    this.setState({showConfirmDelete: false});\r\n  }\r\n\r\n\r\n  //confirmDelete -- Triggered when the user clicks the delete button\r\n  //for a given round. The id paam is the unique property that \r\n  //identifies the round. Set the state variable representing the id\r\n  //of the round to be deleted and then present a dialog box asking\r\n  //the user to confirm the deletion.\r\n  confirmDelete = (id) => {\r\n    this.props.setDeleteId(id);\r\n    this.setState({showConfirmDelete: true});\r\n  }\r\n\r\n\r\n  //renderTable -- render an HTML table displaying the rounds logged\r\n  //by the current user and providing buttons to view/edit and delete each round.\r\n  renderTable = () => {\r\n  let table = [];\r\n  for (let r = 0; r < this.props.rounds.length; ++r) {\r\n    table.push(\r\n      <tr key={r}>\r\n        <td>{this.props.rounds[r].date.substring(0,10)}</td>\r\n        <td>{this.props.rounds[r].course}</td>\r\n        <td>{(Number(this.props.rounds[r].strokes) + \r\n              Number(this.props.rounds[r].minutes)) +\r\n              \":\" + (this.props.rounds[r].seconds < 10 ?  \r\n                \"0\" + this.props.rounds[r].seconds :\r\n                this.props.rounds[r].seconds) + \" (\" + \r\n              this.props.rounds[r].strokes + \r\n              \" in \" + this.props.rounds[r].minutes + \":\" + \r\n              (this.props.rounds[r].seconds < 10 ?  \r\n                \"0\" + this.props.rounds[r].seconds :\r\n                this.props.rounds[r].seconds) + \")\"}\r\n        </td>\r\n        <td><button onClick={this.props.menuOpen ? null : () => \r\n          this.editRound(r)}>\r\n              <span className=\"fa fa-eye\"></span></button></td>\r\n        <td><button onClick={this.props.menuOpen ? null : \r\n          () => this.confirmDelete(r)}>\r\n              <span className=\"fa fa-trash\"></span></button></td>\r\n      </tr> \r\n    );\r\n  }\r\n  return table;\r\n  }\r\n\r\n  //render--render the entire rounds table with header, displaying a \"No\r\n  //Rounds Logged\" message in case the table is empty.\r\n  render() {\r\n    return(\r\n    <div className=\"padded-page\">\r\n      <h1></h1>\r\n      <table className=\"table table-hover\">\r\n        <thead className=\"thead-light\">\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>Course</th>\r\n          <th>Score</th>\r\n          <th>View/Edit...</th>\r\n          <th>Delete</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n          {Object.keys(this.props.rounds).length === 0 ? \r\n          <tr>\r\n          <td colSpan=\"5\" style={{fontStyle: \"italic\"}}>No rounds logged</td>\r\n          </tr> : this.renderTable()\r\n          }\r\n        </tbody>\r\n      </table>\r\n      {this.state.showConfirmDelete ?\r\n        <ConfirmDeleteRound \r\n          close={() => this.setState({showConfirmDelete: false})} \r\n          deleteRound={this.deleteRound} /> : null}\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RoundsTable;\r\n","O:\\Desktop\\bp-kliks\\client\\src\\components\\LookUpAccountDialog.js",["583","584","585","586"],"import React from 'react';\r\nimport AppMode from '../AppMode.js';\r\n\r\nclass LookUpAccountDialog extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.emailRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //handleLookUpAccount: When the user clicks on the \"Look Up Account\" dialog box\r\n    //button, we check whether the account exists. If it does, we update the state,\r\n    //setting the resetEmail var to the email entered, hiding the current dialog box\r\n    //and showing the security question dialog box.\r\n    handleLookUpAccount = async(event) => {\r\n        event.preventDefault();\r\n        let response = await fetch(\"/users/\" + this.emailRef.current.value);\r\n        if (response.status == 200) {\r\n            const json = await response.json();\r\n            const obj = JSON.parse(json);\r\n            if (obj.authStrategy === \"local\") {\r\n                this.props.getSecurityAnswer(obj.id,obj.securityQuestion, obj.securityAnswer);\r\n            } else { //Account exists but was created through OAuth so password can't be reset \r\n                this.setState({errorMsg: \"That account is authenticated through \" + obj.authStrategy + \". \" +\r\n                               \"Please log in to \" + obj.authStrategy + \" to reset the password.\"});\r\n            }\r\n        } else {\r\n            this.setState({errorMsg: \"Sorry, there is no account associated with '\" + this.emailRef.current.value + \"'.\"});\r\n        }\r\n    }\r\n\r\n    // modified the modal-title inside the header so that the text can be centered in the modal\r\n    // this required using col-12 and text-center since messing with the CSS was not working\r\n    // I also included new paragraph tags between the labels and buttons to create a cleaner layout\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"col-12 modal-title text-center\"><b>Look Up Account</b></h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={() => {this.props.cancelResetPassword()}}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null}\r\n                    <form onSubmit={this.handleLookUpAccount}>\r\n                    <label>\r\n                        Account Email Address: \r\n                        <input\r\n                        ref={this.emailRef}\r\n                        className=\"form-control form-text\"\r\n                        id=\"AccountEmail\"\r\n                        type=\"email\"\r\n                        size=\"35\"\r\n                        placeholder=\"Enter Email Address\"\r\n                        pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                        ref={this.emailRef}\r\n                        required={true}\r\n                        />\r\n                    </label>\r\n                    <p></p>\r\n                    <button type=\"submit\" id=\"AccountButton\"\r\n                        className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-search\"></span>&nbsp;Look Up Account\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>  \r\n        );   \r\n    }\r\n\r\n}\r\n\r\nexport default LookUpAccountDialog;\r\n","O:\\Desktop\\bp-kliks\\client\\src\\components\\RoundForm.js",[],"O:\\Desktop\\bp-kliks\\client\\src\\components\\SurveyManagement\\CreateSurvey.js",["587","588","589","590","591"],"// CreateSurvey: Allows an instructor to create a survey and save it the database.\r\n\r\nimport React from 'react';\r\nimport FileUpload from './AnswerTypes/FileUpload';\r\nimport FreeResponse from './AnswerTypes/FreeResponse';\r\nimport MultipleChoice from './AnswerTypes/MultipleChoice';\r\nimport CreateQuestion from './CreateQuestion';\r\nimport AppMode from '../../AppMode';\r\n\r\nconst answerTypes = {};\r\nanswerTypes[\"multipleChoice\"] = MultipleChoice;\r\nanswerTypes[\"shortAnswer\"] = FreeResponse;\r\nanswerTypes[\"fileUpload\"] = FileUpload;\r\n\r\nclass CreateSurvey extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.courseSelectionRef = React.createRef();\r\n        this.surveyTitleRef = React.createRef();\r\n        this.surveyDateRef = React.createRef();\r\n\r\n        //Create date object for today, taking time zone into consideration\r\n        let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\r\n\r\n        this.state = {\r\n            answerType : \"shortAnswer\",\r\n            question: \"\",\r\n            addSurvey: false,\r\n            surveyTitle : \"\",\r\n            date: today.toISOString().substr(0,10),\r\n            dropdownOfCourses : this.props.userObj.courses.length > 0 ? (this.props.userObj.courses[0].courseSemester + \"-\"  + this.props.userObj.courses[0].courseYear +\r\n            \": \" + this.props.userObj.courses[0].courseName + \"  \" + this.props.userObj.courses[0].courseNumber) : \"\",\r\n            courseID: this.props.userObj.courses.length > 0 ? this.props.userObj.courses[0].courseID : \"\" \r\n        }     \r\n    }\r\n\r\n    // Handles any change that has been made\r\n    handleChange = (event) => {\r\n        const name = event.target.name; \r\n        this.setState({[name]: event.target.value}, this.checkDataValidity);\r\n    }\r\n\r\n    // Handles creation of the new Survey\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(this.state.dropdownOfCourses.length == 0){\r\n        }else{\r\n          var newSurvey = {\r\n            surveyTitle : this.state.surveyTitle,\r\n            surveyDate : this.state.date,\r\n            courseID : this.state.courseID\r\n          };\r\n\r\n          // Make a call to the saveSurvey to save the survey to MongoDB\r\n          setTimeout(this.props.saveSurvey, 1000, \"efr423f\" /* Random string, is changed in the route. */, newSurvey);\r\n        }\r\n    }\r\n\r\n    // Gets the courses for the dropdown\r\n    getCourses = () => {\r\n      var courses = [];\r\n\r\n      // Go through all of the courses and create the dropdown option.\r\n      for(var index = 0; index < this.props.userObj.courses.length; index++)\r\n      {\r\n        const id = this.props.userObj.courses[index].courseSemester + \"-\"  + this.props.userObj.courses[index].courseYear +\r\n        \": \" + this.props.userObj.courses[index].courseName + \"  \" + this.props.userObj.courses[index].courseNumber;\r\n        courses.push(<option id={this.props.userObj.courses[index].courseID} value={this.props.userObj.courses[index].courseID}>{id}</option>);\r\n      }\r\n\r\n     return courses;\r\n    }\r\n\r\n    // Handles the change for the dropdown option\r\n    handleDropdownChange = (event) => {\r\n      const name = event.target.name; \r\n      this.setState({[name]: event.target.value,\r\n        courseID : event.target.value\r\n      }, this.checkDataValidity);\r\n    }\r\n\r\n    // Checks that the data elements are filled and with the correct information.\r\n    checkDataValidity = () => {\r\n      if(this.state.surveyTitle.length == 0){\r\n          this.surveyTitleRef.current.setCustomValidity(\"Survey title missing.\");\r\n      }\r\n      else{\r\n          this.surveyTitleRef.current.setCustomValidity(\"\");\r\n      }\r\n\r\n      if(this.state.dropdownOfCourses == \"\"){\r\n          this.courseSelectionRef.current.setCustomValidity(\"Course is missing for the survey.\");\r\n      }\r\n      else{\r\n          this.courseSelectionRef.current.setCustomValidity(\"\");\r\n      }\r\n\r\n      let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\r\n      if(this.state.date < today.toISOString().substr(0,10)){\r\n          this.surveyDateRef.current.setCustomValidity(\"Cannot create a survey for day in the past.\");\r\n      }\r\n      else{\r\n          this.surveyDateRef.current.setCustomValidity(\"\");\r\n      }        \r\n  }    \r\n\r\n    render(){\r\n        return(\r\n            <form className=\"padded-page\" id={\"createSurvey-page\"} onSubmit={this.handleSubmit}>\r\n            <center>\r\n              <label>\r\n                Survey Title:\r\n                <input name=\"surveyTitle\" \r\n                id={\"createSurvey-title\"}\r\n                className=\"form-control form-center\"\r\n                value={this.state.surveyTitle}\r\n                onChange={this.handleChange}\r\n                minLength={1}\r\n                ref={this.surveyTitleRef}\r\n                  type=\"text\"/>\r\n              </label>\r\n              <p></p>\r\n              <label>\r\n                Date:\r\n                <input name=\"date\" \r\n                  id={\"createSurvey-date\"}\r\n                  className=\"form-control form-center\" \r\n                  type=\"date\" value={this.state.date} onChange={this.handleChange} \r\n                  ref={this.surveyDateRef}/>\r\n              </label>\r\n              <p></p>\r\n            <p></p>\r\n            <label>Course:\r\n            <select name=\"dropdownOfCourses\" value={this.state.dropdownOfCourses} \r\n              onChange={this.handleDropdownChange}\r\n              onBlur={this.handleDropdownChange}\r\n              id={this.state.courseID}\r\n              defaultValue={this.state.dropdownOfCourses}\r\n              required={true}\r\n              ref={this.courseSelectionRef}\r\n              className=\"form-control form-center\">\r\n                {this.getCourses()}\r\n            </select> \r\n            </label>\r\n            <p></p>\r\n            <button type=\"submit\" \r\n              id={\"createSurvey-creatBtn\"}\r\n              style={{width: \"50%\",fontSize: \"36px\"}}\r\n              className=\"btn btn-primary btn-color-theme\">\r\n              <span className=\"fa fa-plus\"/>&nbsp; Create survey\r\n            </button>\r\n            </center>\r\n          </form>            \r\n        );\r\n    }\r\n}\r\n\r\nexport default CreateSurvey;","O:\\Desktop\\bp-kliks\\client\\src\\components\\SurveyManagement\\CreateQuestion.js",["592","593","594","595","596"],"// CreateQuestion: Allows an instructor to create a question and save it the database.\r\n\r\nimport React from 'react';\r\nimport FileUpload from './AnswerTypes/FileUpload';\r\nimport FreeResponse from './AnswerTypes/FreeResponse';\r\nimport MultipleChoice from './AnswerTypes/MultipleChoice';\r\nimport AppMode from '../../AppMode';\r\n\r\nconst answerTypes = {};\r\nanswerTypes[\"multipleChoice\"] = MultipleChoice;\r\nanswerTypes[\"shortAnswer\"] = FreeResponse;\r\nanswerTypes[\"fileUpload\"] = FileUpload;\r\n\r\nclass CreateQuestion extends React.Component {\r\n    //  constructor\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\r\n        this.questionTextRef = React.createRef();\r\n        this.questionTitleRef = React.createRef();\r\n        this.surveySelectionRef = React.createRef();\r\n        this.dateRef = React.createRef();\r\n\r\n        // Set the correct content based on whether we are editing or creating a question.\r\n        if (this.props.mode == AppMode.SURVEY_MANAGEMENT_CREATE)\r\n        {\r\n            this.state = {\r\n                dropdownOfSurveys : this.props.surveys.length > 0 ? this.props.surveys[0].surveyID : \"\",\r\n                numberOfSurveys : this.props.surveys.length,\r\n                date: today.toISOString().substr(0,10),\r\n                answerType : \"shortAnswer\",\r\n                question: \"\",\r\n                title : \"\",\r\n                answers : [],\r\n                active : false,\r\n                acceptableAnswerTypes : [],\r\n                surveyID : this.props.surveys.length > 0 ? this.props.surveys[0].surveyID : \"\", \r\n                submitIcon : \"fa fa-save\",\r\n                submitLabel : \"Save Question\"\r\n            }   \r\n        } \r\n        else\r\n        {\r\n            this.state = {\r\n                dropdownOfSurveys : this.props.surveys.length > 0 ? this.props.surveys[0].surveyID : \"\",\r\n                numberOfSurveys : this.props.surveys.length,\r\n                date : this.props.question.question.date,\r\n                answerType : this.props.question.question.questionType,\r\n                question: this.props.question.question.questionText,\r\n                title : this.props.question.question.questionTitle,\r\n                answers : this.props.question.question.questionAnswers,\r\n                active : this.props.question.question.questionActive,                \r\n                surveyID : this.props.surveyID ,\r\n                submitIcon : \"fa fa-edit\",\r\n                submitLabel : \"Update Question\",\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // On change handler for the form elements\r\n    handleChange = (event) => {\r\n        const name = event.target.name; \r\n        this.setState({[name]: event.target.value}, this.checkDataValidity);\r\n    }\r\n\r\n    // Event handler for when the user clicks on Add Survey\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        var newQuestion = {\r\n            questionID: \"32534t\" /* Random string, is changed in the route. */,\r\n            questionTitle: this.state.title,\r\n            questionText: this.state.question,\r\n            questionType: this.state.answerType,\r\n            date : this.state.date,\r\n            questionAnswers:this.state.answers,\r\n            acceptableAnswerTypes: this.state.acceptableAnswerTypes,\r\n            questionActive: this.state.active,\r\n            responses:  []\r\n        }\r\n\r\n        // Make a call to saveQuestion in the parent component to save the question to MongoDB.\r\n        setTimeout(this.props.saveQuestion, 1000, this.state.surveyID, newQuestion);\r\n    }\r\n\r\n    // Handles when the user clicks on add survey [If there are no sureys]\r\n    onAddSurvey = (event) => {\r\n        event.preventDefault();\r\n        this.props.changeMode(AppMode.SURVEY_MANAGEMENT_CREATE_SURVEY)\r\n    }\r\n\r\n    // Sets the acceptable types for the file type [if the answer has to be a file upload]\r\n    setAcceptableAnswerTypes = (newTypes) => {\r\n        this.setState({\r\n            acceptableAnswerTypes: newTypes\r\n        });\r\n    }\r\n\r\n    // Creates the dropdown options [Surveys] \r\n    getSurveys = () => {\r\n        var surveys = [];\r\n  \r\n        // Go through the surveys and create the survey dropdown options \r\n        for(var index = 0; index < this.props.surveys.length; index++)\r\n        {\r\n          surveys.push(<option name={this.props.surveys[index].surveyID} key={this.props.surveys[index].surveyID} id={this.props.surveys[index].surveyID} value={this.props.surveys[index].surveyID}>{this.props.surveys[index].surveyTitle}</option>);\r\n        }\r\n\r\n       return surveys;\r\n    }\r\n\r\n    // sets the value of the answer\r\n    setAnswer = (newAnswer) => {\r\n        this.setState({\r\n            answers : newAnswer\r\n        });\r\n    }\r\n\r\n    // Handles the change event for the switch button\r\n    switchHandler = () => {\r\n        this.setState({\r\n            active : !this.state.active\r\n        });\r\n    }\r\n\r\n    // Handles the changes that occur to the dropdown menu \r\n    handleDropdownChange = (event) => {\r\n        const name = event.target.name; \r\n        // Set the state.\r\n        this.setState({[name]: event.target.value, \r\n          surveyID : event.target.value\r\n        }, this.checkDataValidity);        \r\n    }\r\n\r\n    // data validator for the form elements\r\n    checkDataValidity = () => {\r\n        // Check whether the dropdown of surveys contains anything that is selected.\r\n        if(this.state.dropdownOfSurveys == \"\"){\r\n            this.surveySelectionRef.current.setCustomValidity(\"No Survey selected.\");\r\n        }\r\n        else{\r\n            this.surveySelectionRef.current.setCustomValidity(\"\");\r\n        }\r\n\r\n        // Must have a question\r\n        if(this.state.question.length == 0){\r\n            this.questionTextRef.current.setCustomValidity(\"Question does not have a any text.\");\r\n        }\r\n        else{\r\n            this.questionTextRef.current.setCustomValidity(\"\");\r\n        }\r\n\r\n        // Must have a title\r\n        if(this.state.title.length == 0){\r\n            this.questionTitleRef.current.setCustomValidity(\"Question does not have a title.\");\r\n        }\r\n        else{\r\n            this.questionTitleRef.current.setCustomValidity(\"\");\r\n        }\r\n\r\n        // Make sure that the date that is chosen is not a past date.\r\n        let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\r\n        if(this.state.date < today.toISOString().substr(0,10)){\r\n            this.dateRef.current.setCustomValidity(\"Cannot create a question for the past.\");\r\n        }\r\n        else{\r\n            this.dateRef.current.setCustomValidity(\"\");\r\n        }        \r\n    }\r\n\r\n    render(){\r\n        const AnswerType = answerTypes[this.state.answerType];\r\n        return(\r\n            <form className=\"padded-page\" id={\"createQuestionMode\"} onSubmit={this.handleSubmit}>\r\n                {\r\n                this.props.surveys.length == 0 ?\r\n                <center>\r\n                    <p></p>\r\n                    <p>There are no surveys, please create surveys in order to create questions </p>\r\n                    <p></p>\r\n                    <button type=\"button\" style={{width: \"50%\",fontSize: \"36px\"}} id={\"createQuestion-createSurveyBtn\"} onClick={this.onAddSurvey}\r\n                    className=\"btn btn-primary btn-color-theme\">\r\n                        <span className=\"fa fa-plus\"/>&nbsp; Add a survey\r\n                    </button>\r\n                </center>\r\n                :\r\n                (\r\n                    <center>\r\n                        <label\r\n                        style={{fontSize: \"20px\"}}\r\n                        >\r\n                            Question Title:\r\n                            <input name=\"title\"\r\n                            id={\"createQuestion-title\"}\r\n                            className=\"form-control form-center\" value={this.state.title} onChange={this.handleChange}\r\n                            ref={this.questionTitleRef}\r\n                            minLength={1}\r\n                            type=\"text\"/>\r\n                        </label>\r\n                        <p></p>\r\n                            <label\r\n                                style={{fontSize: \"20px\"}}\r\n                            >Question:\r\n                                <textarea name=\"question\" className=\"form-control\" rows=\"6\" cols=\"75\" \r\n                                placeholder=\"Enter Question here\"\r\n                                id={\"createQuestion-question\"}\r\n                                value={this.state.question}\r\n                                ref={this.questionTextRef}\r\n                                minLength={1}\r\n                                onChange={this.handleChange}\r\n                                />\r\n                            </label>\r\n                        <p></p>\r\n                        <label\r\n                            style={{fontSize: \"20px\"}}\r\n                        >\r\n                            Date:\r\n                            <input name=\"date\" className=\"form-control form-center\" \r\n                            type=\"date\" \r\n                            id={\"createQuestion-date\"}\r\n                            value={this.state.date} onChange={this.handleChange}\r\n                            ref={this.dateRef}\r\n                            />\r\n                        </label>\r\n                        <p></p>                        \r\n                        <label\r\n                            style={{fontSize: \"20px\"}}\r\n                        >Survey:\r\n                        <select name=\"dropdownOfSurveys\"\r\n                            id={\"dropdownOfSurveys\"}\r\n                            value={this.state.dropdownOfSurveys}\r\n                            onChange={this.handleDropdownChange}\r\n                            onBlur={this.handleDropdownChange}\r\n                            className=\"form-control form-center\"\r\n                            ref={this.surveySelectionRef}\r\n                            required={true}\r\n                        >\r\n                            {this.getSurveys()}\r\n                        </select> \r\n                        </label>\r\n                        <p></p>\r\n                        <label style={{fontSize: \"20px\"}}>\r\n                            Activate Question after Creation:\r\n                            <p></p>\r\n                            <label className=\"switch\"><input type={\"checkbox\"} id={\"createQuestion-togBtn\"} onClick={this.switchHandler}/>\r\n                                <div className=\"slider round\">\r\n                                <span className=\"on\" style={{textAlign:\"left\"}}>YES</span><span className=\"off\"  style={{textAlign:\"right\"}}>NO</span>\r\n                                </div>\r\n                            </label>\r\n                        </label>\r\n                        <p></p>\r\n                        <label\r\n                            style={{fontSize: \"20px\"}}\r\n                        >Answer Type:\r\n                        <select name=\"answerType\" \r\n                        id={\"createQuestion-answerTypeDropdown\"}\r\n                        value={this.state.answerType} onChange={this.handleChange} \r\n                        className=\"form-control form-center\">\r\n                        <option value=\"shortAnswer\">Short Answer</option>\r\n                        <option value=\"multipleChoice\">Multiple Choice</option>\r\n                        <option value=\"fileUpload\">File Upload</option>\r\n                        </select> \r\n                        </label>\r\n                        <p></p>\r\n                        <AnswerType\r\n                            setAnswer={this.setAnswer}\r\n                            setAcceptableAnswerTypes={this.setAcceptableAnswerTypes}\r\n                        >\r\n                        </AnswerType>\r\n                        <p></p>\r\n                        <button \r\n                        id={\"createQuestion-createQuestionBtn\"}\r\n                        type=\"submit\" style={{width: \"70%\",fontSize: \"36px\"}} \r\n                        className=\"btn btn-primary btn-color-theme\">\r\n                            <span className={this.state.submitIcon}/>&nbsp; {this.state.submitLabel}\r\n                        </button>\r\n                    </center>\r\n                )\r\n                }\r\n          </form>\r\n\r\n        );\r\n    }\r\n}  \r\n\r\nexport default CreateQuestion;","O:\\Desktop\\bp-kliks\\client\\src\\components\\SurveyManagement\\ActiveQuestions.js",["597","598"],"import React from 'react';\r\n\r\nclass ActiveQuestions extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n        <div className=\"padded-page\">\r\n          <center>\r\n          <h1></h1>\r\n          <table className=\"table table-hover\">\r\n            <thead className=\"thead-light\">\r\n            <tr>\r\n              <th>Question Title</th>\r\n              <th>Question</th>\r\n              <th>Answer Type</th>\r\n              <th>View/Edit...</th>\r\n              <th>Delete</th>\r\n              <th>Deactivate</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            </tbody>\r\n          </table>\r\n          </center>\r\n        </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default ActiveQuestions;","O:\\Desktop\\bp-kliks\\client\\src\\components\\SurveyManagement\\SubmittedResponse.js",["599","600","601","602","603","604","605","606","607","608","609"],"import React from 'react';\r\nimport { async } from 'regenerator-runtime';\r\nimport DeleteResponseModal from './DeleteResponseModal';\r\nimport ViewResponse from './viewResponseModal';\r\n\r\n\r\nclass SubmittedResponse extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      questions : this.props.questions,\r\n      responses : this.props.responses,\r\n      showResponseModal : false,\r\n      showConfirmDelete: false,\r\n      editRowId: \"\",\r\n      responseItem : {},\r\n      searchKey : \"\",\r\n      showDeleteResponseModal : false,\r\n\r\n      // Sort state variables\r\n      sortResponseInOrder: false,\r\n      sortDateInOrder: false,\r\n      sortQuestionInOrder: false,\r\n      sortResponseTypeInOrder: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n  }\r\n\r\n  // TO DO Delete all RESPONSES BUTTON\r\n\r\n\r\n  //renderResponseTable -- render an HTML table displaying the responses made\r\n  //by the students of all courses for the instructor and providing buttons to view and delete each response.\r\n  renderResponseTable = (allResponses) => {\r\n  let table = [];\r\n  console.log(\"renderResponseTable\");\r\n  console.log(allResponses);\r\n    var index = 0;\r\n    allResponses.forEach((response)=>{\r\n      console.log(\"index\");\r\n      table.push(\r\n        <tr key={response.surveyID+\"-\"+response.question.questionID+\"-\"+response.responseId+\"-\"+index}>\r\n          <td>{response.responseType}</td>\r\n          <td>{response.question.questionText}</td>\r\n          <td>{response.response.responseDateTime}</td>\r\n          <td>{response.response.surveyResponse}</td>\r\n          <td><button id={response.surveyID+\"-\"+response.question.questionID+\"-\"+response.response.responseId+\"-\"+index+\"-\"+\"view\"} onClick={this.props.menuOpen ? null : () => \r\n          this.viewResponse(response.surveyID+\"-\"+response.question.questionID+\"-\"+response.response.responseId+\"-\"+index)}>\r\n              <span className=\"fa fa-eye\"></span></button></td>\r\n          <td><button id={response.surveyID+\"-\"+response.question.questionID+\"-\"+response.response.responseId+\"-\"+index+\"-\"+\"delete\"} onClick={this.props.menuOpen ? null : \r\n          () => this.confirmDeleteResponse(response.surveyID+\"-\"+response.question.questionID+\"-\"+response.response.responseId+\"-\"+index)}>\r\n              <span className=\"fa fa-trash\"></span></button></td>\r\n        </tr>\r\n      );\r\n      index++;     \r\n    });\r\n  return table;\r\n  }\r\n\r\n\r\n  /* \r\n    Name: ViewResponse\r\n    Purpose: Views a response from the specific row clicked on\r\n  */\r\n  viewResponse = (rowId) => {\r\n    console.log(\"viewResponse: rowId\");\r\n    console.log(rowId);\r\n\r\n    let responseKeys = this.parseResponseRowId(rowId);    \r\n    var response = this.state.responses.find((response) => {\r\n      if((response.surveyID == responseKeys[0]) && (response.questionID == responseKeys[1]) && \r\n      (response.response.responseId == responseKeys[2])){\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n    \r\n    console.log(\"viewResponse: responseObject\");\r\n    console.log(response);\r\n    this.setState({showResponseModal : true, editRowId: rowId, responseItem : response});\r\n    console.log(\"Viewing a response\");\r\n  }\r\n\r\n  /* \r\n    Name: parseResponseRowId\r\n    Purpose: Parses the row key from the response table and returns an array of keys\r\n    in the form: [surveyID, questionID, responseId, index]\r\n  */\r\n  parseResponseRowId = (id) => {\r\n    let keys = id.split(\"-\");\r\n    return keys;\r\n  }\r\n\r\n  /* \r\n    Name: confirmDeleteResponse\r\n    Purpose: Confirms to delete a response from the database given the response object\r\n  */\r\n  confirmDeleteResponse = (rowId) => {\r\n    console.log(\"confirmDeleteResponse: rowId\");\r\n    console.log(rowId);\r\n\r\n    let responseKeys = this.parseResponseRowId(rowId);    \r\n\r\n    var response = this.state.responses.find((response) => {\r\n      if((response.surveyID == responseKeys[0]) && (response.questionID == responseKeys[1]) && \r\n      (response.response.responseId == responseKeys[2])){\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n    \r\n    console.log(\"confirmDeleteResponse: responseObject\");\r\n    console.log(response);\r\n    this.setState({showDeleteResponseModal : true, editRowId: rowId, responseItem : response});\r\n    console.log(\"Deleting a response\");\r\n  }\r\n\r\n  /* \r\n    Name: deleteResponse\r\n    Purpose: Deletes a response from the database given the response object\r\n  */\r\n  deleteResponse = (body) => {\r\n    this.removeResponse(body);\r\n  }\r\n\r\n  /* \r\n    Name: RemoveResponse\r\n    Purpose: Makes a call to delete the response.\r\n  */\r\n  removeResponse = async (body) => {\r\n    const url = '/responses/'\r\n    const res = await fetch(url, {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n            },\r\n        method: 'DELETE',\r\n        body: JSON.stringify(body)}); \r\n    const msg = await res.text();\r\n    if (res.status == 200) {\r\n      this.props.getQuestions();\r\n      return 1;\r\n    } else {\r\n      console.log(res);\r\n      console.log(msg);\r\n      console.log(\"deleteResponse: ERROR\");\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /* \r\n    Name: SearchResponseTable\r\n    Purpose: Given a search query, it searches for responses/questions that contain that search query.\r\n  */\r\n  searchResponseTable = (event) => {\r\n    if(event.keyCode === 13){\r\n      event.preventDefault();\r\n    \r\n      // Do some reduction to only display the elements that match that searchKey -- Responses ONLY not questions.\r\n      if(this.state.searchKey.length > 0){\r\n        this.onSearch(this.state.searchKey);\r\n      }\r\n      else{\r\n        this.setState({\r\n          responses : this.props.responses\r\n        }); \r\n      }\r\n    }\r\n  }\r\n\r\n  /* \r\n    Name: onSearch\r\n    Purpose: Looks for rows that contain the searchTerm by concatenting the text\r\n              for each column except the view/delete columns\r\n  */\r\n  onSearch = (searchTerm) => {\r\n    var oldResponses = this.props.responses;\r\n    var newResponses = [];\r\n    oldResponses.forEach((response) => {\r\n      var rowString = \"\";\r\n      rowString += response.responseType;\r\n      rowString += response.question.questionText + \" \";\r\n      rowString += response.response.responseDateTime + \" \";\r\n      rowString += response.response.surveyResponse + \" \";\r\n\r\n      if(rowString.toUpperCase().indexOf(searchTerm.toUpperCase()) > -1){\r\n        newResponses.push(response);\r\n      }\r\n    });\r\n\r\n    this.setState({\r\n      responses : newResponses\r\n    }); \r\n  }\r\n\r\n  /* SORT METHODS FOR THE TABLE */\r\n\r\n  /* \r\n    Name: sortTable\r\n    Purpose: Sorts the response object given the compareFunction or the kind of \r\n      sorting we are doing function\r\n  */\r\n  sortTable = (searchCriterionCallBack) =>{\r\n    return this.state.responses.sort(searchCriterionCallBack);\r\n  }\r\n\r\n  /* \r\n    Name: onSearchKeyChange\r\n    Purpose: Updates the searchTerm when it changes\r\n  */\r\n  onSearchKeyChange = (event) => {\r\n    this.setState({searchKey : event.target.value});\r\n  }\r\n\r\n  /* \r\n    Name: sortByDate\r\n    Purpose: Sorts the responses by comparing the date the responses were made\r\n  */\r\n  sortByDate = (event) => {\r\n    event.preventDefault();\r\n\r\n    var newResponses = this.sortTable((valueA, valueB) => {\r\n      if(valueA == null || valueB == null){\r\n        if(valueA == null){\r\n          return this.state.sortDateInOrder ? -1 : 1;\r\n        }\r\n        else if(valueB == null){\r\n          return this.state.sortDateInOrder ? 1 : -1;\r\n        }\r\n      }\r\n\r\n      if (valueA.response.responseDateTime < valueB.response.responseDateTime) {\r\n        return this.state.sortDateInOrder ? -1 : 1;\r\n      }\r\n      if (valueA.response.responseDateTime > valueB.response.responseDateTime) {\r\n        return this.state.sortDateInOrder ? 1 : -1;\r\n      }\r\n      return 0;\r\n    });\r\n    \r\n    this.setState({\r\n      responses : newResponses,\r\n      sortDateInOrder : !this.state.sortDateInOrder\r\n    });\r\n  }\r\n\r\n  /* \r\n    Name: sortByQuestion\r\n    Purpose: Sorts the responses by comparing the question text.[Actual question]\r\n  */  \r\n  sortByQuestion = (event) => {\r\n    event.preventDefault();\r\n\r\n    var newResponses = this.sortTable((valueA, valueB) => {\r\n      if(valueA == null || valueB == null){\r\n        if(valueA == null){\r\n          return this.state.sortQuestionInOrder ? -1 : 1;\r\n        }\r\n        else if(valueB == null){\r\n          return this.state.sortQuestionInOrder ? 1 : -1;\r\n        }\r\n      }\r\n\r\n      if (valueA.question.questionText < valueB.question.questionText) {\r\n        return this.state.sortQuestionInOrder ? -1 : 1;\r\n      }\r\n      if (valueA.question.questionText > valueB.question.questionText) {\r\n        return this.state.sortQuestionInOrder ? 1 : -1;\r\n      }\r\n      return 0;\r\n    });\r\n    \r\n    this.setState({\r\n      responses : newResponses,\r\n      sortQuestionInOrder : !this.state.sortQuestionInOrder\r\n    });\r\n  }\r\n\r\n  /* \r\n    Name: sortByResponseType\r\n    Purpose: Sorts the responses by comparing whether the responses are individual or group.\r\n  */\r\n  sortByResponseType = (event) => {\r\n    event.preventDefault();\r\n\r\n    var newResponses = this.sortTable((valueA, valueB) => {\r\n      if(valueA == null || valueB == null){\r\n        if(valueA == null){\r\n          return this.state.sortResponseTypeInOrder ? -1 : 1;\r\n        }\r\n        else if(valueB == null){\r\n          return this.state.sortResponseTypeInOrder ? 1 : -1;\r\n        }\r\n      }\r\n\r\n      if (valueA.responseType < valueB.responseType) {\r\n        return this.state.sortResponseTypeInOrder ? -1 : 1;\r\n      }\r\n      if (valueA.responseType > valueB.responseType) {\r\n        return this.state.sortResponseTypeInOrder ? 1 : -1;\r\n      }\r\n      return 0;\r\n    });\r\n    \r\n    this.setState({\r\n      responses : newResponses,\r\n      sortResponseTypeInOrder : !this.state.sortResponseTypeInOrder\r\n    });\r\n  }\r\n\r\n  /* \r\n    Name: sortByResponse\r\n    Purpose: Sorts the responses by comparing the responses [Alphabet].\r\n  */  \r\n  sortByResponse = (event) => {\r\n    event.preventDefault();\r\n\r\n    var newResponses = this.sortTable((valueA, valueB) => {\r\n      if(valueA == null || valueB == null){\r\n        if(valueA == null){\r\n          return this.state.sortResponseInOrder ? -1 : 1;\r\n        }\r\n        else if(valueB == null){\r\n          return this.state.sortResponseInOrder ? 1 : -1;\r\n        }\r\n      }\r\n\r\n      if (valueA.response.surveyResponse < valueB.response.surveyResponse) {\r\n        return this.state.sortResponseInOrder ? -1 : 1;\r\n      }\r\n      if (valueA.response.surveyResponse > valueB.response.surveyResponse) {\r\n        return this.state.sortResponseInOrder ? 1 : -1;\r\n      }\r\n      return 0;\r\n    });\r\n    \r\n    this.setState({\r\n      responses : newResponses,\r\n      sortResponseInOrder : !this.state.sortResponseInOrder\r\n    });        \r\n  }\r\n\r\n  //render--render the entire responses table with header, displaying a \"No\r\n  //Responses made\" message in case the table is empty.\r\n  render() {\r\n    return(\r\n    <div id=\"responseTableMode\" className=\"padded-page\">\r\n      <h1></h1>\r\n      <div className=\"input-group center-search\" style={{justifyContent: \"center\", paddingBottom: \"20px\"}}>\r\n             <span className=\"input-group-prepend\">\r\n                 <div className=\"input-group-text bg-transparent border-right-0\">\r\n                   <i className=\"fa fa-search\"></i>\r\n                </div>\r\n             </span>\r\n             <input className=\"form-control py-2 border-left-0 border\" placeholder=\"Search responses\" type=\"search\" value={this.state.searchKey} id=\"searchResponses\"\r\n             onKeyUp={this.searchResponseTable} onChange={this.onSearchKeyChange}/>\r\n      </div>     \r\n      <table className=\"table table-hover\">\r\n        <thead className=\"thead-light\">\r\n        <tr>\r\n          <th><span id=\"responseSortQuestionType\" style={{cursor:\"pointer\"}} className=\"fa fa-sort\" onClick={this.sortByResponseType}></span>&nbsp;Response type </th>\r\n          <th><span id=\"responseSortQuestion\" style={{cursor:\"pointer\"}} className=\"fa fa-sort\" onClick={this.sortByQuestion}></span>&nbsp;Question</th>\r\n          <th><span id=\"responseSortDate\" style={{cursor:\"pointer\"}} className=\"fa fa-sort\" onClick={this.sortByDate}></span>&nbsp;Response Date-Time</th>\r\n          <th><span id=\"responseSortResponse\" style={{cursor:\"pointer\"}} className=\"fa fa-sort\" onClick={this.sortByResponse}></span>&nbsp;Response</th>\r\n          <th>View</th>\r\n          <th>Delete</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody id=\"responseTableBody\">\r\n          {Object.keys(this.props.responses).length === 0 ? \r\n          <tr>\r\n          <td colSpan=\"5\" style={{fontStyle: \"italic\"}}>No responses made</td>\r\n          </tr> : this.renderResponseTable(this.state.responses)\r\n          }\r\n        </tbody>\r\n      </table>\r\n      {\r\n        this.state.showResponseModal ?\r\n        <ViewResponse\r\n          closeResponse={() => {this.props.getQuestions(); this.setState({showResponseModal : false})}}\r\n          responseItem={this.state.responseItem}\r\n        >\r\n        </ViewResponse> :\r\n        null\r\n      }\r\n      {this.state.showDeleteResponseModal ?\r\n        <DeleteResponseModal \r\n          closeDeleteResponseModal={() => {this.props.getQuestions(); this.setState({showDeleteResponseModal: false})}}\r\n          responseItem={this.state.responseItem}\r\n          deleteResponse={this.deleteResponse} /> : null\r\n        }\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SubmittedResponse;\r\n","O:\\Desktop\\bp-kliks\\client\\src\\components\\SurveyManagement\\SearchQuestions.js",["610","611","612","613","614","615","616","617","618","619","620","621"],"O:\\Desktop\\bp-kliks\\client\\src\\components\\SurveyManagement\\SearchSurveys.js",["622","623","624","625","626","627","628","629","630","631","632","633"],"// SearchSurvey page that allows the instructor to search for surveys that they have made.\r\n// In addition to searching, an instuctor can remove and soort surveys.\r\n\r\nimport React from 'react';\r\nimport ConfirmDeleteSurvey from './ConfirmDeleteSurvey.js';\r\nimport { SortSurvey } from './SortTypes.js'\r\n\r\nclass SearchSurveys extends React.Component {\r\n    constructor(props) {\r\n      super(props);        \r\n      this.state = {\r\n          surveys : this.props.surveys,\r\n          showConfirmDelete: false,\r\n          isSort: false,\r\n          sortType: SortSurvey.courseID,\r\n          isSearch: false,\r\n          searchKey : \"\",\r\n\r\n      // Sort state variables\r\n      sortCourseIDAscending: false,\r\n      sortDateAscending: false,\r\n      sortSurveyIDAscending : false,\r\n      sortSurveyTitleAscending: false,\r\n      sortNumberOfQuestionsAscending : false\r\n      };\r\n    }\r\n\r\n    // Handles the sorting and search for the array of questions and updates it.\r\n    handleSurveys = (surveys) => {\r\n      let sortedSurveys = this.props.surveys;//surveys;\r\n      let isSearch = this.state.isSearch;\r\n      let isSort = this.state.isSort;\r\n\r\n      // First check if we need to perform any searches\r\n      if(this.state.isSearch){\r\n        var searchedSurveys = [];\r\n        sortedSurveys.forEach((survey) => {\r\n          var rowString = \"\";\r\n          rowString += survey.surveyID;\r\n          rowString += survey.surveyTitle + \" \";\r\n          rowString += survey.surveyDate + \" \";\r\n          rowString += survey.courseID + \" \";\r\n          rowString += survey.questions.length + \" \";\r\n\r\n          if(rowString.toUpperCase().indexOf(this.state.searchKey.toUpperCase()) > -1){\r\n            searchedSurveys.push(survey);\r\n          }\r\n        });        \r\n\r\n        sortedSurveys = searchedSurveys;\r\n        isSearch = false;\r\n      }\r\n\r\n      // Check if we need to sort\r\n      if(isSort){\r\n        if(this.state.sortType == SortSurvey.questions){\r\n          sortedSurveys.sort((surveyA, surveyB) => {\r\n            // Check against the lengths\r\n            if(surveyA.questions.length < surveyB.questions.length){\r\n              return this.state.sortNumberOfQuestionsAscending ? 1 : -1;\r\n            }\r\n            if(surveyA.questions.length > surveyB.questions.length){\r\n              return this.state.sortNumberOfQuestionsAscending ? -1 : 1;\r\n            }\r\n            return 0;\r\n          });\r\n        }\r\n        else if(this.state.sortType == SortSurvey.surveyDate){\r\n          sortedSurveys.sort((surveyA, surveyB) => {\r\n            // Turn the date options into Date types so that they are easier to compare.\r\n            let dateA = Date.parse(surveyA[this.state.sortType]);\r\n            let dateB = Date.parse(surveyB[this.state.sortType]);\r\n            if(dateA < dateB){\r\n              return this.state.sortDateAscending ? 1 : -1;\r\n            }\r\n            if(dateA > dateB){\r\n              return this.state.sortDateAscending ? -1 : 1;\r\n            }\r\n            return 0;\r\n          });          \r\n        }\r\n        else{\r\n          // Sort the rest the same way\r\n            sortedSurveys.sort((surveyA, surveyB) => {\r\n              if(surveyA[this.state.sortType] < surveyB[this.state.sortType]){\r\n                  if(this.state.sortType == \"courseID\"){\r\n                    return this.state.sortCourseIDAscending ? 1 : -1;\r\n                  }\r\n                  else if(this.state.sortType == \"surveyTitle\"){\r\n                    return this.state.sortSurveyTitleAscending ? 1 : -1;\r\n                  }\r\n                  else if(this.state.sortType == \"surveyID\"){\r\n                    return this.state.sortSurveyIDAscending ? 1 : -1;\r\n                  }\r\n              }\r\n              if(surveyA[this.state.sortType] > surveyB[this.state.sortType]){\r\n                  if(this.state.sortType == \"courseID\"){\r\n                    return this.state.sortCourseIDAscending ? -1 : 1;\r\n                  }\r\n                  else if(this.state.sortType == \"surveyTitle\"){\r\n                    return this.state.sortSurveyTitleAscending ? -1 : 1;\r\n                  }\r\n                  else if(this.state.sortType == \"surveyID\"){\r\n                    return this.state.sortSurveyIDAscending ? -1 : 1;\r\n                  }\r\n              }\r\n              return 0;\r\n            });\r\n        }\r\n\r\n        isSort = false;\r\n      }\r\n\r\n      // Update the state variables\r\n      this.setState({\r\n        isSort : isSort,\r\n        isSearch: isSearch,\r\n        surveys : sortedSurveys\r\n      });\r\n    }\r\n\r\n  /* \r\n    Name: onSearchTable\r\n    Purpose: Given a search query, it searches for surveys that contain that search query.\r\n  */\r\n  onSearchTable = (event) => {\r\n    if(event.keyCode === 13){\r\n      event.preventDefault();\r\n      this.setState({isSearch: true}, () => {this.populateSurveys();}); //Set the state of isSearch and populate the survey state array. \r\n    }\r\n  }\r\n\r\n  // Deletes a survey from MonogDB\r\n  deleteSurvey = () => {\r\n    this.props.deleteSurvey(); // Call parent component to make the route call \r\n    this.props.updateSurveys(); // Update the surveys \r\n    this.setState({showConfirmDelete: false});\r\n  }\r\n\r\n  // ConfirmDelete: confirms that the user wants to delete the survey that they selected.\r\n  confirmDelete = (survey) => {\r\n    this.props.setSurveyDelete(survey);\r\n    this.setState({showConfirmDelete: true}); //Set the confirm delete state\r\n  }\r\n\r\n  /* \r\n    Name: onSearchKeyChange\r\n    Purpose: Updates the searchTerm when it changes\r\n  */\r\n  onSearchKeyChange = (event) => {\r\n    this.setState({searchKey : event.target.value});\r\n  }\r\n\r\n  // Calls the handle surveys method.\r\n  populateSurveys = () => {\r\n    this.handleSurveys(this.props.surveys);\r\n  }\r\n\r\n  // Updates the Survey array with the correct content that is going to be rendered.\r\n  updateSurveys = () => {\r\n    var stateSurveys = this.state.surveys;\r\n    var propSurveys = this.props.surveys.map((value) => {return value.surveyID;});\r\n    var surveysToRemove = [];\r\n\r\n    // Here we are finding the surveys that are different between the newState (this.props.surveys) and the current state of survey\r\n    stateSurveys.forEach((survey)=>{\r\n      var result = propSurveys.includes(survey.surveyID);\r\n      if(result == false){\r\n        surveysToRemove.push(survey.surveyID);\r\n      }\r\n    });\r\n\r\n    // Here we remove the elements that have been removed in the this.props.surveys array. \r\n    let final_surveys = stateSurveys.filter((survey) => !surveysToRemove.includes(survey.surveyID));\r\n    if(final_surveys.length == 0){\r\n      final_surveys = this.state.surveys;\r\n    }\r\n    return final_surveys;\r\n  }\r\n\r\n    // Renders the survey table with the surveys for the user.\r\n    renderTable = (surveys) => \r\n    {      \r\n      surveys = this.updateSurveys();\r\n      let table = [];\r\n      for (let r = 0; r < surveys.length; r++) {\r\n          table.push(\r\n              <tr key={surveys[r].surveyID+\"-\"+r}>\r\n              <td>{surveys[r].surveyID}</td>\r\n              <td>{surveys[r].surveyTitle}</td>\r\n              <td>{surveys[r].surveyDate}</td>\r\n              <td>{surveys[r].courseID}</td>\r\n              <td id={surveys[r].surveyID+\"-\"+\"questionsLength\"}>{surveys[r].questions.length}</td>\r\n              {/* <td><button id={response.surveyID+\"-\"+index+\"-\"+\"view\"} onClick={this.props.menuOpen ? null : () => \r\n              this.viewResponse(response.surveyID+\"-\"+index)}>\r\n                  <span className=\"fa fa-eye\"></span></button></td> */}\r\n              <td><button id={r+\"delete\"} onClick={this.props.menuOpen ? null : \r\n              () => this.confirmDelete(surveys[r])}>\r\n                  <span className=\"fa fa-trash\"></span></button></td>\r\n          </tr>\r\n          );\r\n      }\r\n      return table;\r\n    }\r\n\r\n    // Sets the state variables that pertain to sorting by the surveyid\r\n    onSortBySurveyID = () => {\r\n      this.setState({sortType: SortSurvey.surveyID, onSortBySurveyID: !this.state.sortSurveyIDAscending, isSort: true}, \r\n      () => {this.populateSurveys();});\r\n    }\r\n\r\n      // Sets the state variables that pertain to sorting by the course id\r\n    onSortByCourseID = () => {\r\n      this.setState({sortType: SortSurvey.courseID, sortCourseIDAscending: !this.state.sortCourseIDAscending, isSort: true},\r\n        () => {this.populateSurveys();});\r\n\r\n    }\r\n\r\n    // Sets the state variables that pertain to sorting by the number of questions in a survey\r\n    onSortByNumberOfQuestions = () => {\r\n      this.setState({sortType: SortSurvey.questions, sortNumberOfQuestionsAscending: !this.state.sortNumberOfQuestionsAscending, isSort: true},\r\n        () => {this.populateSurveys();});\r\n\r\n    }\r\n\r\n    // Sets the state variables that pertain to sorting by the title    \r\n    onSortBySurveyTitle = () => {\r\n      this.setState({sortType: SortSurvey.surveyTitle, sortSurveyTitleAscending: !this.state.sortSurveyTitleAscending, isSort: true}, \r\n        () => {this.populateSurveys();});\r\n    }\r\n\r\n    // Sets the state variables that pertain to sorting by the date\r\n    onSortByDate = () => {\r\n      this.setState({sortType: SortSurvey.surveyDate, sortDateAscending: !this.state.sortDateAscending, isSort: true},\r\n        () => {this.populateSurveys();});\r\n    }\r\n\r\n    //render--render the entire surveys table with header, displaying a \"No\r\n    //Responses made\" message in case the table is empty.\r\n    render() {\r\n      return(\r\n      <div id=\"searchSurveyTableMode\" className=\"padded-page\">\r\n        <h1></h1>\r\n        <div className=\"input-group center-search\" style={{justifyContent: \"center\", paddingBottom: \"20px\"}}>\r\n               <span className=\"input-group-prepend\">\r\n                   <div className=\"input-group-text bg-transparent border-right-0\">\r\n                     <i className=\"fa fa-search\"></i>\r\n                  </div>\r\n               </span>\r\n               <input className=\"form-control py-2 border-left-0 border\"\r\n               placeholder=\"Search responses\"\r\n               type=\"search\"\r\n               id=\"searchSurveys\"\r\n               onChange={this.onSearchKeyChange}\r\n               onKeyUp={this.onSearchTable}\r\n               />\r\n        </div>     \r\n        <table className=\"table table-hover\">\r\n          <thead className=\"thead-light\">\r\n          <tr>\r\n            <th><span id=\"surveySearch-SurveyID\" style={{cursor:\"pointer\"}} className=\"fa fa-sort\" onClick={this.onSortBySurveyID}></span>&nbsp;Survey ID </th>\r\n            <th><span id=\"surveySearch-SurveyTitle\" style={{cursor:\"pointer\"}} className=\"fa fa-sort\" onClick={this.onSortBySurveyTitle}></span>&nbsp;Survey Title</th>\r\n            <th><span id=\"surveySearch-Date\" style={{cursor:\"pointer\"}} className=\"fa fa-sort\" onClick={this.onSortByDate}></span>&nbsp;Survey Creation Date</th>\r\n            <th><span id=\"surveySearch-CourseID\" style={{cursor:\"pointer\"}} className=\"fa fa-sort\" onClick={this.onSortByCourseID}></span>&nbsp;Course ID</th>\r\n            <th><span id=\"surveySearch-NumberOfQuestions\" style={{cursor:\"pointer\"}} className=\"fa fa-sort\" onClick={this.onSortByNumberOfQuestions}></span>&nbsp;Number of Questions</th>\r\n            {/* <th>View</th> */}\r\n            <th>Delete</th>\r\n          </tr>\r\n          </thead>\r\n          <tbody id=\"searchSurveyTableBody\">\r\n            {Object.keys(this.props.surveys).length === 0 ? \r\n            <tr>\r\n            <td colSpan=\"5\" style={{fontStyle: \"italic\"}}>No surveys created</td>\r\n            </tr> : this.renderTable(this.props.surveys)\r\n            }              \r\n          </tbody>\r\n        </table>\r\n        {this.state.showConfirmDelete ?\r\n          <ConfirmDeleteSurvey\r\n            closeModal={() => this.setState({showConfirmDelete: false})} \r\n            deleteSurvey={this.deleteSurvey}\r\n          />\r\n          : null\r\n        }        \r\n      </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default SearchSurveys;","O:\\Desktop\\bp-kliks\\client\\src\\components\\CourseManagement\\StudentsTable.js",["634"],"// Students table displays the students in a currently selected course\r\n\r\nimport React from 'react';\r\nimport AppMode from \"./../../AppMode.js\";\r\nimport EditStudent from \"./EditStudent.js\";\r\nimport DeleteStudent from \"./DeleteStudent.js\";\r\n\r\nclass StudentsTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            id: \"\",\r\n            displayName: \"\",\r\n        };\r\n    }\r\n\r\n    // handles a click on edit student button in the table\r\n    handleEditStudent = (userId, display) => {\r\n\r\n        this.setState({\r\n            id: userId,\r\n            displayName: display,\r\n        });\r\n\r\n        this.props.changeMode(AppMode.STUDENTS_EDIT);\r\n    }\r\n\r\n    // handles a click on delete student button in the table\r\n    handleDeleteStudent = (userId, displayName) => {\r\n\r\n        this.setState({\r\n            id: userId,\r\n            displayName: displayName,\r\n        });\r\n\r\n        this.props.changeMode(AppMode.STUDENTS_DELETE);\r\n    }\r\n\r\n    editStudent = async (studentInfo, originalId) => {\r\n\r\n        this.props.editStudent(studentInfo, originalId);\r\n    }\r\n\r\n    deleteStudent = async () => {\r\n\r\n        this.props.deleteStudent(this.state.id);\r\n    }\r\n\r\n    //renderTable -- render an HTML table displaying the rounds logged\r\n    //by the current user and providing buttons to view/edit and delete each round.\r\n    renderTable = () => {\r\n        let table = [];\r\n        for (const r in this.props.students) {\r\n        table.push(\r\n            <tr key={r} className=\"student-row\">\r\n            <td className=\"student-name-value\">{this.props.students[r].studentDisplayName}</td>\r\n            <td>{this.props.students[r].userID}</td>\r\n            {this.props.userType === \"Instructor\" ? \r\n                <div className=\"instructor-buttons\">\r\n                    <td><button className=\"edit-student-btn\" onClick={this.props.menuOpen ? null : () => \r\n                        this.handleEditStudent(this.props.students[r].userID, this.props.students[r].studentDisplayName)}>\r\n                            <span className=\"fa fa-pencil-square-o\"></span></button></td>\r\n                    <td><button className=\"delete-student-btn\" onClick={this.props.menuOpen ? null : () => \r\n                        this.handleDeleteStudent(this.props.students[r].userID, this.props.students[r].studentDisplayName)}>\r\n                            <span className=\"fa fa-trash-o\"></span></button></td>\r\n                </div> : null}\r\n            </tr> \r\n        );\r\n        }\r\n      return table;\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"padded-page\">\r\n                <h1></h1>\r\n                <table id=\"StudentsTable\" className=\"table table-hover\">\r\n                    <thead className=\"thead-light\">\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>ID</th>\r\n                        {this.props.userType === \"Instructor\" ? \r\n                        <div className=\"instructor-buttons\">\r\n                            <th>Edit</th>\r\n                            <th>Delete</th>\r\n                        </div> : null}\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {Object.keys(this.props.students).length === 0 ? \r\n                        <tr>\r\n                        <td colSpan=\"5\" style={{fontStyle: \"italic\"}}>There aren't any students in this course</td>\r\n                        </tr> : this.renderTable()\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n\r\n                {this.props.mode === AppMode.STUDENTS_EDIT ?\r\n                <EditStudent\r\n                changeMode={this.props.changeMode}\r\n                editStudent={this.editStudent}\r\n                displayName={this.state.displayName}\r\n                id={this.state.id} />\r\n                : null}\r\n\r\n                {this.props.mode === AppMode.STUDENTS_DELETE ?\r\n                <DeleteStudent\r\n                changeMode={this.props.changeMode}\r\n                deleteStudent={this.deleteStudent}\r\n                studentName={this.state.displayName}/>\r\n                : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default StudentsTable;","O:\\Desktop\\bp-kliks\\client\\src\\components\\CourseManagement\\UploadStudents.js",["635"],"// A modal component that has a file input that accepts only .csv files of a class roster\r\n\r\nimport React from 'react';\r\nimport AppMode from '../../AppMode';\r\n\r\nclass UploadStudents extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.rosterRef = React.createRef();\r\n        this.fileReadingFinished = this.fileReadingFinished.bind(this);\r\n\r\n        this.state = {\r\n            roster: [],\r\n        }\r\n    }\r\n\r\n    // handles the modal closure\r\n    handleCloseModal = (event) => {\r\n        event.preventDefault();\r\n        this.props.changeMode(AppMode.STUDENTS);\r\n    }\r\n\r\n    // handles when a new file is chosen\r\n    handleFile = (files) => {\r\n        if (window.FileReader) {\r\n            // FileReader are supported.\r\n            this.getAsText(this.rosterRef.current.files[0]);\r\n        }\r\n    }\r\n\r\n    // handles upload button click\r\n    handleUploadSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.uploadStudents(this.state.roster);\r\n        this.props.changeMode(AppMode.STUDENTS);\r\n    }\r\n\r\n    // reades the file as a string\r\n    getAsText(fileToRead) {\r\n        var reader = new FileReader();\r\n        // Read file into memory as UTF-8      \r\n        reader.readAsText(fileToRead);\r\n        // Handle errors load\r\n        reader.onload = this.fileReadingFinished;\r\n        reader.onerror = this.errorHandler;\r\n    }\r\n\r\n    // processes the file and extracts data\r\n    fileReadingFinished(event) {\r\n        var csv = event.target.result;\r\n        var allTextLines = csv.split(/\\r\\n|\\n/);\r\n\r\n        // remove header entry and blank entries\r\n        allTextLines = allTextLines.filter(function (student) {\r\n            return student !== \"userID,displayName\" && student !== \"\";\r\n        })\r\n        var lines = allTextLines.map(data => data.split(';'));\r\n        \r\n        // split each string into two array elements\r\n        lines = lines.map(function(val, index) {\r\n            val = val[0].split(',');\r\n            return val;\r\n        });\r\n\r\n        this.setState({roster : lines});\r\n    }\r\n\r\n    // handles erros when uploading a file\r\n    errorHandler(event) {\r\n        if (event.target.error.name === \"NotReadableError\") {\r\n            alert(\"Cannot read file!\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n                <div id=\"UploadStudentsModal\" className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                    <center>\r\n                        <h3 className=\"modal-title\"><b>Upload Students</b></h3>\r\n                    </center>\r\n                    <button id=\"modalClose\" className=\"modal-close\" onClick={this.handleCloseModal}>\r\n                        &times;</button>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                    <p>Add multiple students to this course at once by using uploading a class roster CSV file. \r\n                        Each student entry needs a userID and DisplayName column.<br />\r\n                    </p>\r\n                    <form onSubmit={this.handleUploadSubmit}>\r\n                        <label>\r\n                            Select a Roster File:\r\n                            <br/>\r\n                            <input\r\n                            className=\"form-control form-text form-center file-input\"\r\n                            name=\"roster\"\r\n                            type=\"file\"\r\n                            accept=\".csv\"\r\n                            required={true}\r\n                            ref={this.rosterRef}\r\n                            value={this.state.rosterFileName}\r\n                            onChange={this.handleFile}\r\n                            />\r\n                        </label>\r\n                        <div className=\"modal-footer\">\r\n                            <button role=\"submit\" className=\"btn btn-primary submit-upload\">\r\n                            Upload</button>\r\n                            <button className=\"btn btn-secondary cancel-upload\" onClick={this.handleCloseModal}>\r\n                            Cancel</button>\r\n                        </div>\r\n                        <br />\r\n                    </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UploadStudents;","O:\\Desktop\\bp-kliks\\client\\src\\components\\CourseManagement\\AddCourse.js",["636"],"// A modal component that instructors use to create new courses\r\n\r\nimport React from 'react';\r\nimport AppMode from \"./../../AppMode.js\";\r\n\r\nclass AddCourse extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.numberRef = React.createRef();\r\n        this.semesterRef = React.createRef();\r\n        this.yearRef = React.createRef();\r\n\r\n        this.state = {\r\n            name: \"\",\r\n            number: \"\",\r\n            id: \"\",\r\n            semester: \"\",\r\n            year: \"\",\r\n            instructorFirstName: \"\",\r\n            instructorLastName: \"\",\r\n            enrollmentLimit: \"\",\r\n            notes: \"\",\r\n        };\r\n    }\r\n\r\n    // handles the modal closure\r\n    handleCloseModal = (event) => {\r\n        event.preventDefault();\r\n        this.props.changeMode(AppMode.COURSES);\r\n    }\r\n\r\n    // handles create button click\r\n    handleCreateSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const newCourse = {\r\n            courseInstructorFirstName: this.state.instructorFirstName,\r\n            courseInstructorLastName: this.state.instructorLastName,\r\n            courseInstructorID: this.props.instructorId,\r\n            courseName: this.state.name,\r\n            courseNumber: this.state.number,\r\n            courseYear: this.state.year,\r\n            courseSemester: this.state.semester,\r\n            courseEnrollmentLimit: this.state.enrollmentLimit,\r\n            courseCurrentlyEnrolled: \"0\",\r\n            courseID: this.state.id,\r\n            courseNotes: this.state.notes\r\n        };\r\n\r\n        this.props.addCourse(newCourse);\r\n        this.props.changeMode(AppMode.COURSES);\r\n    }\r\n\r\n    // called everytime a field in the form changes value\r\n    handleChange = (event) => {\r\n        const name = event.target.name;\r\n\r\n        // Update the courseID if number, semester, or year has changed\r\n        if (name === \"number\" || name === \"semester\" || name === \"year\"){\r\n            let newCourseId = this.numberRef.current.value + this.semesterRef.current.value + this.yearRef.current.value;\r\n            this.setState({id : newCourseId});\r\n        }\r\n\r\n        this.setState({[name]: event.target.value});\r\n    }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n                <div id=\"AddCourseModal\" className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                    <center>\r\n                        <h3 className=\"modal-title\"><b>Create a Course</b></h3>\r\n                    </center>\r\n                    <button id=\"modalClose\" className=\"modal-close\" onClick={this.handleCloseModal}>\r\n                        &times;</button>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                    <p>Create a new course to send surveys to. After you have created a course, you can add students to it.<br />\r\n                    </p>\r\n                    <form onSubmit={this.handleCreateSubmit}>\r\n                        <label>\r\n                            Course Name:\r\n                            <br/>\r\n                            <input name=\"name\" id=\"courseName\" className=\"form-control form-center\" type=\"text\"\r\n                                value={this.state.name} onChange={this.handleChange}\r\n                                placeholder=\"Course name\" size=\"50\" maxLength=\"50\" required={true}/>\r\n                        </label>\r\n                        <p></p>\r\n                        <label>\r\n                            Course Number:\r\n                            <br/>\r\n                            <input name=\"number\" id=\"courseNumber\" className=\"form-control form-center\" type=\"text\"\r\n                                value={this.state.number} onChange={this.handleChange} ref={this.numberRef}\r\n                                placeholder=\"Course number\" size=\"50\" maxLength=\"50\" required={true}/>\r\n                        </label>\r\n                        <p></p>\r\n                        <label>\r\n                            Term:\r\n                            <br/>\r\n                            <input name=\"semester\" id=\"courseSemester\" className=\"form-control form-center\" type=\"text\"\r\n                                value={this.state.semester} onChange={this.handleChange} ref={this.semesterRef}\r\n                                placeholder=\"Current term\" size=\"50\" maxLength=\"50\" required={true}/>\r\n                        </label>\r\n                        <p></p>\r\n                        <label>\r\n                            Year:\r\n                            <br/>\r\n                            <input name=\"year\" id=\"courseYear\" className=\"form-control form-center\" type=\"text\"\r\n                                value={this.state.year} onChange={this.handleChange} ref={this.yearRef}\r\n                                placeholder=\"Current year\" size=\"50\" maxLength=\"50\" required={true}/>\r\n                        </label>\r\n                        <p></p>\r\n                        <label>\r\n                            Instructor First Name:\r\n                            <br/>\r\n                            <input name=\"instructorFirstName\" id=\"courseFirstName\" className=\"form-control form-center\" type=\"text\"\r\n                                value={this.state.instructorFirstName} onChange={this.handleChange}\r\n                                placeholder=\"First name\" size=\"50\" maxLength=\"50\" required={true}/>\r\n                        </label>\r\n                        <p></p>\r\n                        <label>\r\n                            Instructor Last Name:\r\n                            <br/>\r\n                            <input name=\"instructorLastName\" id=\"courseLastName\" className=\"form-control form-center\" type=\"text\"\r\n                                value={this.state.instructorLastName} onChange={this.handleChange}\r\n                                placeholder=\"Last name\" size=\"50\" maxLength=\"50\" required={true}/>\r\n                        </label>\r\n                        <p></p>\r\n                        <label>\r\n                            Enrollment Limit:\r\n                            <br/>\r\n                            <input name=\"enrollmentLimit\" id=\"courseEnrollmentLimit\" className=\"form-control form-center\" type=\"text\"\r\n                                value={this.state.enrollmentLimit} onChange={this.handleChange}\r\n                                placeholder=\"Enrollment limit\" size=\"50\" maxLength=\"50\" required={true}/>\r\n                        </label>\r\n                        <p></p>\r\n                        <label>Notes:\r\n                            <textarea name=\"notes\" id=\"courseNotes\"className=\"form-control\" rows=\"6\" cols=\"75\" \r\n                                placeholder=\"Enter course notes\" value={this.state.notes} \r\n                                onChange={this.handleChange} />\r\n                        </label>\r\n                        <p></p>\r\n                        <p></p>\r\n                        <div className=\"modal-footer\">\r\n                            <button role=\"submit\" id=\"saveCourse\" className=\"btn btn-primary\">\r\n                            Create</button>\r\n                            <button id=\"cancelCourse\" className=\"btn btn-secondary\" onClick={this.handleCloseModal}>\r\n                            Cancel</button>\r\n                        </div>\r\n                        <br />\r\n                    </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddCourse;","O:\\Desktop\\bp-kliks\\client\\src\\components\\CourseManagement\\AddStudent.js",["637"],"// A modal for adding a student to an existing course\r\n// Only an instructor can do this\r\n\r\nimport React from 'react';\r\nimport AppMode from \"./../../AppMode.js\";\r\n\r\nclass AddStudent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.idRef = React.createRef();\r\n        this.displayNameRef = React.createRef();\r\n\r\n        this.state = {\r\n            id: \"\",\r\n            displayName: \"\",\r\n        };\r\n    }\r\n\r\n    // handles the modal closure\r\n    handleCloseModal = (event) => {\r\n        event.preventDefault();\r\n        this.props.changeMode(AppMode.STUDENTS);\r\n    }\r\n\r\n    // handles create button click\r\n    handleCreateSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const newStudent = {\r\n            userID: this.state.id,\r\n            studentDisplayName: this.state.displayName,\r\n        };\r\n\r\n        this.props.addStudent(newStudent);\r\n        this.props.changeMode(AppMode.STUDENTS);\r\n    }\r\n\r\n    // called everytime a field in the form changes value\r\n    handleChange = (event) => {\r\n        const name = event.target.name;\r\n        this.setState({[name]: event.target.value});\r\n    }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n                <div id=\"AddStudentModal\" className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                    <center>\r\n                        <h3 className=\"modal-title\"><b>Add a student to {this.props.courseName} </b></h3>\r\n                    </center>\r\n                    <button id=\"modalClose\" className=\"modal-close\" onClick={this.handleCloseModal}>\r\n                        &times;</button>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                    <form onSubmit={this.handleCreateSubmit}>\r\n                        <label>\r\n                            Student ID:\r\n                            <br/>\r\n                            <input name=\"id\" id=\"id\" className=\"form-control form-center\" type=\"text\"\r\n                                value={this.state.id} onChange={this.handleChange} ref={this.idRef}\r\n                                placeholder=\"Student ID\" size=\"50\" maxLength=\"50\" required={true}/>\r\n                        </label>\r\n                        <p></p>\r\n                        <label>\r\n                            Display Name:\r\n                            <br/>\r\n                            <input name=\"displayName\" id=\"displayName\" className=\"form-control form-center\" type=\"text\"\r\n                                value={this.state.displayName} onChange={this.handleChange} ref={this.displayNameRef}\r\n                                placeholder=\"Course number\" size=\"50\" maxLength=\"50\" required={true}/>\r\n                        </label>\r\n                        <p></p>\r\n                        <p></p>\r\n                        <div className=\"modal-footer\">\r\n                            <button role=\"submit\" id=\"saveStudent\" className=\"btn btn-primary\">\r\n                            Create</button>\r\n                            <button id=\"cancelStudent\" className=\"btn btn-secondary\" onClick={this.handleCloseModal}>\r\n                            Cancel</button>\r\n                        </div>\r\n                        <br />\r\n                    </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddStudent;","O:\\Desktop\\bp-kliks\\client\\src\\components\\CourseManagement\\CoursesTable.js",["638","639","640","641"],"// A table that displays all the courses a student is in\r\n\r\nimport React from 'react';\r\nimport AppMode from \"./../../AppMode.js\";\r\nimport DeleteCourse from './DeleteCourse.js';\r\nimport EditCourse from './EditCourse.js';\r\n\r\nclass CoursesTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            courseId: \"\",\r\n            courseName: \"\",\r\n        };\r\n    }\r\n\r\n    viewStudents = (courseId, courseName) => {\r\n\r\n        // update courseID state in app\r\n        this.props.changeCourse(courseId, courseName);\r\n        this.props.changeMode(AppMode.STUDENTS);\r\n    }\r\n\r\n    handleEditCourse = (id, name) => {\r\n        \r\n        this.setState({\r\n            courseId: id,\r\n            courseName: name\r\n        });\r\n\r\n        this.props.changeMode(AppMode.COURSES_EDIT);\r\n    }\r\n\r\n    handleDeleteCourse = (id, name) => {\r\n\r\n        this.setState({\r\n            courseId: id,\r\n            courseName: name\r\n        });\r\n\r\n        this.props.changeMode(AppMode.COURSES_DELETE);\r\n    }\r\n\r\n    deleteCourse = async (courseId) => {\r\n       const url = '/courses/' + this.props.userId + '/' + courseId;\r\n       const res = await fetch(url, \r\n                    {method: 'DELETE'}); \r\n        if (res.status == 200) {\r\n            console.log(\"Successfully deleted course\")\r\n        } else {\r\n            const resText = await res.text();\r\n            console.log(\"Course deletion failed with error: \" + resText);\r\n        }\r\n\r\n        this.props.changeMode(AppMode.COURSES);\r\n        this.props.updateUser();\r\n    }\r\n\r\n    editCourse = async (courseInfo) => {\r\n\r\n        // update course using route\r\n        const url = '/courses/' + this.props.userId + '/' + this.state.courseId;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'PUT',\r\n            body: JSON.stringify(courseInfo)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            console.log(\"Course successfully updated\");\r\n        } else {\r\n            console.log(\"Error occurred while updating course\");\r\n        }\r\n        this.props.updateUser();\r\n    }\r\n\r\n    //renderTable -- render an HTML table displaying the rounds logged\r\n    //by the current user and providing buttons to view/edit and delete each round.\r\n    renderTable = () => {\r\n        let table = [];\r\n        for (const r in this.props.courses) {\r\n        table.push(\r\n            <tr key={r} className=\"course-row\">\r\n            <td class=\"course-name-value\">{this.props.courses[r].courseName}</td>\r\n            <td>{this.props.courses[r].courseYear}</td>\r\n            <td>{this.props.courses[r].courseSemester}</td>\r\n            <td>{\"\" + this.props.courses[r].courseInstructorFirstName + \" \" + \r\n                    this.props.courses[r].courseInstructorLastName + \"\"}\r\n            </td>\r\n            <td><button onClick={this.props.menuOpen ? null : () => \r\n                this.viewStudents(this.props.courses[r].courseID, this.props.courses[r].courseName)}>\r\n                    <span id=\"studentView\" className=\"fa fa-users\"></span></button></td>\r\n            {this.props.userType === \"Instructor\" ? \r\n                <div className=\"instructor-buttons\">\r\n                    <td><button className=\"edit-course-btn\" onClick={this.props.menuOpen ? null : () => \r\n                        this.handleEditCourse(this.props.courses[r].courseID, this.props.courses[r].courseName)}>\r\n                            <span className=\"fa fa-pencil-square-o\"></span></button></td>\r\n                    <td><button className=\"delete-course-btn\" onClick={this.props.menuOpen ? null : () => \r\n                        this.handleDeleteCourse(this.props.courses[r].courseID, this.props.courses[r].courseName)}>\r\n                            <span className=\"fa fa-trash-o\"></span></button></td>\r\n                </div> : null}\r\n            </tr> \r\n        );\r\n        }\r\n        return table;\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"padded-page\">\r\n                <h1></h1>\r\n                <table id=\"CoursesTable\" className=\"table table-hover\">\r\n                    <thead className=\"thead-light\">\r\n                    <tr>\r\n                        <th>Course Name</th>\r\n                        <th>Year</th>\r\n                        <th>Semester</th>\r\n                        <th>Instructor Name</th>\r\n                        <th>View Students</th>\r\n                        {this.props.userType === \"Instructor\" ? \r\n                        <div className=\"instructor-buttons\">\r\n                            <th>Edit</th>\r\n                            <th>Delete</th>\r\n                        </div> : null}\r\n                        \r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {Object.keys(this.props.courses).length === 0 ? \r\n                        <tr>\r\n                        <td colSpan=\"5\" style={{fontStyle: \"italic\"}}>You don't have any courses</td>\r\n                        </tr> : this.renderTable()\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n                {this.props.mode === AppMode.COURSES_DELETE ?\r\n                <DeleteCourse\r\n                changeMode={this.props.changeMode}\r\n                deleteCourse={this.deleteCourse}\r\n                courseId={this.state.courseId}\r\n                courseName={this.state.courseName} />\r\n                : null}\r\n\r\n                {this.props.mode === AppMode.COURSES_EDIT ?\r\n                <EditCourse\r\n                changeMode={this.props.changeMode}\r\n                editCourse={this.editCourse}\r\n                courseName={this.state.courseName}\r\n                courseId={this.state.courseId}\r\n                userId={this.props.userId} />\r\n                : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CoursesTable;","O:\\Desktop\\bp-kliks\\client\\src\\components\\ConfirmDeleteRound.js",[],"O:\\Desktop\\bp-kliks\\client\\src\\components\\SurveyManagement\\ConfirmDeleteSurvey.js",[],"O:\\Desktop\\bp-kliks\\client\\src\\components\\SurveyManagement\\SortTypes.js",[],"O:\\Desktop\\bp-kliks\\client\\src\\components\\CourseManagement\\EditStudent.js",["642"],"// A modal for adding a student to an existing course\r\n// Only an instructor can do this\r\n\r\nimport React from 'react';\r\nimport AppMode from \"./../../AppMode.js\";\r\n\r\nclass EditStudent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.idRef = React.createRef();\r\n        this.displayNameRef = React.createRef();\r\n\r\n        this.state = {\r\n            originalId: \"\",\r\n            id: \"\",\r\n            displayName: \"\",\r\n        };\r\n    }\r\n\r\n    //componentDidMount -- grab the course data from the database and push them into the state.\r\n    async componentDidMount() {\r\n\r\n        this.setState({\r\n            originalId: this.props.id,\r\n            id: this.props.id,\r\n            displayName: this.props.displayName\r\n        });\r\n}\r\n\r\n    // handles the modal closure\r\n    handleCloseModal = (event) => {\r\n        event.preventDefault();\r\n        this.props.changeMode(AppMode.STUDENTS);\r\n    }\r\n\r\n    // handles create button click\r\n    handleEditSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const newStudent = {\r\n            userID: this.state.id,\r\n            studentDisplayName: this.state.displayName,\r\n        };\r\n\r\n        this.props.editStudent(newStudent, this.state.originalId);\r\n        this.props.changeMode(AppMode.STUDENTS);\r\n    }\r\n\r\n    // called everytime a field in the form changes value\r\n    handleChange = (event) => {\r\n        const name = event.target.name;\r\n        this.setState({[name]: event.target.value});\r\n    }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n                <div id=\"EditStudentModal\" className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                    <center>\r\n                        <h3 className=\"modal-title\"><b>Edit {this.props.id} </b></h3>\r\n                    </center>\r\n                    <button id=\"modalClose\" className=\"modal-close\" onClick={this.handleCloseModal}>\r\n                        &times;</button>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                    <form onSubmit={this.handleEditSubmit}>\r\n                        <label>\r\n                            Student ID:\r\n                            <br/>\r\n                            <input name=\"id\" id=\"id\" className=\"form-control form-center\" type=\"text\"\r\n                                value={this.state.id} onChange={this.handleChange} ref={this.idRef}\r\n                                placeholder=\"Student ID\" size=\"50\" maxLength=\"50\" required={true}/>\r\n                        </label>\r\n                        <p></p>\r\n                        <label>\r\n                            Display Name:\r\n                            <br/>\r\n                            <input name=\"displayName\" id=\"displayName\" className=\"form-control form-center\" type=\"text\"\r\n                                value={this.state.displayName} onChange={this.handleChange} ref={this.displayNameRef}\r\n                                placeholder=\"Course number\" size=\"50\" maxLength=\"50\" required={true}/>\r\n                        </label>\r\n                        <p></p>\r\n                        <p></p>\r\n                        <div className=\"modal-footer\">\r\n                            <button role=\"submit\" id=\"saveStudent\" className=\"btn btn-primary\">\r\n                            Edit</button>\r\n                            <button id=\"cancelStudent\" className=\"btn btn-secondary\" onClick={this.handleCloseModal}>\r\n                            Cancel</button>\r\n                        </div>\r\n                        <br />\r\n                    </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EditStudent;","O:\\Desktop\\bp-kliks\\client\\src\\components\\CourseManagement\\DeleteStudent.js",["643","644"],"// A modal to confirm deletion of a course\r\n\r\nimport React from 'react';\r\nimport AppMode from \"./../../AppMode.js\";\r\n\r\nclass DeleteStudent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    // handles the modal closure\r\n    handleCloseModal = (event) => {\r\n        event.preventDefault();\r\n        this.props.changeMode(AppMode.STUDENTS);\r\n    }\r\n\r\n    handleDelete = (event) => {\r\n        event.preventDefault();\r\n        this.props.deleteStudent();\r\n        this.props.changeMode(AppMode.STUDENTS);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n                <div id=\"ConfirmStudentDeleteModal\" className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                    <center>\r\n                        <h3 className=\"modal-title\"><b>Are you sure you'd like to delete {this.props.studentName}?</b></h3>\r\n                    </center>\r\n                    <button id=\"modalClose\" className=\"modal-close\" onClick={this.handleCloseModal}>\r\n                        &times;</button>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                    <form onSubmit={this.handleDelete}>\r\n                        <button role=\"submit\" className=\"btn btn-primary delete-student\">\r\n                            Confirm</button>\r\n                            <button className=\"btn btn-secondary cancel-delete-student\" onClick={this.handleCloseModal}>\r\n                            Cancel</button>\r\n                        <br />\r\n                    </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DeleteStudent;","O:\\Desktop\\bp-kliks\\client\\src\\components\\SurveyManagement\\DeleteResponseModal.js",[],"O:\\Desktop\\bp-kliks\\client\\src\\components\\SurveyManagement\\viewResponseModal.js",["645","646","647","648"],"import React from 'react';\r\n\r\nclass ViewResponse extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      questions : [],\r\n      allResponses : [],\r\n      showConfirmDelete: false\r\n    };\r\n  }\r\n\r\n /* \r\n    Name: handleAnswers\r\n    Purpose: Display the correct answer depending on the type of answer type.\r\n  */\r\n  handleAnswers = () => {\r\n      if(this.props.responseItem.question.questionAnswers.length == 1){\r\n        if(this.props.responseItem.question.questionType == \"FileUpload\" || this.props.responseItem.question.questionType == \"F\"){\r\n            return (\r\n                <iframe\r\n                    id=\"viewResponse-answer-file\"\r\n                    src={this.props.responseItem.question.questionAnswers[0]}\r\n                > </iframe>\r\n            );\r\n        }\r\n        \r\n        return (\r\n            <div id=\"viewResponse-answer-freeResponse\">\r\n                {this.props.responseItem.question.questionAnswers[0]}\r\n            </div>\r\n        );\r\n      }\r\n\r\n    var answers = this.props.responseItem.question.questionAnswers;\r\n    var elements = [];\r\n    answers.forEach((answer) => {\r\n        elements.push(\r\n            <div>{answer}</div>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div id=\"viewResponse-answer-multipleChoice\">{elements}</div>\r\n    );\r\n  }\r\n\r\n  render(){\r\n    return (\r\n        <div id=\"viewResponseModal\" className=\"modal\" itemID=\"exampleModalLong\" tabIndex={-1} role=\"dialog\" aria-labelledby=\"exampleModalLongTitle\" aria-hidden=\"true\">\r\n        <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n            <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n                <h5 className=\"modal-title\" id=\"exampleModalLongTitle\">{this.props.responseItem.survey.surveyTitle}</h5>\r\n                <button type=\"button\" className=\"close\" data-dismiss=\"modal\" id=\"viewResponseModal-exitBtn\"  onClick={ () => { this.props.closeResponse();} } aria-label=\"Close\">\r\n                <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"recipient-name\" style={{fontSize:\"22pt\"}} class=\"col-form-label\">Question:</label>\r\n                    <div class=\"form-control\" id=\"viewResponse-question\">{this.props.responseItem.question.questionText}</div>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"recipient-name\" style={{fontSize:\"22pt\"}} class=\"col-form-label\">Response:</label>\r\n                    <div class=\"form-control\" id=\"viewResponse-response\">{this.props.responseItem.response.surveyResponse}</div>\r\n                </div>       \r\n            </div>\r\n            <div className=\"modal-body\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"recipient-name\" style={{fontSize:\"22pt\"}} class=\"col-form-label\">Answer(s):</label>\r\n                    <div class=\"form-control\" id=\"viewResponse-answer\">{this.handleAnswers()}</div>\r\n                </div>       \r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                <button id=\"viewResponseModal-closeBtn\" type=\"button\" className=\"btn btn-secondary\" onClick={ () => { this.props.closeResponse();}} data-dismiss=\"modal\">Close</button>\r\n                {/* <button type=\"button\" className=\"btn btn-primary\">Save changes</button> */}\r\n            </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    );\r\n  }\r\n\r\n}\r\nexport default ViewResponse;\r\n","O:\\Desktop\\bp-kliks\\client\\src\\components\\SurveyManagement\\AnswerTypes\\FileUpload.js",["649","650"],"import React from 'react';\r\n\r\nclass FileUpload extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor(props) {\r\n        super(props);\r\n        this.fileRef = React.createRef();\r\n        this.state = {\r\n          file : \"\",\r\n          selectedOptions : []\r\n        }\r\n    }\r\n    \r\n    // Handle the file changes\r\n    onFileChange = (event) => {\r\n\r\n      if(event.target.value.length == 0)\r\n      {\r\n        this.props.setAnswer([this.result]);\r\n        this.setState({file:  \"\"});\r\n      }\r\n      else\r\n      {\r\n        //The user selected a file\r\n        const self = this;\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(this.fileRef.current.files[0]);\r\n        reader.addEventListener(\"load\",function() {\r\n            self.props.setAnswer([this.result]);\r\n            self.setState({file:  this.result});\r\n          });\r\n        }\r\n\r\n        this.props.setAcceptableAnswerTypes(this.state.selectedOptions);\r\n\r\n        this.state =  {\r\n          selectedOptions : []\r\n        };\r\n    }\r\n\r\n    // Handles the onchange for the selected items.\r\n    handleChange = (event) => {\r\n      let newSelectedOptions = event.target.value;\r\n      let selectedOptions = this.state.selectedOptions;\r\n  \r\n      console.log(selectedOptions)\r\n      console.log(newSelectedOptions)\r\n      if(selectedOptions.indexOf(newSelectedOptions) === -1)\r\n      {\r\n        selectedOptions.push(newSelectedOptions);\r\n      }\r\n      else{\r\n        if(selectedOptions.length === 1)\r\n        {\r\n          selectedOptions = [];\r\n        }\r\n        else{\r\n          selectedOptions.splice(selectedOptions.indexOf(newSelectedOptions), 1);\r\n        }\r\n\r\n      this.setState({ selectedOptions: selectedOptions }, ()=> { console.log(\"String representation:\"); console.log(this.state.selectedOptions.toString()); console.log(this.state.selectedOptions);});\r\n    }\r\n  }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n            <center>\r\n            <p></p>\r\n            <label>Acceptable File Types:\r\n            <select name=\"answerType\" multiple={true} value={this.state.selectedOptions} onChange={this.handleChange} \r\n              id={\"createQuestion-file-fileTypes\"}\r\n              className=\"form-control form-center\">\r\n              <option value=\".pdf\">pdf</option>\r\n              <option value=\".docx\">docx</option>\r\n              <option value=\".jpg\">jpg</option>\r\n              <option value=\".jpeg\">jpeg</option>\r\n              <option value=\".png\">png</option>\r\n              <option value=\".doc\">doc</option>                     \r\n            </select> \r\n            </label>\r\n            <p></p>\r\n              <label>\r\n                File:\r\n                <input name=\"file\" className=\"form-control form-center\" \r\n                id={\"createQuestion-file-upload\"}\r\n                onChange={this.onFileChange}\r\n                ref={this.fileRef}\r\n                value={this.state.fileObj}\r\n                type=\"file\"\r\n                accept={this.state.selectedOptions.toString()}/>\r\n              </label>\r\n            <p></p>\r\n            </center>\r\n          </div>            \r\n        );\r\n    }\r\n}\r\n\r\nexport default FileUpload;","O:\\Desktop\\bp-kliks\\client\\src\\components\\SurveyManagement\\AnswerTypes\\FreeResponse.js",[],"O:\\Desktop\\bp-kliks\\client\\src\\components\\CourseManagement\\DeleteCourse.js",["651","652"],"// A modal to confirm deletion of a course\r\n\r\nimport React from 'react';\r\nimport AppMode from \"./../../AppMode.js\";\r\n\r\nclass DeleteCourse extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    // handles the modal closure\r\n    handleCloseModal = (event) => {\r\n        event.preventDefault();\r\n        this.props.changeMode(AppMode.COURSES);\r\n    }\r\n\r\n    handleDelete = (event) => {\r\n        event.preventDefault();\r\n        this.props.deleteCourse(this.props.courseId);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n                <div id=\"ConfirmCourseDeleteModal\" className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                    <center>\r\n                        <h3 className=\"modal-title\"><b>Are you sure you'd like to delete {this.props.courseName}?</b></h3>\r\n                    </center>\r\n                    <button id=\"modalClose\" className=\"modal-close\" onClick={this.handleCloseModal}>\r\n                        &times;</button>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                    <form onSubmit={this.handleDelete}>\r\n                        <button role=\"submit\" className=\"btn btn-primary delete-course\">\r\n                            Confirm</button>\r\n                            <button className=\"btn btn-secondary cancel-delete-course\" onClick={this.handleCloseModal}>\r\n                            Cancel</button>\r\n                        <br />\r\n                    </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DeleteCourse;","O:\\Desktop\\bp-kliks\\client\\src\\components\\SurveyManagement\\AnswerTypes\\MultipleChoice.js",[],["653","654"],"O:\\Desktop\\bp-kliks\\client\\src\\components\\CourseManagement\\EditCourse.js",["655"],"// A modal component that instructors use to create new courses\r\n\r\nimport React from 'react';\r\nimport AppMode from \"./../../AppMode.js\";\r\n\r\nclass EditCourse extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.numberRef = React.createRef();\r\n        this.semesterRef = React.createRef();\r\n        this.yearRef = React.createRef();\r\n\r\n        this.state = {\r\n            name: \"\",\r\n            number: \"\",\r\n            id: \"\",\r\n            semester: \"\",\r\n            year: \"\",\r\n            instructorFirstName: \"\",\r\n            instructorLastName: \"\",\r\n            enrollmentLimit: \"\",\r\n            currentlyEnrolled: \"\",\r\n            notes: \"\",\r\n        };\r\n        this.componentDidMount = this.componentDidMount.bind(this);\r\n    }\r\n\r\n    //componentDidMount -- grab the course data from the database and push them into the state.\r\n    async componentDidMount() {\r\n            //obtain current course data from database and push into state\r\n            const url = \"/courses/\" + this.props.userId;\r\n            const res = await fetch(url);\r\n            const json = await res.json();\r\n            const userData = JSON.parse(json);\r\n\r\n            let currCourse = userData.filter(function (course) {\r\n                return course.courseID === this.props.courseId;\r\n            }.bind(this))\r\n\r\n            currCourse = currCourse[0];\r\n\r\n            this.setState({\r\n                instructorFirstName: currCourse.courseInstructorFirstName,\r\n                instructorLastName: currCourse.courseInstructorLastName,\r\n                name: currCourse.courseName,\r\n                number: currCourse.courseNumber,\r\n                year: currCourse.courseYear,\r\n                semester: currCourse.courseSemester,\r\n                enrollmentLimit: currCourse.courseEnrollmentLimit,\r\n                currentlyEnrolled: currCourse.courseCurrentlyEnrolled,\r\n                id: currCourse.courseID,\r\n                notes: currCourse.courseNotes\r\n            });\r\n    }\r\n\r\n    // handles the modal closure\r\n    handleCloseModal = (event) => {\r\n        event.preventDefault();\r\n        this.props.changeMode(AppMode.COURSES);\r\n    }\r\n\r\n    // handles create button click\r\n    handleEditSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const newCourse = {\r\n            courseInstructorFirstName: this.state.instructorFirstName,\r\n            courseInstructorLastName: this.state.instructorLastName,\r\n            courseInstructorID: this.props.instructorId,\r\n            courseName: this.state.name,\r\n            courseNumber: this.state.number,\r\n            courseYear: this.state.year,\r\n            courseSemester: this.state.semester,\r\n            courseEnrollmentLimit: this.state.enrollmentLimit,\r\n            courseCurrentlyEnrolled: this.state.currentlyEnrolled,\r\n            courseID: this.state.id,\r\n            courseNotes: this.state.notes\r\n        };\r\n\r\n        this.props.editCourse(newCourse);\r\n        this.props.changeMode(AppMode.COURSES);\r\n    }\r\n\r\n    // called everytime a field in the form changes value\r\n    handleChange = (event) => {\r\n        const name = event.target.name;\r\n\r\n        // Update the courseID if number, semester, or year has changed\r\n        if (name === \"number\" || name === \"semester\" || name === \"year\"){\r\n            let newCourseId = this.numberRef.current.value + this.semesterRef.current.value + this.yearRef.current.value;\r\n            this.setState({id : newCourseId});\r\n        }\r\n\r\n        this.setState({[name]: event.target.value});\r\n    }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n                <div id=\"EditCourseModal\" className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                    <center>\r\n                        <h3 className=\"modal-title\"><b>Edit {this.props.courseName}</b></h3>\r\n                    </center>\r\n                    <button id=\"modalClose\" className=\"modal-close\" onClick={this.handleCloseModal}>\r\n                        &times;</button>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                    <form onSubmit={this.handleEditSubmit}>\r\n                        <label>\r\n                            Course Name:\r\n                            <br/>\r\n                            <input id=\"name\" name=\"name\" className=\"form-control form-center\" type=\"text\"\r\n                                value={this.state.name} onChange={this.handleChange}\r\n                                placeholder=\"Course name\" size=\"50\" maxLength=\"50\" required={true}/>\r\n                        </label>\r\n                        <p></p>\r\n                        <label>\r\n                            Course Number:\r\n                            <br/>\r\n                            <input id=\"number\" name=\"number\" className=\"form-control form-center\" type=\"text\"\r\n                                value={this.state.number} onChange={this.handleChange} ref={this.numberRef}\r\n                                placeholder=\"Course number\" size=\"50\" maxLength=\"50\" required={true}/>\r\n                        </label>\r\n                        <p></p>\r\n                        <label>\r\n                            Term:\r\n                            <br/>\r\n                            <input id=\"semester\" name=\"semester\" className=\"form-control form-center\" type=\"text\"\r\n                                value={this.state.semester} onChange={this.handleChange} ref={this.semesterRef}\r\n                                placeholder=\"Current term\" size=\"50\" maxLength=\"50\" required={true}/>\r\n                        </label>\r\n                        <p></p>\r\n                        <label>\r\n                            Year:\r\n                            <br/>\r\n                            <input id=\"year\" name=\"year\" className=\"form-control form-center\" type=\"text\"\r\n                                value={this.state.year} onChange={this.handleChange} ref={this.yearRef}\r\n                                placeholder=\"Current year\" size=\"50\" maxLength=\"50\" required={true}/>\r\n                        </label>\r\n                        <p></p>\r\n                        <label>\r\n                            Instructor First Name:\r\n                            <br/>\r\n                            <input id=\"instructorFirstName\" name=\"instructorFirstName\" className=\"form-control form-center\" type=\"text\"\r\n                                value={this.state.instructorFirstName} onChange={this.handleChange}\r\n                                placeholder=\"First name\" size=\"50\" maxLength=\"50\" required={true}/>\r\n                        </label>\r\n                        <p></p>\r\n                        <label>\r\n                            Instructor Last Name:\r\n                            <br/>\r\n                            <input id=\"instructorLastName\" name=\"instructorLastName\" className=\"form-control form-center\" type=\"text\"\r\n                                value={this.state.instructorLastName} onChange={this.handleChange}\r\n                                placeholder=\"Last name\" size=\"50\" maxLength=\"50\" required={true}/>\r\n                        </label>\r\n                        <p></p>\r\n                        <label>\r\n                            Enrollment Limit:\r\n                            <br/>\r\n                            <input id=\"enrollmentLimit\" name=\"enrollmentLimit\" className=\"form-control form-center\" type=\"text\"\r\n                                value={this.state.enrollmentLimit} onChange={this.handleChange}\r\n                                placeholder=\"Enrollment limit\" size=\"50\" maxLength=\"50\" required={true}/>\r\n                        </label>\r\n                        <p></p>\r\n                        <label>Notes:\r\n                            <textarea id=\"notes\" name=\"notes\" className=\"form-control\" rows=\"6\" cols=\"75\" \r\n                                placeholder=\"Enter course notes\" value={this.state.notes} \r\n                                onChange={this.handleChange} />\r\n                        </label>\r\n                        <p></p>\r\n                        <p></p>\r\n                        <div className=\"modal-footer\">\r\n                            <button role=\"submit\" className=\"btn btn-primary edit-course\">\r\n                            Edit</button>\r\n                            <button className=\"btn btn-secondary cancel-edit-course\" onClick={this.handleCloseModal}>\r\n                            Cancel</button>\r\n                        </div>\r\n                        <br />\r\n                    </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EditCourse;",{"ruleId":"656","severity":1,"message":"657","line":164,"column":31,"nodeType":"658","messageId":"659","endLine":164,"endColumn":33},{"ruleId":"656","severity":1,"message":"657","line":20,"column":32,"nodeType":"658","messageId":"659","endLine":20,"endColumn":34},{"ruleId":"660","severity":1,"message":"661","line":3,"column":8,"nodeType":"662","messageId":"663","endLine":3,"endColumn":11},{"ruleId":"664","severity":1,"message":"665","line":31,"column":9,"nodeType":"666","endLine":34,"endColumn":14},{"ruleId":"664","severity":1,"message":"665","line":36,"column":9,"nodeType":"666","endLine":39,"endColumn":14},{"ruleId":"664","severity":1,"message":"665","line":41,"column":11,"nodeType":"666","endLine":44,"endColumn":14},{"ruleId":"664","severity":1,"message":"665","line":46,"column":9,"nodeType":"666","endLine":49,"endColumn":14},{"ruleId":"664","severity":1,"message":"665","line":51,"column":13,"nodeType":"666","endLine":54,"endColumn":14},{"ruleId":"664","severity":1,"message":"665","line":56,"column":9,"nodeType":"666","endLine":59,"endColumn":14},{"ruleId":"667","severity":1,"message":"668","line":63,"column":5,"nodeType":"669","messageId":"670","endLine":63,"endColumn":11},{"ruleId":"664","severity":1,"message":"665","line":67,"column":11,"nodeType":"666","endLine":67,"endColumn":40},{"ruleId":"664","severity":1,"message":"665","line":69,"column":11,"nodeType":"666","endLine":69,"endColumn":40},{"ruleId":"667","severity":1,"message":"668","line":73,"column":5,"nodeType":"669","messageId":"670","endLine":73,"endColumn":11},{"ruleId":"664","severity":1,"message":"665","line":79,"column":11,"nodeType":"666","endLine":82,"endColumn":14},{"ruleId":"664","severity":1,"message":"665","line":84,"column":11,"nodeType":"666","endLine":87,"endColumn":14},{"ruleId":"664","severity":1,"message":"665","line":94,"column":11,"nodeType":"666","endLine":97,"endColumn":14},{"ruleId":"667","severity":1,"message":"668","line":102,"column":7,"nodeType":"669","messageId":"670","endLine":102,"endColumn":13},{"ruleId":"664","severity":1,"message":"665","line":109,"column":13,"nodeType":"666","endLine":112,"endColumn":16},{"ruleId":"664","severity":1,"message":"665","line":114,"column":13,"nodeType":"666","endLine":117,"endColumn":16},{"ruleId":"664","severity":1,"message":"665","line":119,"column":13,"nodeType":"666","endLine":122,"endColumn":16},{"ruleId":"664","severity":1,"message":"665","line":129,"column":13,"nodeType":"666","endLine":132,"endColumn":16},{"ruleId":"667","severity":1,"message":"668","line":137,"column":7,"nodeType":"669","messageId":"670","endLine":137,"endColumn":13},{"ruleId":"671","severity":1,"message":"672","line":149,"column":13,"nodeType":"666","endLine":149,"endColumn":74},{"ruleId":"664","severity":1,"message":"665","line":156,"column":13,"nodeType":"666","endLine":156,"endColumn":91},{"ruleId":"664","severity":1,"message":"665","line":158,"column":11,"nodeType":"666","endLine":158,"endColumn":85},{"ruleId":"664","severity":1,"message":"665","line":160,"column":11,"nodeType":"666","endLine":160,"endColumn":83},{"ruleId":"664","severity":1,"message":"665","line":10,"column":9,"nodeType":"666","endLine":11,"endColumn":76},{"ruleId":"664","severity":1,"message":"665","line":15,"column":9,"nodeType":"666","endLine":19,"endColumn":64},{"ruleId":"664","severity":1,"message":"665","line":23,"column":9,"nodeType":"666","endLine":24,"endColumn":64},{"ruleId":"660","severity":1,"message":"673","line":3,"column":8,"nodeType":"662","messageId":"663","endLine":3,"endColumn":28},{"ruleId":"656","severity":1,"message":"657","line":65,"column":33,"nodeType":"658","messageId":"659","endLine":65,"endColumn":35},{"ruleId":"656","severity":1,"message":"674","line":78,"column":43,"nodeType":"658","messageId":"659","endLine":78,"endColumn":45},{"ruleId":"656","severity":1,"message":"657","line":103,"column":47,"nodeType":"658","messageId":"659","endLine":103,"endColumn":49},{"ruleId":"656","severity":1,"message":"657","line":104,"column":25,"nodeType":"658","messageId":"659","endLine":104,"endColumn":27},{"ruleId":"656","severity":1,"message":"657","line":105,"column":37,"nodeType":"658","messageId":"659","endLine":105,"endColumn":39},{"ruleId":"656","severity":1,"message":"657","line":107,"column":25,"nodeType":"658","messageId":"659","endLine":107,"endColumn":27},{"ruleId":"656","severity":1,"message":"657","line":108,"column":34,"nodeType":"658","messageId":"659","endLine":108,"endColumn":36},{"ruleId":"656","severity":1,"message":"657","line":110,"column":25,"nodeType":"658","messageId":"659","endLine":110,"endColumn":27},{"ruleId":"656","severity":1,"message":"657","line":111,"column":39,"nodeType":"658","messageId":"659","endLine":111,"endColumn":41},{"ruleId":"656","severity":1,"message":"657","line":113,"column":25,"nodeType":"658","messageId":"659","endLine":113,"endColumn":27},{"ruleId":"656","severity":1,"message":"657","line":116,"column":25,"nodeType":"658","messageId":"659","endLine":116,"endColumn":27},{"ruleId":"656","severity":1,"message":"657","line":119,"column":25,"nodeType":"658","messageId":"659","endLine":119,"endColumn":27},{"ruleId":"656","severity":1,"message":"657","line":122,"column":25,"nodeType":"658","messageId":"659","endLine":122,"endColumn":27},{"ruleId":"656","severity":1,"message":"674","line":163,"column":28,"nodeType":"658","messageId":"659","endLine":163,"endColumn":30},{"ruleId":"656","severity":1,"message":"674","line":178,"column":28,"nodeType":"658","messageId":"659","endLine":178,"endColumn":30},{"ruleId":"656","severity":1,"message":"674","line":196,"column":24,"nodeType":"658","messageId":"659","endLine":196,"endColumn":26},{"ruleId":"671","severity":1,"message":"672","line":313,"column":17,"nodeType":"666","endLine":317,"endColumn":20},{"ruleId":"656","severity":1,"message":"657","line":313,"column":52,"nodeType":"658","messageId":"659","endLine":313,"endColumn":54},{"ruleId":"675","severity":1,"message":"676","line":357,"column":21,"nodeType":"677","endLine":357,"endColumn":34},{"ruleId":"660","severity":1,"message":"678","line":6,"column":8,"nodeType":"662","messageId":"663","endLine":6,"endColumn":15},{"ruleId":"656","severity":1,"message":"674","line":44,"column":20,"nodeType":"658","messageId":"659","endLine":44,"endColumn":22},{"ruleId":"656","severity":1,"message":"674","line":126,"column":20,"nodeType":"658","messageId":"659","endLine":126,"endColumn":22},{"ruleId":"656","severity":1,"message":"657","line":158,"column":31,"nodeType":"658","messageId":"659","endLine":158,"endColumn":33},{"ruleId":"679","severity":1,"message":"680","line":211,"column":58,"nodeType":"677","endLine":211,"endColumn":76},{"ruleId":"656","severity":1,"message":"657","line":50,"column":24,"nodeType":"658","messageId":"659","endLine":50,"endColumn":26},{"ruleId":"656","severity":1,"message":"657","line":75,"column":24,"nodeType":"658","messageId":"659","endLine":75,"endColumn":26},{"ruleId":"656","severity":1,"message":"657","line":99,"column":24,"nodeType":"658","messageId":"659","endLine":99,"endColumn":26},{"ruleId":"656","severity":1,"message":"657","line":121,"column":24,"nodeType":"658","messageId":"659","endLine":121,"endColumn":26},{"ruleId":"656","severity":1,"message":"674","line":143,"column":27,"nodeType":"658","messageId":"659","endLine":143,"endColumn":29},{"ruleId":"656","severity":1,"message":"674","line":149,"column":29,"nodeType":"658","messageId":"659","endLine":149,"endColumn":31},{"ruleId":"656","severity":1,"message":"674","line":154,"column":37,"nodeType":"658","messageId":"659","endLine":154,"endColumn":39},{"ruleId":"681","severity":1,"message":"682","line":194,"column":9,"nodeType":"683","messageId":"684","endLine":266,"endColumn":10},{"ruleId":"671","severity":1,"message":"672","line":17,"column":17,"nodeType":"666","endLine":19,"endColumn":43},{"ruleId":"685","severity":1,"message":"686","line":41,"column":47,"nodeType":"677","endLine":41,"endColumn":62},{"ruleId":"685","severity":1,"message":"686","line":44,"column":17,"nodeType":"677","endLine":44,"endColumn":32},{"ruleId":"685","severity":1,"message":"686","line":45,"column":48,"nodeType":"677","endLine":45,"endColumn":63},{"ruleId":"656","severity":1,"message":"657","line":37,"column":24,"nodeType":"658","messageId":"659","endLine":37,"endColumn":26},{"ruleId":"656","severity":1,"message":"657","line":61,"column":24,"nodeType":"658","messageId":"659","endLine":61,"endColumn":26},{"ruleId":"656","severity":1,"message":"657","line":77,"column":24,"nodeType":"658","messageId":"659","endLine":77,"endColumn":26},{"ruleId":"681","severity":1,"message":"682","line":108,"column":9,"nodeType":"683","messageId":"684","endLine":150,"endColumn":10},{"ruleId":"656","severity":1,"message":"657","line":112,"column":42,"nodeType":"658","messageId":"659","endLine":112,"endColumn":44},{"ruleId":"656","severity":1,"message":"657","line":42,"column":24,"nodeType":"658","messageId":"659","endLine":42,"endColumn":26},{"ruleId":"660","severity":1,"message":"687","line":89,"column":19,"nodeType":"662","messageId":"663","endLine":89,"endColumn":22},{"ruleId":"656","severity":1,"message":"657","line":90,"column":28,"nodeType":"658","messageId":"659","endLine":90,"endColumn":30},{"ruleId":"660","severity":1,"message":"687","line":117,"column":15,"nodeType":"662","messageId":"663","endLine":117,"endColumn":18},{"ruleId":"656","severity":1,"message":"657","line":118,"column":24,"nodeType":"658","messageId":"659","endLine":118,"endColumn":26},{"ruleId":"656","severity":1,"message":"657","line":16,"column":19,"nodeType":"658","messageId":"659","endLine":16,"endColumn":21},{"ruleId":"660","severity":1,"message":"678","line":2,"column":8,"nodeType":"662","messageId":"663","endLine":2,"endColumn":15},{"ruleId":"656","severity":1,"message":"674","line":19,"column":29,"nodeType":"658","messageId":"659","endLine":19,"endColumn":31},{"ruleId":"656","severity":1,"message":"657","line":49,"column":42,"nodeType":"658","messageId":"659","endLine":49,"endColumn":44},{"ruleId":"679","severity":1,"message":"680","line":61,"column":25,"nodeType":"677","endLine":61,"endColumn":44},{"ruleId":"656","severity":1,"message":"657","line":48,"column":42,"nodeType":"658","messageId":"659","endLine":48,"endColumn":44},{"ruleId":"675","severity":1,"message":"676","line":74,"column":29,"nodeType":"677","endLine":74,"endColumn":42},{"ruleId":"688","severity":1,"message":"689","line":79,"column":7,"nodeType":"666","endLine":79,"endColumn":11},{"ruleId":"656","severity":1,"message":"657","line":42,"column":42,"nodeType":"658","messageId":"659","endLine":42,"endColumn":44},{"ruleId":"675","severity":1,"message":"676","line":67,"column":29,"nodeType":"677","endLine":67,"endColumn":42},{"ruleId":"660","severity":1,"message":"690","line":5,"column":8,"nodeType":"662","messageId":"663","endLine":5,"endColumn":22},{"ruleId":"656","severity":1,"message":"674","line":47,"column":48,"nodeType":"658","messageId":"659","endLine":47,"endColumn":50},{"ruleId":"656","severity":1,"message":"674","line":84,"column":40,"nodeType":"658","messageId":"659","endLine":84,"endColumn":42},{"ruleId":"656","severity":1,"message":"674","line":91,"column":39,"nodeType":"658","messageId":"659","endLine":91,"endColumn":41},{"ruleId":"691","severity":1,"message":"692","line":6,"column":5,"nodeType":"693","messageId":"694","endLine":8,"endColumn":6},{"ruleId":"660","severity":1,"message":"695","line":2,"column":10,"nodeType":"662","messageId":"663","endLine":2,"endColumn":15},{"ruleId":"696","severity":1,"message":"697","line":50,"column":124,"nodeType":"658","messageId":"698","endLine":50,"endColumn":125},{"ruleId":"696","severity":1,"message":"697","line":53,"column":124,"nodeType":"658","messageId":"698","endLine":53,"endColumn":125},{"ruleId":"656","severity":1,"message":"674","line":74,"column":29,"nodeType":"658","messageId":"659","endLine":74,"endColumn":31},{"ruleId":"656","severity":1,"message":"674","line":74,"column":73,"nodeType":"658","messageId":"659","endLine":74,"endColumn":75},{"ruleId":"656","severity":1,"message":"674","line":75,"column":37,"nodeType":"658","messageId":"659","endLine":75,"endColumn":39},{"ruleId":"656","severity":1,"message":"674","line":108,"column":29,"nodeType":"658","messageId":"659","endLine":108,"endColumn":31},{"ruleId":"656","severity":1,"message":"674","line":108,"column":73,"nodeType":"658","messageId":"659","endLine":108,"endColumn":75},{"ruleId":"656","severity":1,"message":"674","line":109,"column":37,"nodeType":"658","messageId":"659","endLine":109,"endColumn":39},{"ruleId":"656","severity":1,"message":"674","line":143,"column":20,"nodeType":"658","messageId":"659","endLine":143,"endColumn":22},{"ruleId":"688","severity":1,"message":"689","line":351,"column":7,"nodeType":"666","endLine":351,"endColumn":11},{"ruleId":"691","severity":1,"message":"692","line":7,"column":3,"nodeType":"693","messageId":"694","endLine":9,"endColumn":4},{"ruleId":"688","severity":1,"message":"689","line":20,"column":7,"nodeType":"666","endLine":20,"endColumn":11},{"ruleId":"656","severity":1,"message":"674","line":24,"column":29,"nodeType":"658","messageId":"659","endLine":24,"endColumn":31},{"ruleId":"656","severity":1,"message":"674","line":122,"column":41,"nodeType":"658","messageId":"659","endLine":122,"endColumn":43},{"ruleId":"656","severity":1,"message":"674","line":129,"column":39,"nodeType":"658","messageId":"659","endLine":129,"endColumn":41},{"ruleId":"656","severity":1,"message":"674","line":136,"column":36,"nodeType":"658","messageId":"659","endLine":136,"endColumn":38},{"ruleId":"656","severity":1,"message":"674","line":157,"column":43,"nodeType":"658","messageId":"659","endLine":157,"endColumn":45},{"ruleId":"696","severity":1,"message":"697","line":22,"column":48,"nodeType":"658","messageId":"698","endLine":22,"endColumn":49},{"ruleId":"696","severity":1,"message":"697","line":26,"column":62,"nodeType":"658","messageId":"698","endLine":26,"endColumn":63},{"ruleId":"688","severity":1,"message":"689","line":65,"column":9,"nodeType":"666","endLine":65,"endColumn":13},{"ruleId":"660","severity":1,"message":"678","line":4,"column":8,"nodeType":"662","messageId":"663","endLine":4,"endColumn":15},{"ruleId":"691","severity":1,"message":"692","line":7,"column":5,"nodeType":"693","messageId":"694","endLine":9,"endColumn":6},{"ruleId":"688","severity":1,"message":"689","line":48,"column":17,"nodeType":"666","endLine":48,"endColumn":21},{"ruleId":"675","severity":1,"message":"676","line":148,"column":37,"nodeType":"677","endLine":148,"endColumn":50},{"ruleId":"675","severity":1,"message":"676","line":107,"column":37,"nodeType":"677","endLine":107,"endColumn":50},{"ruleId":"656","severity":1,"message":"674","line":52,"column":24,"nodeType":"658","messageId":"659","endLine":52,"endColumn":26},{"ruleId":"660","severity":1,"message":"687","line":74,"column":15,"nodeType":"662","messageId":"663","endLine":74,"endColumn":18},{"ruleId":"656","severity":1,"message":"657","line":75,"column":24,"nodeType":"658","messageId":"659","endLine":75,"endColumn":26},{"ruleId":"688","severity":1,"message":"689","line":116,"column":17,"nodeType":"666","endLine":116,"endColumn":21},{"ruleId":"656","severity":1,"message":"674","line":18,"column":66,"nodeType":"658","messageId":"659","endLine":18,"endColumn":68},{"ruleId":"656","severity":1,"message":"674","line":19,"column":58,"nodeType":"658","messageId":"659","endLine":19,"endColumn":60},{"ruleId":"656","severity":1,"message":"674","line":19,"column":123,"nodeType":"658","messageId":"659","endLine":19,"endColumn":125},{"ruleId":"699","severity":1,"message":"700","line":21,"column":17,"nodeType":"666","endLine":24,"endColumn":18},{"ruleId":"691","severity":1,"message":"692","line":7,"column":5,"nodeType":"693","messageId":"694","endLine":9,"endColumn":6},{"ruleId":"675","severity":1,"message":"676","line":35,"column":33,"nodeType":"677","endLine":35,"endColumn":46},{"ruleId":"675","severity":1,"message":"676","line":176,"column":37,"nodeType":"677","endLine":176,"endColumn":50},{"ruleId":"656","severity":1,"message":"674","line":18,"column":36,"nodeType":"658","messageId":"659","endLine":18,"endColumn":38},{"ruleId":"701","severity":1,"message":"702","line":37,"column":9,"nodeType":"703","endLine":37,"endColumn":13},{"ruleId":"704","replacedBy":"705"},{"ruleId":"706","replacedBy":"707"},{"ruleId":"656","severity":1,"message":"657","line":147,"column":20,"nodeType":"658","messageId":"659","endLine":147,"endColumn":22},{"ruleId":"656","severity":1,"message":"657","line":183,"column":31,"nodeType":"658","messageId":"659","endLine":183,"endColumn":33},{"ruleId":"660","severity":1,"message":"661","line":3,"column":8,"nodeType":"662","messageId":"663","endLine":3,"endColumn":11},{"ruleId":"664","severity":1,"message":"665","line":31,"column":9,"nodeType":"666","endLine":34,"endColumn":14},{"ruleId":"664","severity":1,"message":"665","line":36,"column":9,"nodeType":"666","endLine":39,"endColumn":14},{"ruleId":"664","severity":1,"message":"665","line":41,"column":11,"nodeType":"666","endLine":44,"endColumn":14},{"ruleId":"664","severity":1,"message":"665","line":46,"column":9,"nodeType":"666","endLine":49,"endColumn":14},{"ruleId":"664","severity":1,"message":"665","line":51,"column":13,"nodeType":"666","endLine":54,"endColumn":14},{"ruleId":"664","severity":1,"message":"665","line":56,"column":9,"nodeType":"666","endLine":59,"endColumn":14},{"ruleId":"667","severity":1,"message":"668","line":63,"column":5,"nodeType":"669","messageId":"670","endLine":63,"endColumn":11},{"ruleId":"664","severity":1,"message":"665","line":67,"column":11,"nodeType":"666","endLine":67,"endColumn":40},{"ruleId":"664","severity":1,"message":"665","line":69,"column":11,"nodeType":"666","endLine":69,"endColumn":40},{"ruleId":"667","severity":1,"message":"668","line":73,"column":5,"nodeType":"669","messageId":"670","endLine":73,"endColumn":11},{"ruleId":"664","severity":1,"message":"665","line":79,"column":11,"nodeType":"666","endLine":82,"endColumn":14},{"ruleId":"664","severity":1,"message":"665","line":84,"column":11,"nodeType":"666","endLine":87,"endColumn":14},{"ruleId":"664","severity":1,"message":"665","line":94,"column":11,"nodeType":"666","endLine":97,"endColumn":14},{"ruleId":"667","severity":1,"message":"668","line":102,"column":7,"nodeType":"669","messageId":"670","endLine":102,"endColumn":13},{"ruleId":"664","severity":1,"message":"665","line":109,"column":13,"nodeType":"666","endLine":112,"endColumn":16},{"ruleId":"664","severity":1,"message":"665","line":114,"column":13,"nodeType":"666","endLine":117,"endColumn":16},{"ruleId":"664","severity":1,"message":"665","line":119,"column":13,"nodeType":"666","endLine":122,"endColumn":16},{"ruleId":"664","severity":1,"message":"665","line":129,"column":13,"nodeType":"666","endLine":132,"endColumn":16},{"ruleId":"667","severity":1,"message":"668","line":137,"column":7,"nodeType":"669","messageId":"670","endLine":137,"endColumn":13},{"ruleId":"671","severity":1,"message":"672","line":149,"column":13,"nodeType":"666","endLine":149,"endColumn":74},{"ruleId":"664","severity":1,"message":"665","line":156,"column":13,"nodeType":"666","endLine":156,"endColumn":91},{"ruleId":"664","severity":1,"message":"665","line":158,"column":11,"nodeType":"666","endLine":158,"endColumn":85},{"ruleId":"664","severity":1,"message":"665","line":160,"column":11,"nodeType":"666","endLine":160,"endColumn":83},{"ruleId":"656","severity":1,"message":"657","line":20,"column":32,"nodeType":"658","messageId":"659","endLine":20,"endColumn":34},{"ruleId":"656","severity":1,"message":"657","line":62,"column":24,"nodeType":"658","messageId":"659","endLine":62,"endColumn":26},{"ruleId":"656","severity":1,"message":"657","line":86,"column":24,"nodeType":"658","messageId":"659","endLine":86,"endColumn":26},{"ruleId":"656","severity":1,"message":"657","line":111,"column":24,"nodeType":"658","messageId":"659","endLine":111,"endColumn":26},{"ruleId":"656","severity":1,"message":"657","line":134,"column":24,"nodeType":"658","messageId":"659","endLine":134,"endColumn":26},{"ruleId":"656","severity":1,"message":"674","line":152,"column":27,"nodeType":"658","messageId":"659","endLine":152,"endColumn":29},{"ruleId":"656","severity":1,"message":"657","line":158,"column":29,"nodeType":"658","messageId":"659","endLine":158,"endColumn":31},{"ruleId":"656","severity":1,"message":"674","line":167,"column":27,"nodeType":"658","messageId":"659","endLine":167,"endColumn":29},{"ruleId":"656","severity":1,"message":"674","line":237,"column":38,"nodeType":"658","messageId":"659","endLine":237,"endColumn":40},{"ruleId":"656","severity":1,"message":"657","line":244,"column":24,"nodeType":"658","messageId":"659","endLine":244,"endColumn":26},{"ruleId":"681","severity":1,"message":"682","line":255,"column":9,"nodeType":"683","messageId":"684","endLine":336,"endColumn":10},{"ruleId":"664","severity":1,"message":"665","line":10,"column":9,"nodeType":"666","endLine":11,"endColumn":76},{"ruleId":"664","severity":1,"message":"665","line":15,"column":9,"nodeType":"666","endLine":19,"endColumn":64},{"ruleId":"664","severity":1,"message":"665","line":23,"column":9,"nodeType":"666","endLine":24,"endColumn":64},{"ruleId":"660","severity":1,"message":"673","line":3,"column":8,"nodeType":"662","messageId":"663","endLine":3,"endColumn":28},{"ruleId":"656","severity":1,"message":"657","line":65,"column":33,"nodeType":"658","messageId":"659","endLine":65,"endColumn":35},{"ruleId":"656","severity":1,"message":"674","line":78,"column":43,"nodeType":"658","messageId":"659","endLine":78,"endColumn":45},{"ruleId":"656","severity":1,"message":"657","line":103,"column":47,"nodeType":"658","messageId":"659","endLine":103,"endColumn":49},{"ruleId":"656","severity":1,"message":"657","line":104,"column":25,"nodeType":"658","messageId":"659","endLine":104,"endColumn":27},{"ruleId":"656","severity":1,"message":"657","line":105,"column":37,"nodeType":"658","messageId":"659","endLine":105,"endColumn":39},{"ruleId":"656","severity":1,"message":"657","line":107,"column":25,"nodeType":"658","messageId":"659","endLine":107,"endColumn":27},{"ruleId":"656","severity":1,"message":"657","line":108,"column":34,"nodeType":"658","messageId":"659","endLine":108,"endColumn":36},{"ruleId":"656","severity":1,"message":"657","line":110,"column":25,"nodeType":"658","messageId":"659","endLine":110,"endColumn":27},{"ruleId":"656","severity":1,"message":"657","line":111,"column":39,"nodeType":"658","messageId":"659","endLine":111,"endColumn":41},{"ruleId":"656","severity":1,"message":"657","line":113,"column":25,"nodeType":"658","messageId":"659","endLine":113,"endColumn":27},{"ruleId":"656","severity":1,"message":"657","line":116,"column":25,"nodeType":"658","messageId":"659","endLine":116,"endColumn":27},{"ruleId":"656","severity":1,"message":"657","line":119,"column":25,"nodeType":"658","messageId":"659","endLine":119,"endColumn":27},{"ruleId":"656","severity":1,"message":"657","line":122,"column":25,"nodeType":"658","messageId":"659","endLine":122,"endColumn":27},{"ruleId":"656","severity":1,"message":"674","line":163,"column":28,"nodeType":"658","messageId":"659","endLine":163,"endColumn":30},{"ruleId":"656","severity":1,"message":"674","line":178,"column":28,"nodeType":"658","messageId":"659","endLine":178,"endColumn":30},{"ruleId":"656","severity":1,"message":"674","line":196,"column":24,"nodeType":"658","messageId":"659","endLine":196,"endColumn":26},{"ruleId":"671","severity":1,"message":"672","line":313,"column":17,"nodeType":"666","endLine":317,"endColumn":20},{"ruleId":"656","severity":1,"message":"657","line":313,"column":52,"nodeType":"658","messageId":"659","endLine":313,"endColumn":54},{"ruleId":"675","severity":1,"message":"676","line":357,"column":21,"nodeType":"677","endLine":357,"endColumn":34},{"ruleId":"660","severity":1,"message":"678","line":6,"column":8,"nodeType":"662","messageId":"663","endLine":6,"endColumn":15},{"ruleId":"656","severity":1,"message":"674","line":44,"column":20,"nodeType":"658","messageId":"659","endLine":44,"endColumn":22},{"ruleId":"656","severity":1,"message":"674","line":126,"column":20,"nodeType":"658","messageId":"659","endLine":126,"endColumn":22},{"ruleId":"656","severity":1,"message":"657","line":158,"column":31,"nodeType":"658","messageId":"659","endLine":158,"endColumn":33},{"ruleId":"679","severity":1,"message":"680","line":211,"column":58,"nodeType":"677","endLine":211,"endColumn":76},{"ruleId":"656","severity":1,"message":"657","line":37,"column":24,"nodeType":"658","messageId":"659","endLine":37,"endColumn":26},{"ruleId":"656","severity":1,"message":"657","line":61,"column":24,"nodeType":"658","messageId":"659","endLine":61,"endColumn":26},{"ruleId":"656","severity":1,"message":"657","line":77,"column":24,"nodeType":"658","messageId":"659","endLine":77,"endColumn":26},{"ruleId":"681","severity":1,"message":"682","line":108,"column":9,"nodeType":"683","messageId":"684","endLine":150,"endColumn":10},{"ruleId":"656","severity":1,"message":"657","line":112,"column":42,"nodeType":"658","messageId":"659","endLine":112,"endColumn":44},{"ruleId":"671","severity":1,"message":"672","line":17,"column":17,"nodeType":"666","endLine":19,"endColumn":43},{"ruleId":"685","severity":1,"message":"686","line":41,"column":47,"nodeType":"677","endLine":41,"endColumn":62},{"ruleId":"685","severity":1,"message":"686","line":44,"column":17,"nodeType":"677","endLine":44,"endColumn":32},{"ruleId":"685","severity":1,"message":"686","line":45,"column":48,"nodeType":"677","endLine":45,"endColumn":63},{"ruleId":"656","severity":1,"message":"657","line":43,"column":24,"nodeType":"658","messageId":"659","endLine":43,"endColumn":26},{"ruleId":"660","severity":1,"message":"687","line":89,"column":19,"nodeType":"662","messageId":"663","endLine":89,"endColumn":22},{"ruleId":"656","severity":1,"message":"657","line":90,"column":28,"nodeType":"658","messageId":"659","endLine":90,"endColumn":30},{"ruleId":"660","severity":1,"message":"687","line":112,"column":15,"nodeType":"662","messageId":"663","endLine":112,"endColumn":18},{"ruleId":"656","severity":1,"message":"657","line":113,"column":24,"nodeType":"658","messageId":"659","endLine":113,"endColumn":26},{"ruleId":"656","severity":1,"message":"657","line":125,"column":24,"nodeType":"658","messageId":"659","endLine":125,"endColumn":26},{"ruleId":"660","severity":1,"message":"687","line":153,"column":15,"nodeType":"662","messageId":"663","endLine":153,"endColumn":18},{"ruleId":"656","severity":1,"message":"657","line":154,"column":24,"nodeType":"658","messageId":"659","endLine":154,"endColumn":26},{"ruleId":"656","severity":1,"message":"674","line":169,"column":24,"nodeType":"658","messageId":"659","endLine":169,"endColumn":26},{"ruleId":"660","severity":1,"message":"687","line":190,"column":15,"nodeType":"662","messageId":"663","endLine":190,"endColumn":18},{"ruleId":"656","severity":1,"message":"657","line":191,"column":24,"nodeType":"658","messageId":"659","endLine":191,"endColumn":26},{"ruleId":"656","severity":1,"message":"657","line":16,"column":19,"nodeType":"658","messageId":"659","endLine":16,"endColumn":21},{"ruleId":"656","severity":1,"message":"657","line":48,"column":42,"nodeType":"658","messageId":"659","endLine":48,"endColumn":44},{"ruleId":"675","severity":1,"message":"676","line":74,"column":29,"nodeType":"677","endLine":74,"endColumn":42},{"ruleId":"656","severity":1,"message":"657","line":42,"column":42,"nodeType":"658","messageId":"659","endLine":42,"endColumn":44},{"ruleId":"675","severity":1,"message":"676","line":67,"column":29,"nodeType":"677","endLine":67,"endColumn":42},{"ruleId":"688","severity":1,"message":"689","line":79,"column":7,"nodeType":"666","endLine":79,"endColumn":11},{"ruleId":"660","severity":1,"message":"678","line":2,"column":8,"nodeType":"662","messageId":"663","endLine":2,"endColumn":15},{"ruleId":"656","severity":1,"message":"674","line":19,"column":29,"nodeType":"658","messageId":"659","endLine":19,"endColumn":31},{"ruleId":"656","severity":1,"message":"657","line":49,"column":42,"nodeType":"658","messageId":"659","endLine":49,"endColumn":44},{"ruleId":"679","severity":1,"message":"680","line":61,"column":25,"nodeType":"677","endLine":61,"endColumn":44},{"ruleId":"660","severity":1,"message":"690","line":7,"column":8,"nodeType":"662","messageId":"663","endLine":7,"endColumn":22},{"ruleId":"660","severity":1,"message":"678","line":8,"column":8,"nodeType":"662","messageId":"663","endLine":8,"endColumn":15},{"ruleId":"656","severity":1,"message":"674","line":49,"column":48,"nodeType":"658","messageId":"659","endLine":49,"endColumn":50},{"ruleId":"656","severity":1,"message":"674","line":87,"column":40,"nodeType":"658","messageId":"659","endLine":87,"endColumn":42},{"ruleId":"656","severity":1,"message":"674","line":94,"column":39,"nodeType":"658","messageId":"659","endLine":94,"endColumn":41},{"ruleId":"656","severity":1,"message":"674","line":26,"column":29,"nodeType":"658","messageId":"659","endLine":26,"endColumn":31},{"ruleId":"656","severity":1,"message":"674","line":139,"column":41,"nodeType":"658","messageId":"659","endLine":139,"endColumn":43},{"ruleId":"656","severity":1,"message":"674","line":147,"column":39,"nodeType":"658","messageId":"659","endLine":147,"endColumn":41},{"ruleId":"656","severity":1,"message":"674","line":155,"column":36,"nodeType":"658","messageId":"659","endLine":155,"endColumn":38},{"ruleId":"656","severity":1,"message":"674","line":177,"column":43,"nodeType":"658","messageId":"659","endLine":177,"endColumn":45},{"ruleId":"691","severity":1,"message":"692","line":6,"column":5,"nodeType":"693","messageId":"694","endLine":8,"endColumn":6},{"ruleId":"688","severity":1,"message":"689","line":14,"column":11,"nodeType":"666","endLine":14,"endColumn":15},{"ruleId":"660","severity":1,"message":"695","line":2,"column":10,"nodeType":"662","messageId":"663","endLine":2,"endColumn":15},{"ruleId":"696","severity":1,"message":"697","line":50,"column":124,"nodeType":"658","messageId":"698","endLine":50,"endColumn":125},{"ruleId":"696","severity":1,"message":"697","line":53,"column":124,"nodeType":"658","messageId":"698","endLine":53,"endColumn":125},{"ruleId":"656","severity":1,"message":"674","line":74,"column":29,"nodeType":"658","messageId":"659","endLine":74,"endColumn":31},{"ruleId":"656","severity":1,"message":"674","line":74,"column":73,"nodeType":"658","messageId":"659","endLine":74,"endColumn":75},{"ruleId":"656","severity":1,"message":"674","line":75,"column":37,"nodeType":"658","messageId":"659","endLine":75,"endColumn":39},{"ruleId":"656","severity":1,"message":"674","line":108,"column":29,"nodeType":"658","messageId":"659","endLine":108,"endColumn":31},{"ruleId":"656","severity":1,"message":"674","line":108,"column":73,"nodeType":"658","messageId":"659","endLine":108,"endColumn":75},{"ruleId":"656","severity":1,"message":"674","line":109,"column":37,"nodeType":"658","messageId":"659","endLine":109,"endColumn":39},{"ruleId":"656","severity":1,"message":"674","line":143,"column":20,"nodeType":"658","messageId":"659","endLine":143,"endColumn":22},{"ruleId":"688","severity":1,"message":"689","line":351,"column":7,"nodeType":"666","endLine":351,"endColumn":11},{"ruleId":"660","severity":1,"message":"708","line":2,"column":8,"nodeType":"662","messageId":"663","endLine":2,"endColumn":19},{"ruleId":"660","severity":1,"message":"678","line":3,"column":8,"nodeType":"662","messageId":"663","endLine":3,"endColumn":15},{"ruleId":"656","severity":1,"message":"674","line":77,"column":55,"nodeType":"658","messageId":"659","endLine":77,"endColumn":57},{"ruleId":"696","severity":1,"message":"697","line":77,"column":79,"nodeType":"658","messageId":"698","endLine":77,"endColumn":80},{"ruleId":"656","severity":1,"message":"674","line":104,"column":17,"nodeType":"658","messageId":"659","endLine":104,"endColumn":19},{"ruleId":"656","severity":1,"message":"674","line":111,"column":31,"nodeType":"658","messageId":"659","endLine":111,"endColumn":33},{"ruleId":"656","severity":1,"message":"674","line":122,"column":33,"nodeType":"658","messageId":"659","endLine":122,"endColumn":35},{"ruleId":"656","severity":1,"message":"674","line":130,"column":55,"nodeType":"658","messageId":"659","endLine":130,"endColumn":57},{"ruleId":"656","severity":1,"message":"674","line":140,"column":38,"nodeType":"658","messageId":"659","endLine":140,"endColumn":40},{"ruleId":"656","severity":1,"message":"674","line":143,"column":50,"nodeType":"658","messageId":"659","endLine":143,"endColumn":52},{"ruleId":"656","severity":1,"message":"674","line":150,"column":57,"nodeType":"658","messageId":"659","endLine":150,"endColumn":59},{"ruleId":"656","severity":1,"message":"674","line":165,"column":33,"nodeType":"658","messageId":"659","endLine":165,"endColumn":35},{"ruleId":"656","severity":1,"message":"674","line":56,"column":32,"nodeType":"658","messageId":"659","endLine":56,"endColumn":34},{"ruleId":"656","severity":1,"message":"674","line":68,"column":37,"nodeType":"658","messageId":"659","endLine":68,"endColumn":39},{"ruleId":"656","severity":1,"message":"674","line":86,"column":42,"nodeType":"658","messageId":"659","endLine":86,"endColumn":44},{"ruleId":"656","severity":1,"message":"674","line":89,"column":47,"nodeType":"658","messageId":"659","endLine":89,"endColumn":49},{"ruleId":"656","severity":1,"message":"674","line":92,"column":47,"nodeType":"658","messageId":"659","endLine":92,"endColumn":49},{"ruleId":"656","severity":1,"message":"674","line":97,"column":42,"nodeType":"658","messageId":"659","endLine":97,"endColumn":44},{"ruleId":"656","severity":1,"message":"674","line":100,"column":47,"nodeType":"658","messageId":"659","endLine":100,"endColumn":49},{"ruleId":"656","severity":1,"message":"674","line":103,"column":47,"nodeType":"658","messageId":"659","endLine":103,"endColumn":49},{"ruleId":"656","severity":1,"message":"674","line":168,"column":17,"nodeType":"658","messageId":"659","endLine":168,"endColumn":19},{"ruleId":"656","severity":1,"message":"674","line":175,"column":29,"nodeType":"658","messageId":"659","endLine":175,"endColumn":31},{"ruleId":"696","severity":1,"message":"697","line":193,"column":46,"nodeType":"658","messageId":"698","endLine":193,"endColumn":47},{"ruleId":"688","severity":1,"message":"689","line":243,"column":9,"nodeType":"666","endLine":243,"endColumn":13},{"ruleId":"688","severity":1,"message":"689","line":77,"column":17,"nodeType":"666","endLine":77,"endColumn":21},{"ruleId":"675","severity":1,"message":"676","line":107,"column":37,"nodeType":"677","endLine":107,"endColumn":50},{"ruleId":"675","severity":1,"message":"676","line":148,"column":37,"nodeType":"677","endLine":148,"endColumn":50},{"ruleId":"675","severity":1,"message":"676","line":77,"column":37,"nodeType":"677","endLine":77,"endColumn":50},{"ruleId":"656","severity":1,"message":"674","line":49,"column":24,"nodeType":"658","messageId":"659","endLine":49,"endColumn":26},{"ruleId":"660","severity":1,"message":"687","line":71,"column":15,"nodeType":"662","messageId":"663","endLine":71,"endColumn":18},{"ruleId":"656","severity":1,"message":"657","line":72,"column":24,"nodeType":"658","messageId":"659","endLine":72,"endColumn":26},{"ruleId":"688","severity":1,"message":"689","line":114,"column":17,"nodeType":"666","endLine":114,"endColumn":21},{"ruleId":"675","severity":1,"message":"676","line":88,"column":37,"nodeType":"677","endLine":88,"endColumn":50},{"ruleId":"691","severity":1,"message":"692","line":7,"column":5,"nodeType":"693","messageId":"694","endLine":9,"endColumn":6},{"ruleId":"675","severity":1,"message":"676","line":36,"column":33,"nodeType":"677","endLine":36,"endColumn":46},{"ruleId":"656","severity":1,"message":"674","line":18,"column":66,"nodeType":"658","messageId":"659","endLine":18,"endColumn":68},{"ruleId":"656","severity":1,"message":"674","line":19,"column":58,"nodeType":"658","messageId":"659","endLine":19,"endColumn":60},{"ruleId":"656","severity":1,"message":"674","line":19,"column":123,"nodeType":"658","messageId":"659","endLine":19,"endColumn":125},{"ruleId":"699","severity":1,"message":"700","line":21,"column":17,"nodeType":"666","endLine":24,"endColumn":18},{"ruleId":"656","severity":1,"message":"674","line":18,"column":36,"nodeType":"658","messageId":"659","endLine":18,"endColumn":38},{"ruleId":"701","severity":1,"message":"702","line":37,"column":9,"nodeType":"703","endLine":37,"endColumn":13},{"ruleId":"691","severity":1,"message":"692","line":7,"column":5,"nodeType":"693","messageId":"694","endLine":9,"endColumn":6},{"ruleId":"675","severity":1,"message":"676","line":35,"column":33,"nodeType":"677","endLine":35,"endColumn":46},{"ruleId":"704","replacedBy":"709"},{"ruleId":"706","replacedBy":"710"},{"ruleId":"675","severity":1,"message":"676","line":176,"column":37,"nodeType":"677","endLine":176,"endColumn":50},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'confirmDeleteAccount' is defined but never used.","Expected '===' and instead saw '=='.","jsx-a11y/aria-role","Elements with ARIA roles must use a valid, non-abstract ARIA role.","JSXAttribute","'AppMode' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","'msg' is assigned a value but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","'CreateQuestion' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'async' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","ThisExpression","no-native-reassign",["711"],"no-negated-in-lhs",["712"],"'SearchField' is defined but never used.",["711"],["712"],"no-global-assign","no-unsafe-negation"]